
STM32F407-adda-template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d18  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08007ea0  08007ea0  00008ea0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008090  08008090  0000a070  2**0
                  CONTENTS
  4 .ARM          00000008  08008090  08008090  00009090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008098  08008098  0000a070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008098  08008098  00009098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800809c  0800809c  0000909c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080080a0  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026b0  20000070  08008110  0000a070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002720  08008110  0000a720  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011883  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023fc  00000000  00000000  0001b923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  0001dd20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d2a  00000000  00000000  0001ede8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023467  00000000  00000000  0001fb12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013fc3  00000000  00000000  00042f79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbfe3  00000000  00000000  00056f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00132f1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f8c  00000000  00000000  00132f64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000c3  00000000  00000000  00137ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007e88 	.word	0x08007e88

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08007e88 	.word	0x08007e88

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b78:	f000 b96a 	b.w	8000e50 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	460c      	mov	r4, r1
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d14e      	bne.n	8000c3e <__udivmoddi4+0xaa>
 8000ba0:	4694      	mov	ip, r2
 8000ba2:	458c      	cmp	ip, r1
 8000ba4:	4686      	mov	lr, r0
 8000ba6:	fab2 f282 	clz	r2, r2
 8000baa:	d962      	bls.n	8000c72 <__udivmoddi4+0xde>
 8000bac:	b14a      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bae:	f1c2 0320 	rsb	r3, r2, #32
 8000bb2:	4091      	lsls	r1, r2
 8000bb4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bbc:	4319      	orrs	r1, r3
 8000bbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bc6:	fa1f f68c 	uxth.w	r6, ip
 8000bca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000bd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bda:	fb04 f106 	mul.w	r1, r4, r6
 8000bde:	4299      	cmp	r1, r3
 8000be0:	d90a      	bls.n	8000bf8 <__udivmoddi4+0x64>
 8000be2:	eb1c 0303 	adds.w	r3, ip, r3
 8000be6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000bea:	f080 8112 	bcs.w	8000e12 <__udivmoddi4+0x27e>
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	f240 810f 	bls.w	8000e12 <__udivmoddi4+0x27e>
 8000bf4:	3c02      	subs	r4, #2
 8000bf6:	4463      	add	r3, ip
 8000bf8:	1a59      	subs	r1, r3, r1
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c02:	fb07 1110 	mls	r1, r7, r0, r1
 8000c06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0a:	fb00 f606 	mul.w	r6, r0, r6
 8000c0e:	429e      	cmp	r6, r3
 8000c10:	d90a      	bls.n	8000c28 <__udivmoddi4+0x94>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c1a:	f080 80fc 	bcs.w	8000e16 <__udivmoddi4+0x282>
 8000c1e:	429e      	cmp	r6, r3
 8000c20:	f240 80f9 	bls.w	8000e16 <__udivmoddi4+0x282>
 8000c24:	4463      	add	r3, ip
 8000c26:	3802      	subs	r0, #2
 8000c28:	1b9b      	subs	r3, r3, r6
 8000c2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c2e:	2100      	movs	r1, #0
 8000c30:	b11d      	cbz	r5, 8000c3a <__udivmoddi4+0xa6>
 8000c32:	40d3      	lsrs	r3, r2
 8000c34:	2200      	movs	r2, #0
 8000c36:	e9c5 3200 	strd	r3, r2, [r5]
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d905      	bls.n	8000c4e <__udivmoddi4+0xba>
 8000c42:	b10d      	cbz	r5, 8000c48 <__udivmoddi4+0xb4>
 8000c44:	e9c5 0100 	strd	r0, r1, [r5]
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	e7f5      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000c4e:	fab3 f183 	clz	r1, r3
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d146      	bne.n	8000ce4 <__udivmoddi4+0x150>
 8000c56:	42a3      	cmp	r3, r4
 8000c58:	d302      	bcc.n	8000c60 <__udivmoddi4+0xcc>
 8000c5a:	4290      	cmp	r0, r2
 8000c5c:	f0c0 80f0 	bcc.w	8000e40 <__udivmoddi4+0x2ac>
 8000c60:	1a86      	subs	r6, r0, r2
 8000c62:	eb64 0303 	sbc.w	r3, r4, r3
 8000c66:	2001      	movs	r0, #1
 8000c68:	2d00      	cmp	r5, #0
 8000c6a:	d0e6      	beq.n	8000c3a <__udivmoddi4+0xa6>
 8000c6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c70:	e7e3      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000c72:	2a00      	cmp	r2, #0
 8000c74:	f040 8090 	bne.w	8000d98 <__udivmoddi4+0x204>
 8000c78:	eba1 040c 	sub.w	r4, r1, ip
 8000c7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c80:	fa1f f78c 	uxth.w	r7, ip
 8000c84:	2101      	movs	r1, #1
 8000c86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c96:	fb07 f006 	mul.w	r0, r7, r6
 8000c9a:	4298      	cmp	r0, r3
 8000c9c:	d908      	bls.n	8000cb0 <__udivmoddi4+0x11c>
 8000c9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x11a>
 8000ca8:	4298      	cmp	r0, r3
 8000caa:	f200 80cd 	bhi.w	8000e48 <__udivmoddi4+0x2b4>
 8000cae:	4626      	mov	r6, r4
 8000cb0:	1a1c      	subs	r4, r3, r0
 8000cb2:	fa1f f38e 	uxth.w	r3, lr
 8000cb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cba:	fb08 4410 	mls	r4, r8, r0, r4
 8000cbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cc2:	fb00 f707 	mul.w	r7, r0, r7
 8000cc6:	429f      	cmp	r7, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x148>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x146>
 8000cd4:	429f      	cmp	r7, r3
 8000cd6:	f200 80b0 	bhi.w	8000e3a <__udivmoddi4+0x2a6>
 8000cda:	4620      	mov	r0, r4
 8000cdc:	1bdb      	subs	r3, r3, r7
 8000cde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce2:	e7a5      	b.n	8000c30 <__udivmoddi4+0x9c>
 8000ce4:	f1c1 0620 	rsb	r6, r1, #32
 8000ce8:	408b      	lsls	r3, r1
 8000cea:	fa22 f706 	lsr.w	r7, r2, r6
 8000cee:	431f      	orrs	r7, r3
 8000cf0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cf4:	fa04 f301 	lsl.w	r3, r4, r1
 8000cf8:	ea43 030c 	orr.w	r3, r3, ip
 8000cfc:	40f4      	lsrs	r4, r6
 8000cfe:	fa00 f801 	lsl.w	r8, r0, r1
 8000d02:	0c38      	lsrs	r0, r7, #16
 8000d04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d08:	fbb4 fef0 	udiv	lr, r4, r0
 8000d0c:	fa1f fc87 	uxth.w	ip, r7
 8000d10:	fb00 441e 	mls	r4, r0, lr, r4
 8000d14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d18:	fb0e f90c 	mul.w	r9, lr, ip
 8000d1c:	45a1      	cmp	r9, r4
 8000d1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x1a6>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d2a:	f080 8084 	bcs.w	8000e36 <__udivmoddi4+0x2a2>
 8000d2e:	45a1      	cmp	r9, r4
 8000d30:	f240 8081 	bls.w	8000e36 <__udivmoddi4+0x2a2>
 8000d34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d38:	443c      	add	r4, r7
 8000d3a:	eba4 0409 	sub.w	r4, r4, r9
 8000d3e:	fa1f f983 	uxth.w	r9, r3
 8000d42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d46:	fb00 4413 	mls	r4, r0, r3, r4
 8000d4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x1d2>
 8000d56:	193c      	adds	r4, r7, r4
 8000d58:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000d5c:	d267      	bcs.n	8000e2e <__udivmoddi4+0x29a>
 8000d5e:	45a4      	cmp	ip, r4
 8000d60:	d965      	bls.n	8000e2e <__udivmoddi4+0x29a>
 8000d62:	3b02      	subs	r3, #2
 8000d64:	443c      	add	r4, r7
 8000d66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d6e:	eba4 040c 	sub.w	r4, r4, ip
 8000d72:	429c      	cmp	r4, r3
 8000d74:	46ce      	mov	lr, r9
 8000d76:	469c      	mov	ip, r3
 8000d78:	d351      	bcc.n	8000e1e <__udivmoddi4+0x28a>
 8000d7a:	d04e      	beq.n	8000e1a <__udivmoddi4+0x286>
 8000d7c:	b155      	cbz	r5, 8000d94 <__udivmoddi4+0x200>
 8000d7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d82:	eb64 040c 	sbc.w	r4, r4, ip
 8000d86:	fa04 f606 	lsl.w	r6, r4, r6
 8000d8a:	40cb      	lsrs	r3, r1
 8000d8c:	431e      	orrs	r6, r3
 8000d8e:	40cc      	lsrs	r4, r1
 8000d90:	e9c5 6400 	strd	r6, r4, [r5]
 8000d94:	2100      	movs	r1, #0
 8000d96:	e750      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000d98:	f1c2 0320 	rsb	r3, r2, #32
 8000d9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa24 f303 	lsr.w	r3, r4, r3
 8000da8:	4094      	lsls	r4, r2
 8000daa:	430c      	orrs	r4, r1
 8000dac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000dc0:	0c23      	lsrs	r3, r4, #16
 8000dc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc6:	fb00 f107 	mul.w	r1, r0, r7
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x24c>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000dd6:	d22c      	bcs.n	8000e32 <__udivmoddi4+0x29e>
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d92a      	bls.n	8000e32 <__udivmoddi4+0x29e>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1a5b      	subs	r3, r3, r1
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000de8:	fb08 3311 	mls	r3, r8, r1, r3
 8000dec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df0:	fb01 f307 	mul.w	r3, r1, r7
 8000df4:	42a3      	cmp	r3, r4
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x276>
 8000df8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dfc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e00:	d213      	bcs.n	8000e2a <__udivmoddi4+0x296>
 8000e02:	42a3      	cmp	r3, r4
 8000e04:	d911      	bls.n	8000e2a <__udivmoddi4+0x296>
 8000e06:	3902      	subs	r1, #2
 8000e08:	4464      	add	r4, ip
 8000e0a:	1ae4      	subs	r4, r4, r3
 8000e0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e10:	e739      	b.n	8000c86 <__udivmoddi4+0xf2>
 8000e12:	4604      	mov	r4, r0
 8000e14:	e6f0      	b.n	8000bf8 <__udivmoddi4+0x64>
 8000e16:	4608      	mov	r0, r1
 8000e18:	e706      	b.n	8000c28 <__udivmoddi4+0x94>
 8000e1a:	45c8      	cmp	r8, r9
 8000e1c:	d2ae      	bcs.n	8000d7c <__udivmoddi4+0x1e8>
 8000e1e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e22:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e26:	3801      	subs	r0, #1
 8000e28:	e7a8      	b.n	8000d7c <__udivmoddi4+0x1e8>
 8000e2a:	4631      	mov	r1, r6
 8000e2c:	e7ed      	b.n	8000e0a <__udivmoddi4+0x276>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	e799      	b.n	8000d66 <__udivmoddi4+0x1d2>
 8000e32:	4630      	mov	r0, r6
 8000e34:	e7d4      	b.n	8000de0 <__udivmoddi4+0x24c>
 8000e36:	46d6      	mov	lr, sl
 8000e38:	e77f      	b.n	8000d3a <__udivmoddi4+0x1a6>
 8000e3a:	4463      	add	r3, ip
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	e74d      	b.n	8000cdc <__udivmoddi4+0x148>
 8000e40:	4606      	mov	r6, r0
 8000e42:	4623      	mov	r3, r4
 8000e44:	4608      	mov	r0, r1
 8000e46:	e70f      	b.n	8000c68 <__udivmoddi4+0xd4>
 8000e48:	3e02      	subs	r6, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	e730      	b.n	8000cb0 <__udivmoddi4+0x11c>
 8000e4e:	bf00      	nop

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	0000      	movs	r0, r0
	...

08000e58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e58:	b5b0      	push	{r4, r5, r7, lr}
 8000e5a:	f5ad 5d47 	sub.w	sp, sp, #12736	@ 0x31c0
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e62:	f001 f849 	bl	8001ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e66:	f000 fa8d 	bl	8001384 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* DFT variables */
  float sinbuf[BUF_SIZE]   = {0.0};
 8000e6a:	f507 5307 	add.w	r3, r7, #8640	@ 0x21c0
 8000e6e:	f103 0310 	add.w	r3, r3, #16
 8000e72:	3b10      	subs	r3, #16
 8000e74:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f005 fcf8 	bl	8006870 <memset>
  float cosbuf[BUF_SIZE]   = {0.0};
 8000e80:	f507 538e 	add.w	r3, r7, #4544	@ 0x11c0
 8000e84:	f103 0310 	add.w	r3, r3, #16
 8000e88:	3b10      	subs	r3, #16
 8000e8a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f005 fced 	bl	8006870 <memset>
  float blackman[BUF_SIZE] = {0.0};
 8000e96:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8000e9a:	3b10      	subs	r3, #16
 8000e9c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f005 fce4 	bl	8006870 <memset>
  int DFT[TAPS]            = {0};
 8000ea8:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8000eac:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f44f 73de 	mov.w	r3, #444	@ 0x1bc
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	2100      	movs	r1, #0
 8000eba:	f005 fcd9 	bl	8006870 <memset>

  uint32_t sinsum = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f507 5247 	add.w	r2, r7, #12736	@ 0x31c0
 8000ec4:	f102 020c 	add.w	r2, r2, #12
 8000ec8:	6013      	str	r3, [r2, #0]
  uint32_t cossum = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f507 5247 	add.w	r2, r7, #12736	@ 0x31c0
 8000ed0:	f102 0208 	add.w	r2, r2, #8
 8000ed4:	6013      	str	r3, [r2, #0]
//	float scaled_data[BUF_SIZE];

  /* USER CODE BEGIN SysInit */

  /* put sin and cos functions in a buffer array */
  for (i=0; i < BUF_SIZE; i++)
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f507 5247 	add.w	r2, r7, #12736	@ 0x31c0
 8000edc:	f102 0206 	add.w	r2, r2, #6
 8000ee0:	8013      	strh	r3, [r2, #0]
 8000ee2:	e10b      	b.n	80010fc <main+0x2a4>
  {
	  sinbuf[i] = sin((2*M_PI)/(BUF_SIZE*i));
 8000ee4:	f507 5347 	add.w	r3, r7, #12736	@ 0x31c0
 8000ee8:	f103 0306 	add.w	r3, r3, #6
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	029b      	lsls	r3, r3, #10
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fabb 	bl	800046c <__aeabi_i2d>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	460b      	mov	r3, r1
 8000efa:	a1ac      	add	r1, pc, #688	@ (adr r1, 80011ac <main+0x354>)
 8000efc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f00:	f7ff fc48 	bl	8000794 <__aeabi_ddiv>
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	ec43 2b17 	vmov	d7, r2, r3
 8000f0c:	eeb0 0a47 	vmov.f32	s0, s14
 8000f10:	eef0 0a67 	vmov.f32	s1, s15
 8000f14:	f005 fd98 	bl	8006a48 <sin>
 8000f18:	ec53 2b10 	vmov	r2, r3, d0
 8000f1c:	f507 5147 	add.w	r1, r7, #12736	@ 0x31c0
 8000f20:	f101 0106 	add.w	r1, r1, #6
 8000f24:	880c      	ldrh	r4, [r1, #0]
 8000f26:	4610      	mov	r0, r2
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f7ff fdcb 	bl	8000ac4 <__aeabi_d2f>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	f507 5307 	add.w	r3, r7, #8640	@ 0x21c0
 8000f34:	f103 0310 	add.w	r3, r3, #16
 8000f38:	4619      	mov	r1, r3
 8000f3a:	00a3      	lsls	r3, r4, #2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	3b10      	subs	r3, #16
 8000f40:	601a      	str	r2, [r3, #0]
	  cosbuf[i] = cos((2*M_PI)/(BUF_SIZE*i));
 8000f42:	f507 5347 	add.w	r3, r7, #12736	@ 0x31c0
 8000f46:	f103 0306 	add.w	r3, r3, #6
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	029b      	lsls	r3, r3, #10
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fa8c 	bl	800046c <__aeabi_i2d>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	a194      	add	r1, pc, #592	@ (adr r1, 80011ac <main+0x354>)
 8000f5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f5e:	f7ff fc19 	bl	8000794 <__aeabi_ddiv>
 8000f62:	4602      	mov	r2, r0
 8000f64:	460b      	mov	r3, r1
 8000f66:	ec43 2b17 	vmov	d7, r2, r3
 8000f6a:	eeb0 0a47 	vmov.f32	s0, s14
 8000f6e:	eef0 0a67 	vmov.f32	s1, s15
 8000f72:	f005 fd09 	bl	8006988 <cos>
 8000f76:	ec53 2b10 	vmov	r2, r3, d0
 8000f7a:	f507 5147 	add.w	r1, r7, #12736	@ 0x31c0
 8000f7e:	f101 0106 	add.w	r1, r1, #6
 8000f82:	880c      	ldrh	r4, [r1, #0]
 8000f84:	4610      	mov	r0, r2
 8000f86:	4619      	mov	r1, r3
 8000f88:	f7ff fd9c 	bl	8000ac4 <__aeabi_d2f>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	f507 538e 	add.w	r3, r7, #4544	@ 0x11c0
 8000f92:	f103 0310 	add.w	r3, r3, #16
 8000f96:	4619      	mov	r1, r3
 8000f98:	00a3      	lsls	r3, r4, #2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	3b10      	subs	r3, #16
 8000f9e:	601a      	str	r2, [r3, #0]
    
      blackman[i] =
       (0.35875-0.48829 * cos((2*M_PI*i)/BUF_SIZE)+ \
 8000fa0:	f507 5347 	add.w	r3, r7, #12736	@ 0x31c0
 8000fa4:	f103 0306 	add.w	r3, r3, #6
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fa5e 	bl	800046c <__aeabi_i2d>
 8000fb0:	a37e      	add	r3, pc, #504	@ (adr r3, 80011ac <main+0x354>)
 8000fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb6:	f7ff fac3 	bl	8000540 <__aeabi_dmul>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	4610      	mov	r0, r2
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	4b76      	ldr	r3, [pc, #472]	@ (80011a0 <main+0x348>)
 8000fc8:	f7ff fbe4 	bl	8000794 <__aeabi_ddiv>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	ec43 2b17 	vmov	d7, r2, r3
 8000fd4:	eeb0 0a47 	vmov.f32	s0, s14
 8000fd8:	eef0 0a67 	vmov.f32	s1, s15
 8000fdc:	f005 fcd4 	bl	8006988 <cos>
 8000fe0:	ec51 0b10 	vmov	r0, r1, d0
 8000fe4:	a362      	add	r3, pc, #392	@ (adr r3, 8001170 <main+0x318>)
 8000fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fea:	f7ff faa9 	bl	8000540 <__aeabi_dmul>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	a161      	add	r1, pc, #388	@ (adr r1, 8001178 <main+0x320>)
 8000ff4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ff8:	f7ff f8ea 	bl	80001d0 <__aeabi_dsub>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4614      	mov	r4, r2
 8001002:	461d      	mov	r5, r3
        0.14128*cos((4*M_PI*i)/BUF_SIZE)- \
 8001004:	f507 5347 	add.w	r3, r7, #12736	@ 0x31c0
 8001008:	f103 0306 	add.w	r3, r3, #6
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fa2c 	bl	800046c <__aeabi_i2d>
 8001014:	a35a      	add	r3, pc, #360	@ (adr r3, 8001180 <main+0x328>)
 8001016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101a:	f7ff fa91 	bl	8000540 <__aeabi_dmul>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4610      	mov	r0, r2
 8001024:	4619      	mov	r1, r3
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	4b5d      	ldr	r3, [pc, #372]	@ (80011a0 <main+0x348>)
 800102c:	f7ff fbb2 	bl	8000794 <__aeabi_ddiv>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	ec43 2b17 	vmov	d7, r2, r3
 8001038:	eeb0 0a47 	vmov.f32	s0, s14
 800103c:	eef0 0a67 	vmov.f32	s1, s15
 8001040:	f005 fca2 	bl	8006988 <cos>
 8001044:	ec51 0b10 	vmov	r0, r1, d0
 8001048:	a34f      	add	r3, pc, #316	@ (adr r3, 8001188 <main+0x330>)
 800104a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104e:	f7ff fa77 	bl	8000540 <__aeabi_dmul>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
       (0.35875-0.48829 * cos((2*M_PI*i)/BUF_SIZE)+ \
 8001056:	4620      	mov	r0, r4
 8001058:	4629      	mov	r1, r5
 800105a:	f7ff f8bb 	bl	80001d4 <__adddf3>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	4614      	mov	r4, r2
 8001064:	461d      	mov	r5, r3
        0.01168*cos((6*M_PI*i)/BUF_SIZE) \
 8001066:	f507 5347 	add.w	r3, r7, #12736	@ 0x31c0
 800106a:	f103 0306 	add.w	r3, r3, #6
 800106e:	881b      	ldrh	r3, [r3, #0]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff f9fb 	bl	800046c <__aeabi_i2d>
 8001076:	a346      	add	r3, pc, #280	@ (adr r3, 8001190 <main+0x338>)
 8001078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107c:	f7ff fa60 	bl	8000540 <__aeabi_dmul>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	4610      	mov	r0, r2
 8001086:	4619      	mov	r1, r3
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	4b44      	ldr	r3, [pc, #272]	@ (80011a0 <main+0x348>)
 800108e:	f7ff fb81 	bl	8000794 <__aeabi_ddiv>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	ec43 2b17 	vmov	d7, r2, r3
 800109a:	eeb0 0a47 	vmov.f32	s0, s14
 800109e:	eef0 0a67 	vmov.f32	s1, s15
 80010a2:	f005 fc71 	bl	8006988 <cos>
 80010a6:	ec51 0b10 	vmov	r0, r1, d0
 80010aa:	a33b      	add	r3, pc, #236	@ (adr r3, 8001198 <main+0x340>)
 80010ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b0:	f7ff fa46 	bl	8000540 <__aeabi_dmul>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
        0.14128*cos((4*M_PI*i)/BUF_SIZE)- \
 80010b8:	4620      	mov	r0, r4
 80010ba:	4629      	mov	r1, r5
 80010bc:	f7ff f888 	bl	80001d0 <__aeabi_dsub>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
      blackman[i] =
 80010c4:	f507 5147 	add.w	r1, r7, #12736	@ 0x31c0
 80010c8:	f101 0106 	add.w	r1, r1, #6
 80010cc:	880c      	ldrh	r4, [r1, #0]
        0.14128*cos((4*M_PI*i)/BUF_SIZE)- \
 80010ce:	4610      	mov	r0, r2
 80010d0:	4619      	mov	r1, r3
 80010d2:	f7ff fcf7 	bl	8000ac4 <__aeabi_d2f>
 80010d6:	4602      	mov	r2, r0
      blackman[i] =
 80010d8:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80010dc:	4619      	mov	r1, r3
 80010de:	00a3      	lsls	r3, r4, #2
 80010e0:	440b      	add	r3, r1
 80010e2:	3b10      	subs	r3, #16
 80010e4:	601a      	str	r2, [r3, #0]
  for (i=0; i < BUF_SIZE; i++)
 80010e6:	f507 5347 	add.w	r3, r7, #12736	@ 0x31c0
 80010ea:	f103 0306 	add.w	r3, r3, #6
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	3301      	adds	r3, #1
 80010f2:	f507 5247 	add.w	r2, r7, #12736	@ 0x31c0
 80010f6:	f102 0206 	add.w	r2, r2, #6
 80010fa:	8013      	strh	r3, [r2, #0]
 80010fc:	f507 5347 	add.w	r3, r7, #12736	@ 0x31c0
 8001100:	f103 0306 	add.w	r3, r3, #6
 8001104:	881b      	ldrh	r3, [r3, #0]
 8001106:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800110a:	f4ff aeeb 	bcc.w	8000ee4 <main+0x8c>
  }

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110e:	f000 fb19 	bl	8001744 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001112:	f000 fa79 	bl	8001608 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001116:	f000 f99f 	bl	8001458 <MX_ADC1_Init>
  MX_ADC2_Init();
 800111a:	f000 f9ef 	bl	80014fc <MX_ADC2_Init>
  MX_DAC_Init();
 800111e:	f000 fa3f 	bl	80015a0 <MX_DAC_Init>
  MX_TIM3_Init();
 8001122:	f000 fa9f 	bl	8001664 <MX_TIM3_Init>
  MX_USB_OTG_FS_HCD_Init();
 8001126:	f000 faeb 	bl	8001700 <MX_USB_OTG_FS_HCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);				// start the interrupt timer 3
 800112a:	481e      	ldr	r0, [pc, #120]	@ (80011a4 <main+0x34c>)
 800112c:	f004 fb52 	bl	80057d4 <HAL_TIM_Base_Start_IT>

  while (1)
  {

    /* If ADC buffer is filled with values calculate */
    if (bufferFull)
 8001130:	4b1d      	ldr	r3, [pc, #116]	@ (80011a8 <main+0x350>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d0fb      	beq.n	8001130 <main+0x2d8>
    {
      /* DFT math stuff here */
      for (n = 0; n < TAPS; ++n) //
 8001138:	2300      	movs	r3, #0
 800113a:	f507 5247 	add.w	r2, r7, #12736	@ 0x31c0
 800113e:	f102 0204 	add.w	r2, r2, #4
 8001142:	8013      	strh	r3, [r2, #0]
 8001144:	e10e      	b.n	8001364 <main+0x50c>
      {
        cossum = 0; // Real axis
 8001146:	2300      	movs	r3, #0
 8001148:	f507 5247 	add.w	r2, r7, #12736	@ 0x31c0
 800114c:	f102 0208 	add.w	r2, r2, #8
 8001150:	6013      	str	r3, [r2, #0]
        sinsum = 0; // Img axis
 8001152:	2300      	movs	r3, #0
 8001154:	f507 5247 	add.w	r2, r7, #12736	@ 0x31c0
 8001158:	f102 020c 	add.w	r2, r2, #12
 800115c:	6013      	str	r3, [r2, #0]

        for (i = 0; i < BUF_SIZE; ++i)
 800115e:	2300      	movs	r3, #0
 8001160:	f507 5247 	add.w	r2, r7, #12736	@ 0x31c0
 8001164:	f102 0206 	add.w	r2, r2, #6
 8001168:	8013      	strh	r3, [r2, #0]
 800116a:	e0b3      	b.n	80012d4 <main+0x47c>
 800116c:	f3af 8000 	nop.w
 8001170:	b33daf8e 	.word	0xb33daf8e
 8001174:	3fdf4024 	.word	0x3fdf4024
 8001178:	8f5c28f6 	.word	0x8f5c28f6
 800117c:	3fd6f5c2 	.word	0x3fd6f5c2
 8001180:	54442d18 	.word	0x54442d18
 8001184:	402921fb 	.word	0x402921fb
 8001188:	89ca18bd 	.word	0x89ca18bd
 800118c:	3fc21576 	.word	0x3fc21576
 8001190:	7f3321d2 	.word	0x7f3321d2
 8001194:	4032d97c 	.word	0x4032d97c
 8001198:	102363b2 	.word	0x102363b2
 800119c:	3f87ebaf 	.word	0x3f87ebaf
 80011a0:	40900000 	.word	0x40900000
 80011a4:	20000184 	.word	0x20000184
 80011a8:	200025b0 	.word	0x200025b0
 80011ac:	54442d18 	.word	0x54442d18
 80011b0:	401921fb 	.word	0x401921fb
        {
          int k = (i*n) % BUF_SIZE;
 80011b4:	f507 5347 	add.w	r3, r7, #12736	@ 0x31c0
 80011b8:	f103 0306 	add.w	r3, r3, #6
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	f507 5247 	add.w	r2, r7, #12736	@ 0x31c0
 80011c2:	f102 0204 	add.w	r2, r2, #4
 80011c6:	8812      	ldrh	r2, [r2, #0]
 80011c8:	fb02 f303 	mul.w	r3, r2, r3
 80011cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011d0:	f507 5247 	add.w	r2, r7, #12736	@ 0x31c0
 80011d4:	6013      	str	r3, [r2, #0]
          
          cossum += (avg_buf[k] * blackman[k]) * sinbuf[k];
 80011d6:	4a69      	ldr	r2, [pc, #420]	@ (800137c <main+0x524>)
 80011d8:	f507 5347 	add.w	r3, r7, #12736	@ 0x31c0
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e2:	ee07 3a90 	vmov	s15, r3
 80011e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ea:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 80011ee:	461a      	mov	r2, r3
 80011f0:	f507 5347 	add.w	r3, r7, #12736	@ 0x31c0
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	3b10      	subs	r3, #16
 80011fc:	edd3 7a00 	vldr	s15, [r3]
 8001200:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001204:	f507 5307 	add.w	r3, r7, #8640	@ 0x21c0
 8001208:	f103 0310 	add.w	r3, r3, #16
 800120c:	461a      	mov	r2, r3
 800120e:	f507 5347 	add.w	r3, r7, #12736	@ 0x31c0
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	3b10      	subs	r3, #16
 800121a:	edd3 7a00 	vldr	s15, [r3]
 800121e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001222:	f507 5347 	add.w	r3, r7, #12736	@ 0x31c0
 8001226:	f103 0308 	add.w	r3, r3, #8
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	ee07 3a90 	vmov	s15, r3
 8001230:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001234:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001238:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800123c:	ee17 3a90 	vmov	r3, s15
 8001240:	f507 5247 	add.w	r2, r7, #12736	@ 0x31c0
 8001244:	f102 0208 	add.w	r2, r2, #8
 8001248:	6013      	str	r3, [r2, #0]
          sinsum += (avg_buf[k] * blackman[k]) * sinbuf[k];
 800124a:	4a4c      	ldr	r2, [pc, #304]	@ (800137c <main+0x524>)
 800124c:	f507 5347 	add.w	r3, r7, #12736	@ 0x31c0
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001256:	ee07 3a90 	vmov	s15, r3
 800125a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800125e:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8001262:	461a      	mov	r2, r3
 8001264:	f507 5347 	add.w	r3, r7, #12736	@ 0x31c0
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	3b10      	subs	r3, #16
 8001270:	edd3 7a00 	vldr	s15, [r3]
 8001274:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001278:	f507 5307 	add.w	r3, r7, #8640	@ 0x21c0
 800127c:	f103 0310 	add.w	r3, r3, #16
 8001280:	461a      	mov	r2, r3
 8001282:	f507 5347 	add.w	r3, r7, #12736	@ 0x31c0
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	3b10      	subs	r3, #16
 800128e:	edd3 7a00 	vldr	s15, [r3]
 8001292:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001296:	f507 5347 	add.w	r3, r7, #12736	@ 0x31c0
 800129a:	f103 030c 	add.w	r3, r3, #12
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	ee07 3a90 	vmov	s15, r3
 80012a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012b0:	ee17 3a90 	vmov	r3, s15
 80012b4:	f507 5247 	add.w	r2, r7, #12736	@ 0x31c0
 80012b8:	f102 020c 	add.w	r2, r2, #12
 80012bc:	6013      	str	r3, [r2, #0]
        for (i = 0; i < BUF_SIZE; ++i)
 80012be:	f507 5347 	add.w	r3, r7, #12736	@ 0x31c0
 80012c2:	f103 0306 	add.w	r3, r3, #6
 80012c6:	881b      	ldrh	r3, [r3, #0]
 80012c8:	3301      	adds	r3, #1
 80012ca:	f507 5247 	add.w	r2, r7, #12736	@ 0x31c0
 80012ce:	f102 0206 	add.w	r2, r2, #6
 80012d2:	8013      	strh	r3, [r2, #0]
 80012d4:	f507 5347 	add.w	r3, r7, #12736	@ 0x31c0
 80012d8:	f103 0306 	add.w	r3, r3, #6
 80012dc:	881b      	ldrh	r3, [r3, #0]
 80012de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012e2:	f4ff af67 	bcc.w	80011b4 <main+0x35c>
        }
        
        DFT[n] = (int)roundf(hypot(sinsum, cossum)); // mod|| SQRT(A^2 + B^2)
 80012e6:	f507 5347 	add.w	r3, r7, #12736	@ 0x31c0
 80012ea:	f103 030c 	add.w	r3, r3, #12
 80012ee:	6818      	ldr	r0, [r3, #0]
 80012f0:	f7ff f8ac 	bl	800044c <__aeabi_ui2d>
 80012f4:	4604      	mov	r4, r0
 80012f6:	460d      	mov	r5, r1
 80012f8:	f507 5347 	add.w	r3, r7, #12736	@ 0x31c0
 80012fc:	f103 0308 	add.w	r3, r3, #8
 8001300:	6818      	ldr	r0, [r3, #0]
 8001302:	f7ff f8a3 	bl	800044c <__aeabi_ui2d>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	ec43 2b11 	vmov	d1, r2, r3
 800130e:	ec45 4b10 	vmov	d0, r4, r5
 8001312:	f005 fb05 	bl	8006920 <hypot>
 8001316:	ec53 2b10 	vmov	r2, r3, d0
 800131a:	4610      	mov	r0, r2
 800131c:	4619      	mov	r1, r3
 800131e:	f7ff fbd1 	bl	8000ac4 <__aeabi_d2f>
 8001322:	4603      	mov	r3, r0
 8001324:	ee00 3a10 	vmov	s0, r3
 8001328:	f005 fad4 	bl	80068d4 <roundf>
 800132c:	eef0 7a40 	vmov.f32	s15, s0
 8001330:	f507 5347 	add.w	r3, r7, #12736	@ 0x31c0
 8001334:	f103 0304 	add.w	r3, r3, #4
 8001338:	881a      	ldrh	r2, [r3, #0]
 800133a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800133e:	ee17 1a90 	vmov	r1, s15
 8001342:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 8001346:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800134a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (n = 0; n < TAPS; ++n) //
 800134e:	f507 5347 	add.w	r3, r7, #12736	@ 0x31c0
 8001352:	f103 0304 	add.w	r3, r3, #4
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	3301      	adds	r3, #1
 800135a:	f507 5247 	add.w	r2, r7, #12736	@ 0x31c0
 800135e:	f102 0204 	add.w	r2, r2, #4
 8001362:	8013      	strh	r3, [r2, #0]
 8001364:	f507 5347 	add.w	r3, r7, #12736	@ 0x31c0
 8001368:	f103 0304 	add.w	r3, r3, #4
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	2b6e      	cmp	r3, #110	@ 0x6e
 8001370:	f67f aee9 	bls.w	8001146 <main+0x2ee>
      }

      bufferFull = false; // Buffer is no longer full carry on
 8001374:	4b02      	ldr	r3, [pc, #8]	@ (8001380 <main+0x528>)
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]
    if (bufferFull)
 800137a:	e6d9      	b.n	8001130 <main+0x2d8>
 800137c:	200015b0 	.word	0x200015b0
 8001380:	200025b0 	.word	0x200025b0

08001384 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b094      	sub	sp, #80	@ 0x50
 8001388:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800138a:	f107 0320 	add.w	r3, r7, #32
 800138e:	2230      	movs	r2, #48	@ 0x30
 8001390:	2100      	movs	r1, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f005 fa6c 	bl	8006870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a8:	2300      	movs	r3, #0
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	4b28      	ldr	r3, [pc, #160]	@ (8001450 <SystemClock_Config+0xcc>)
 80013ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b0:	4a27      	ldr	r2, [pc, #156]	@ (8001450 <SystemClock_Config+0xcc>)
 80013b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80013b8:	4b25      	ldr	r3, [pc, #148]	@ (8001450 <SystemClock_Config+0xcc>)
 80013ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c4:	2300      	movs	r3, #0
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	4b22      	ldr	r3, [pc, #136]	@ (8001454 <SystemClock_Config+0xd0>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a21      	ldr	r2, [pc, #132]	@ (8001454 <SystemClock_Config+0xd0>)
 80013ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001454 <SystemClock_Config+0xd0>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013e0:	2301      	movs	r3, #1
 80013e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ea:	2302      	movs	r3, #2
 80013ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013f4:	2308      	movs	r3, #8
 80013f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013f8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80013fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013fe:	2302      	movs	r3, #2
 8001400:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001402:	2307      	movs	r3, #7
 8001404:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001406:	f107 0320 	add.w	r3, r7, #32
 800140a:	4618      	mov	r0, r3
 800140c:	f003 fd0e 	bl	8004e2c <HAL_RCC_OscConfig>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001416:	f000 fab3 	bl	8001980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800141a:	230f      	movs	r3, #15
 800141c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800141e:	2302      	movs	r3, #2
 8001420:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001426:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800142a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800142c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001430:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001432:	f107 030c 	add.w	r3, r7, #12
 8001436:	2105      	movs	r1, #5
 8001438:	4618      	mov	r0, r3
 800143a:	f003 ff6f 	bl	800531c <HAL_RCC_ClockConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001444:	f000 fa9c 	bl	8001980 <Error_Handler>
  }
}
 8001448:	bf00      	nop
 800144a:	3750      	adds	r7, #80	@ 0x50
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40023800 	.word	0x40023800
 8001454:	40007000 	.word	0x40007000

08001458 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800145e:	463b      	mov	r3, r7
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800146a:	4b21      	ldr	r3, [pc, #132]	@ (80014f0 <MX_ADC1_Init+0x98>)
 800146c:	4a21      	ldr	r2, [pc, #132]	@ (80014f4 <MX_ADC1_Init+0x9c>)
 800146e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001470:	4b1f      	ldr	r3, [pc, #124]	@ (80014f0 <MX_ADC1_Init+0x98>)
 8001472:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001476:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001478:	4b1d      	ldr	r3, [pc, #116]	@ (80014f0 <MX_ADC1_Init+0x98>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800147e:	4b1c      	ldr	r3, [pc, #112]	@ (80014f0 <MX_ADC1_Init+0x98>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001484:	4b1a      	ldr	r3, [pc, #104]	@ (80014f0 <MX_ADC1_Init+0x98>)
 8001486:	2200      	movs	r2, #0
 8001488:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800148a:	4b19      	ldr	r3, [pc, #100]	@ (80014f0 <MX_ADC1_Init+0x98>)
 800148c:	2200      	movs	r2, #0
 800148e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001492:	4b17      	ldr	r3, [pc, #92]	@ (80014f0 <MX_ADC1_Init+0x98>)
 8001494:	2200      	movs	r2, #0
 8001496:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001498:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <MX_ADC1_Init+0x98>)
 800149a:	4a17      	ldr	r2, [pc, #92]	@ (80014f8 <MX_ADC1_Init+0xa0>)
 800149c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800149e:	4b14      	ldr	r3, [pc, #80]	@ (80014f0 <MX_ADC1_Init+0x98>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014a4:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <MX_ADC1_Init+0x98>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014aa:	4b11      	ldr	r3, [pc, #68]	@ (80014f0 <MX_ADC1_Init+0x98>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014b2:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <MX_ADC1_Init+0x98>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014b8:	480d      	ldr	r0, [pc, #52]	@ (80014f0 <MX_ADC1_Init+0x98>)
 80014ba:	f000 fdb3 	bl	8002024 <HAL_ADC_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80014c4:	f000 fa5c 	bl	8001980 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80014c8:	230b      	movs	r3, #11
 80014ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014cc:	2301      	movs	r3, #1
 80014ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014d4:	463b      	mov	r3, r7
 80014d6:	4619      	mov	r1, r3
 80014d8:	4805      	ldr	r0, [pc, #20]	@ (80014f0 <MX_ADC1_Init+0x98>)
 80014da:	f000 ff51 	bl	8002380 <HAL_ADC_ConfigChannel>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80014e4:	f000 fa4c 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014e8:	bf00      	nop
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	2000008c 	.word	0x2000008c
 80014f4:	40012000 	.word	0x40012000
 80014f8:	0f000001 	.word	0x0f000001

080014fc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001502:	463b      	mov	r3, r7
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800150e:	4b21      	ldr	r3, [pc, #132]	@ (8001594 <MX_ADC2_Init+0x98>)
 8001510:	4a21      	ldr	r2, [pc, #132]	@ (8001598 <MX_ADC2_Init+0x9c>)
 8001512:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001514:	4b1f      	ldr	r3, [pc, #124]	@ (8001594 <MX_ADC2_Init+0x98>)
 8001516:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800151a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800151c:	4b1d      	ldr	r3, [pc, #116]	@ (8001594 <MX_ADC2_Init+0x98>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001522:	4b1c      	ldr	r3, [pc, #112]	@ (8001594 <MX_ADC2_Init+0x98>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001528:	4b1a      	ldr	r3, [pc, #104]	@ (8001594 <MX_ADC2_Init+0x98>)
 800152a:	2200      	movs	r2, #0
 800152c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800152e:	4b19      	ldr	r3, [pc, #100]	@ (8001594 <MX_ADC2_Init+0x98>)
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001536:	4b17      	ldr	r3, [pc, #92]	@ (8001594 <MX_ADC2_Init+0x98>)
 8001538:	2200      	movs	r2, #0
 800153a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800153c:	4b15      	ldr	r3, [pc, #84]	@ (8001594 <MX_ADC2_Init+0x98>)
 800153e:	4a17      	ldr	r2, [pc, #92]	@ (800159c <MX_ADC2_Init+0xa0>)
 8001540:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001542:	4b14      	ldr	r3, [pc, #80]	@ (8001594 <MX_ADC2_Init+0x98>)
 8001544:	2200      	movs	r2, #0
 8001546:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001548:	4b12      	ldr	r3, [pc, #72]	@ (8001594 <MX_ADC2_Init+0x98>)
 800154a:	2201      	movs	r2, #1
 800154c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800154e:	4b11      	ldr	r3, [pc, #68]	@ (8001594 <MX_ADC2_Init+0x98>)
 8001550:	2200      	movs	r2, #0
 8001552:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001556:	4b0f      	ldr	r3, [pc, #60]	@ (8001594 <MX_ADC2_Init+0x98>)
 8001558:	2201      	movs	r2, #1
 800155a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800155c:	480d      	ldr	r0, [pc, #52]	@ (8001594 <MX_ADC2_Init+0x98>)
 800155e:	f000 fd61 	bl	8002024 <HAL_ADC_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001568:	f000 fa0a 	bl	8001980 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800156c:	230c      	movs	r3, #12
 800156e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001570:	2301      	movs	r3, #1
 8001572:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001578:	463b      	mov	r3, r7
 800157a:	4619      	mov	r1, r3
 800157c:	4805      	ldr	r0, [pc, #20]	@ (8001594 <MX_ADC2_Init+0x98>)
 800157e:	f000 feff 	bl	8002380 <HAL_ADC_ConfigChannel>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001588:	f000 f9fa 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800158c:	bf00      	nop
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	200000d4 	.word	0x200000d4
 8001598:	40012100 	.word	0x40012100
 800159c:	0f000001 	.word	0x0f000001

080015a0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015a6:	463b      	mov	r3, r7
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80015ae:	4b14      	ldr	r3, [pc, #80]	@ (8001600 <MX_DAC_Init+0x60>)
 80015b0:	4a14      	ldr	r2, [pc, #80]	@ (8001604 <MX_DAC_Init+0x64>)
 80015b2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80015b4:	4812      	ldr	r0, [pc, #72]	@ (8001600 <MX_DAC_Init+0x60>)
 80015b6:	f001 fa12 	bl	80029de <HAL_DAC_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80015c0:	f000 f9de 	bl	8001980 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015cc:	463b      	mov	r3, r7
 80015ce:	2200      	movs	r2, #0
 80015d0:	4619      	mov	r1, r3
 80015d2:	480b      	ldr	r0, [pc, #44]	@ (8001600 <MX_DAC_Init+0x60>)
 80015d4:	f001 faa6 	bl	8002b24 <HAL_DAC_ConfigChannel>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80015de:	f000 f9cf 	bl	8001980 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80015e2:	463b      	mov	r3, r7
 80015e4:	2210      	movs	r2, #16
 80015e6:	4619      	mov	r1, r3
 80015e8:	4805      	ldr	r0, [pc, #20]	@ (8001600 <MX_DAC_Init+0x60>)
 80015ea:	f001 fa9b 	bl	8002b24 <HAL_DAC_ConfigChannel>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80015f4:	f000 f9c4 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	2000011c 	.word	0x2000011c
 8001604:	40007400 	.word	0x40007400

08001608 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800160c:	4b12      	ldr	r3, [pc, #72]	@ (8001658 <MX_I2C1_Init+0x50>)
 800160e:	4a13      	ldr	r2, [pc, #76]	@ (800165c <MX_I2C1_Init+0x54>)
 8001610:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001612:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <MX_I2C1_Init+0x50>)
 8001614:	4a12      	ldr	r2, [pc, #72]	@ (8001660 <MX_I2C1_Init+0x58>)
 8001616:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001618:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <MX_I2C1_Init+0x50>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800161e:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <MX_I2C1_Init+0x50>)
 8001620:	2200      	movs	r2, #0
 8001622:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001624:	4b0c      	ldr	r3, [pc, #48]	@ (8001658 <MX_I2C1_Init+0x50>)
 8001626:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800162a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800162c:	4b0a      	ldr	r3, [pc, #40]	@ (8001658 <MX_I2C1_Init+0x50>)
 800162e:	2200      	movs	r2, #0
 8001630:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001632:	4b09      	ldr	r3, [pc, #36]	@ (8001658 <MX_I2C1_Init+0x50>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001638:	4b07      	ldr	r3, [pc, #28]	@ (8001658 <MX_I2C1_Init+0x50>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800163e:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <MX_I2C1_Init+0x50>)
 8001640:	2200      	movs	r2, #0
 8001642:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001644:	4804      	ldr	r0, [pc, #16]	@ (8001658 <MX_I2C1_Init+0x50>)
 8001646:	f003 faad 	bl	8004ba4 <HAL_I2C_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001650:	f000 f996 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000130 	.word	0x20000130
 800165c:	40005400 	.word	0x40005400
 8001660:	000186a0 	.word	0x000186a0

08001664 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
	// note that the APB timerclock is used. In this example 168MHz/2 = 84MHz
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001678:	463b      	mov	r3, r7
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */
  // timer 0.1 sec = 1000*8400 / 84000
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001680:	4b1d      	ldr	r3, [pc, #116]	@ (80016f8 <MX_TIM3_Init+0x94>)
 8001682:	4a1e      	ldr	r2, [pc, #120]	@ (80016fc <MX_TIM3_Init+0x98>)
 8001684:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001686:	4b1c      	ldr	r3, [pc, #112]	@ (80016f8 <MX_TIM3_Init+0x94>)
 8001688:	2201      	movs	r2, #1
 800168a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168c:	4b1a      	ldr	r3, [pc, #104]	@ (80016f8 <MX_TIM3_Init+0x94>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4200-1;
 8001692:	4b19      	ldr	r3, [pc, #100]	@ (80016f8 <MX_TIM3_Init+0x94>)
 8001694:	f241 0267 	movw	r2, #4199	@ 0x1067
 8001698:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169a:	4b17      	ldr	r3, [pc, #92]	@ (80016f8 <MX_TIM3_Init+0x94>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016a0:	4b15      	ldr	r3, [pc, #84]	@ (80016f8 <MX_TIM3_Init+0x94>)
 80016a2:	2280      	movs	r2, #128	@ 0x80
 80016a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016a6:	4814      	ldr	r0, [pc, #80]	@ (80016f8 <MX_TIM3_Init+0x94>)
 80016a8:	f004 f844 	bl	8005734 <HAL_TIM_Base_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80016b2:	f000 f965 	bl	8001980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016bc:	f107 0308 	add.w	r3, r7, #8
 80016c0:	4619      	mov	r1, r3
 80016c2:	480d      	ldr	r0, [pc, #52]	@ (80016f8 <MX_TIM3_Init+0x94>)
 80016c4:	f004 f9e6 	bl	8005a94 <HAL_TIM_ConfigClockSource>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80016ce:	f000 f957 	bl	8001980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d2:	2300      	movs	r3, #0
 80016d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016da:	463b      	mov	r3, r7
 80016dc:	4619      	mov	r1, r3
 80016de:	4806      	ldr	r0, [pc, #24]	@ (80016f8 <MX_TIM3_Init+0x94>)
 80016e0:	f004 fc18 	bl	8005f14 <HAL_TIMEx_MasterConfigSynchronization>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80016ea:	f000 f949 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000184 	.word	0x20000184
 80016fc:	40000400 	.word	0x40000400

08001700 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001704:	4b0e      	ldr	r3, [pc, #56]	@ (8001740 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001706:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800170a:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800170c:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800170e:	2208      	movs	r2, #8
 8001710:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8001712:	4b0b      	ldr	r3, [pc, #44]	@ (8001740 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001714:	2201      	movs	r2, #1
 8001716:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001718:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800171a:	2200      	movs	r2, #0
 800171c:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800171e:	4b08      	ldr	r3, [pc, #32]	@ (8001740 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001720:	2202      	movs	r2, #2
 8001722:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001724:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001726:	2200      	movs	r2, #0
 8001728:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800172a:	4805      	ldr	r0, [pc, #20]	@ (8001740 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800172c:	f001 fc09 	bl	8002f42 <HAL_HCD_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 8001736:	f000 f923 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	200001cc 	.word	0x200001cc

08001744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08c      	sub	sp, #48	@ 0x30
 8001748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174a:	f107 031c 	add.w	r3, r7, #28
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
 8001758:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	61bb      	str	r3, [r7, #24]
 800175e:	4b82      	ldr	r3, [pc, #520]	@ (8001968 <MX_GPIO_Init+0x224>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001762:	4a81      	ldr	r2, [pc, #516]	@ (8001968 <MX_GPIO_Init+0x224>)
 8001764:	f043 0310 	orr.w	r3, r3, #16
 8001768:	6313      	str	r3, [r2, #48]	@ 0x30
 800176a:	4b7f      	ldr	r3, [pc, #508]	@ (8001968 <MX_GPIO_Init+0x224>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	f003 0310 	and.w	r3, r3, #16
 8001772:	61bb      	str	r3, [r7, #24]
 8001774:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	4b7b      	ldr	r3, [pc, #492]	@ (8001968 <MX_GPIO_Init+0x224>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	4a7a      	ldr	r2, [pc, #488]	@ (8001968 <MX_GPIO_Init+0x224>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	6313      	str	r3, [r2, #48]	@ 0x30
 8001786:	4b78      	ldr	r3, [pc, #480]	@ (8001968 <MX_GPIO_Init+0x224>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	4b74      	ldr	r3, [pc, #464]	@ (8001968 <MX_GPIO_Init+0x224>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	4a73      	ldr	r2, [pc, #460]	@ (8001968 <MX_GPIO_Init+0x224>)
 800179c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a2:	4b71      	ldr	r3, [pc, #452]	@ (8001968 <MX_GPIO_Init+0x224>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	4b6d      	ldr	r3, [pc, #436]	@ (8001968 <MX_GPIO_Init+0x224>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b6:	4a6c      	ldr	r2, [pc, #432]	@ (8001968 <MX_GPIO_Init+0x224>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017be:	4b6a      	ldr	r3, [pc, #424]	@ (8001968 <MX_GPIO_Init+0x224>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	4b66      	ldr	r3, [pc, #408]	@ (8001968 <MX_GPIO_Init+0x224>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	4a65      	ldr	r2, [pc, #404]	@ (8001968 <MX_GPIO_Init+0x224>)
 80017d4:	f043 0302 	orr.w	r3, r3, #2
 80017d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017da:	4b63      	ldr	r3, [pc, #396]	@ (8001968 <MX_GPIO_Init+0x224>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	4b5f      	ldr	r3, [pc, #380]	@ (8001968 <MX_GPIO_Init+0x224>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	4a5e      	ldr	r2, [pc, #376]	@ (8001968 <MX_GPIO_Init+0x224>)
 80017f0:	f043 0308 	orr.w	r3, r3, #8
 80017f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f6:	4b5c      	ldr	r3, [pc, #368]	@ (8001968 <MX_GPIO_Init+0x224>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001802:	2200      	movs	r2, #0
 8001804:	2108      	movs	r1, #8
 8001806:	4859      	ldr	r0, [pc, #356]	@ (800196c <MX_GPIO_Init+0x228>)
 8001808:	f001 fb82 	bl	8002f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800180c:	2201      	movs	r2, #1
 800180e:	2101      	movs	r1, #1
 8001810:	4857      	ldr	r0, [pc, #348]	@ (8001970 <MX_GPIO_Init+0x22c>)
 8001812:	f001 fb7d 	bl	8002f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001816:	2200      	movs	r2, #0
 8001818:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800181c:	4855      	ldr	r0, [pc, #340]	@ (8001974 <MX_GPIO_Init+0x230>)
 800181e:	f001 fb77 	bl	8002f10 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001822:	2308      	movs	r3, #8
 8001824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001826:	2301      	movs	r3, #1
 8001828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	2300      	movs	r3, #0
 8001830:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001832:	f107 031c 	add.w	r3, r7, #28
 8001836:	4619      	mov	r1, r3
 8001838:	484c      	ldr	r0, [pc, #304]	@ (800196c <MX_GPIO_Init+0x228>)
 800183a:	f001 f9cd 	bl	8002bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800183e:	2301      	movs	r3, #1
 8001840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001842:	2301      	movs	r3, #1
 8001844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184a:	2300      	movs	r3, #0
 800184c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800184e:	f107 031c 	add.w	r3, r7, #28
 8001852:	4619      	mov	r1, r3
 8001854:	4846      	ldr	r0, [pc, #280]	@ (8001970 <MX_GPIO_Init+0x22c>)
 8001856:	f001 f9bf 	bl	8002bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800185a:	2308      	movs	r3, #8
 800185c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	2300      	movs	r3, #0
 8001868:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800186a:	2305      	movs	r3, #5
 800186c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800186e:	f107 031c 	add.w	r3, r7, #28
 8001872:	4619      	mov	r1, r3
 8001874:	483e      	ldr	r0, [pc, #248]	@ (8001970 <MX_GPIO_Init+0x22c>)
 8001876:	f001 f9af 	bl	8002bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800187a:	2301      	movs	r3, #1
 800187c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800187e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001888:	f107 031c 	add.w	r3, r7, #28
 800188c:	4619      	mov	r1, r3
 800188e:	483a      	ldr	r0, [pc, #232]	@ (8001978 <MX_GPIO_Init+0x234>)
 8001890:	f001 f9a2 	bl	8002bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001894:	23c0      	movs	r3, #192	@ 0xc0
 8001896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001898:	2302      	movs	r3, #2
 800189a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018a4:	2305      	movs	r3, #5
 80018a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a8:	f107 031c 	add.w	r3, r7, #28
 80018ac:	4619      	mov	r1, r3
 80018ae:	4832      	ldr	r0, [pc, #200]	@ (8001978 <MX_GPIO_Init+0x234>)
 80018b0:	f001 f992 	bl	8002bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80018b4:	2304      	movs	r3, #4
 80018b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b8:	2300      	movs	r3, #0
 80018ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80018c0:	f107 031c 	add.w	r3, r7, #28
 80018c4:	4619      	mov	r1, r3
 80018c6:	482d      	ldr	r0, [pc, #180]	@ (800197c <MX_GPIO_Init+0x238>)
 80018c8:	f001 f986 	bl	8002bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80018cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d2:	2302      	movs	r3, #2
 80018d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018da:	2300      	movs	r3, #0
 80018dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018de:	2305      	movs	r3, #5
 80018e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80018e2:	f107 031c 	add.w	r3, r7, #28
 80018e6:	4619      	mov	r1, r3
 80018e8:	4824      	ldr	r0, [pc, #144]	@ (800197c <MX_GPIO_Init+0x238>)
 80018ea:	f001 f975 	bl	8002bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80018ee:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80018f2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f4:	2301      	movs	r3, #1
 80018f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001900:	f107 031c 	add.w	r3, r7, #28
 8001904:	4619      	mov	r1, r3
 8001906:	481b      	ldr	r0, [pc, #108]	@ (8001974 <MX_GPIO_Init+0x230>)
 8001908:	f001 f966 	bl	8002bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800190c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001912:	2302      	movs	r3, #2
 8001914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191a:	2300      	movs	r3, #0
 800191c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800191e:	2306      	movs	r3, #6
 8001920:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001922:	f107 031c 	add.w	r3, r7, #28
 8001926:	4619      	mov	r1, r3
 8001928:	4811      	ldr	r0, [pc, #68]	@ (8001970 <MX_GPIO_Init+0x22c>)
 800192a:	f001 f955 	bl	8002bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800192e:	2320      	movs	r3, #32
 8001930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001932:	2300      	movs	r3, #0
 8001934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800193a:	f107 031c 	add.w	r3, r7, #28
 800193e:	4619      	mov	r1, r3
 8001940:	480c      	ldr	r0, [pc, #48]	@ (8001974 <MX_GPIO_Init+0x230>)
 8001942:	f001 f949 	bl	8002bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001946:	2302      	movs	r3, #2
 8001948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800194a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800194e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001954:	f107 031c 	add.w	r3, r7, #28
 8001958:	4619      	mov	r1, r3
 800195a:	4804      	ldr	r0, [pc, #16]	@ (800196c <MX_GPIO_Init+0x228>)
 800195c:	f001 f93c 	bl	8002bd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001960:	bf00      	nop
 8001962:	3730      	adds	r7, #48	@ 0x30
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40023800 	.word	0x40023800
 800196c:	40021000 	.word	0x40021000
 8001970:	40020800 	.word	0x40020800
 8001974:	40020c00 	.word	0x40020c00
 8001978:	40020000 	.word	0x40020000
 800197c:	40020400 	.word	0x40020400

08001980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	4b10      	ldr	r3, [pc, #64]	@ (80019dc <HAL_MspInit+0x4c>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199e:	4a0f      	ldr	r2, [pc, #60]	@ (80019dc <HAL_MspInit+0x4c>)
 80019a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019a6:	4b0d      	ldr	r3, [pc, #52]	@ (80019dc <HAL_MspInit+0x4c>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	603b      	str	r3, [r7, #0]
 80019b6:	4b09      	ldr	r3, [pc, #36]	@ (80019dc <HAL_MspInit+0x4c>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ba:	4a08      	ldr	r2, [pc, #32]	@ (80019dc <HAL_MspInit+0x4c>)
 80019bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019c2:	4b06      	ldr	r3, [pc, #24]	@ (80019dc <HAL_MspInit+0x4c>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019ce:	2007      	movs	r0, #7
 80019d0:	f000 ffc4 	bl	800295c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40023800 	.word	0x40023800

080019e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08c      	sub	sp, #48	@ 0x30
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 031c 	add.w	r3, r7, #28
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a2e      	ldr	r2, [pc, #184]	@ (8001ab8 <HAL_ADC_MspInit+0xd8>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d128      	bne.n	8001a54 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	61bb      	str	r3, [r7, #24]
 8001a06:	4b2d      	ldr	r3, [pc, #180]	@ (8001abc <HAL_ADC_MspInit+0xdc>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0a:	4a2c      	ldr	r2, [pc, #176]	@ (8001abc <HAL_ADC_MspInit+0xdc>)
 8001a0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a12:	4b2a      	ldr	r3, [pc, #168]	@ (8001abc <HAL_ADC_MspInit+0xdc>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a1a:	61bb      	str	r3, [r7, #24]
 8001a1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	4b26      	ldr	r3, [pc, #152]	@ (8001abc <HAL_ADC_MspInit+0xdc>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a26:	4a25      	ldr	r2, [pc, #148]	@ (8001abc <HAL_ADC_MspInit+0xdc>)
 8001a28:	f043 0304 	orr.w	r3, r3, #4
 8001a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2e:	4b23      	ldr	r3, [pc, #140]	@ (8001abc <HAL_ADC_MspInit+0xdc>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a46:	f107 031c 	add.w	r3, r7, #28
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	481c      	ldr	r0, [pc, #112]	@ (8001ac0 <HAL_ADC_MspInit+0xe0>)
 8001a4e:	f001 f8c3 	bl	8002bd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001a52:	e02c      	b.n	8001aae <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a1a      	ldr	r2, [pc, #104]	@ (8001ac4 <HAL_ADC_MspInit+0xe4>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d127      	bne.n	8001aae <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	4b16      	ldr	r3, [pc, #88]	@ (8001abc <HAL_ADC_MspInit+0xdc>)
 8001a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a66:	4a15      	ldr	r2, [pc, #84]	@ (8001abc <HAL_ADC_MspInit+0xdc>)
 8001a68:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a6e:	4b13      	ldr	r3, [pc, #76]	@ (8001abc <HAL_ADC_MspInit+0xdc>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a76:	613b      	str	r3, [r7, #16]
 8001a78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001abc <HAL_ADC_MspInit+0xdc>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a82:	4a0e      	ldr	r2, [pc, #56]	@ (8001abc <HAL_ADC_MspInit+0xdc>)
 8001a84:	f043 0304 	orr.w	r3, r3, #4
 8001a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001abc <HAL_ADC_MspInit+0xdc>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001a96:	2306      	movs	r3, #6
 8001a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aa2:	f107 031c 	add.w	r3, r7, #28
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4805      	ldr	r0, [pc, #20]	@ (8001ac0 <HAL_ADC_MspInit+0xe0>)
 8001aaa:	f001 f895 	bl	8002bd8 <HAL_GPIO_Init>
}
 8001aae:	bf00      	nop
 8001ab0:	3730      	adds	r7, #48	@ 0x30
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40012000 	.word	0x40012000
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40020800 	.word	0x40020800
 8001ac4:	40012100 	.word	0x40012100

08001ac8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	@ 0x28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a17      	ldr	r2, [pc, #92]	@ (8001b44 <HAL_DAC_MspInit+0x7c>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d127      	bne.n	8001b3a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	4b16      	ldr	r3, [pc, #88]	@ (8001b48 <HAL_DAC_MspInit+0x80>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af2:	4a15      	ldr	r2, [pc, #84]	@ (8001b48 <HAL_DAC_MspInit+0x80>)
 8001af4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001af8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001afa:	4b13      	ldr	r3, [pc, #76]	@ (8001b48 <HAL_DAC_MspInit+0x80>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b48 <HAL_DAC_MspInit+0x80>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	4a0e      	ldr	r2, [pc, #56]	@ (8001b48 <HAL_DAC_MspInit+0x80>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b16:	4b0c      	ldr	r3, [pc, #48]	@ (8001b48 <HAL_DAC_MspInit+0x80>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001b22:	2330      	movs	r3, #48	@ 0x30
 8001b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b26:	2303      	movs	r3, #3
 8001b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2e:	f107 0314 	add.w	r3, r7, #20
 8001b32:	4619      	mov	r1, r3
 8001b34:	4805      	ldr	r0, [pc, #20]	@ (8001b4c <HAL_DAC_MspInit+0x84>)
 8001b36:	f001 f84f 	bl	8002bd8 <HAL_GPIO_Init>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8001b3a:	bf00      	nop
 8001b3c:	3728      	adds	r7, #40	@ 0x28
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40007400 	.word	0x40007400
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40020000 	.word	0x40020000

08001b50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	@ 0x28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a19      	ldr	r2, [pc, #100]	@ (8001bd4 <HAL_I2C_MspInit+0x84>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d12c      	bne.n	8001bcc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	4b18      	ldr	r3, [pc, #96]	@ (8001bd8 <HAL_I2C_MspInit+0x88>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7a:	4a17      	ldr	r2, [pc, #92]	@ (8001bd8 <HAL_I2C_MspInit+0x88>)
 8001b7c:	f043 0302 	orr.w	r3, r3, #2
 8001b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b82:	4b15      	ldr	r3, [pc, #84]	@ (8001bd8 <HAL_I2C_MspInit+0x88>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001b8e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b94:	2312      	movs	r3, #18
 8001b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ba0:	2304      	movs	r3, #4
 8001ba2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	4619      	mov	r1, r3
 8001baa:	480c      	ldr	r0, [pc, #48]	@ (8001bdc <HAL_I2C_MspInit+0x8c>)
 8001bac:	f001 f814 	bl	8002bd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	4b08      	ldr	r3, [pc, #32]	@ (8001bd8 <HAL_I2C_MspInit+0x88>)
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb8:	4a07      	ldr	r2, [pc, #28]	@ (8001bd8 <HAL_I2C_MspInit+0x88>)
 8001bba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bc0:	4b05      	ldr	r3, [pc, #20]	@ (8001bd8 <HAL_I2C_MspInit+0x88>)
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001bcc:	bf00      	nop
 8001bce:	3728      	adds	r7, #40	@ 0x28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40005400 	.word	0x40005400
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40020400 	.word	0x40020400

08001be0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a0e      	ldr	r2, [pc, #56]	@ (8001c28 <HAL_TIM_Base_MspInit+0x48>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d115      	bne.n	8001c1e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8001c2c <HAL_TIM_Base_MspInit+0x4c>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfa:	4a0c      	ldr	r2, [pc, #48]	@ (8001c2c <HAL_TIM_Base_MspInit+0x4c>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c02:	4b0a      	ldr	r3, [pc, #40]	@ (8001c2c <HAL_TIM_Base_MspInit+0x4c>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2100      	movs	r1, #0
 8001c12:	201d      	movs	r0, #29
 8001c14:	f000 fead 	bl	8002972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c18:	201d      	movs	r0, #29
 8001c1a:	f000 fec6 	bl	80029aa <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001c1e:	bf00      	nop
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40000400 	.word	0x40000400
 8001c2c:	40023800 	.word	0x40023800

08001c30 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08a      	sub	sp, #40	@ 0x28
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_FS)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c50:	d147      	bne.n	8001ce2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	4b25      	ldr	r3, [pc, #148]	@ (8001cec <HAL_HCD_MspInit+0xbc>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5a:	4a24      	ldr	r2, [pc, #144]	@ (8001cec <HAL_HCD_MspInit+0xbc>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c62:	4b22      	ldr	r3, [pc, #136]	@ (8001cec <HAL_HCD_MspInit+0xbc>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001c6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	4619      	mov	r1, r3
 8001c82:	481b      	ldr	r0, [pc, #108]	@ (8001cf0 <HAL_HCD_MspInit+0xc0>)
 8001c84:	f000 ffa8 	bl	8002bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001c88:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c96:	2300      	movs	r3, #0
 8001c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c9a:	230a      	movs	r3, #10
 8001c9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9e:	f107 0314 	add.w	r3, r7, #20
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4812      	ldr	r0, [pc, #72]	@ (8001cf0 <HAL_HCD_MspInit+0xc0>)
 8001ca6:	f000 ff97 	bl	8002bd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001caa:	4b10      	ldr	r3, [pc, #64]	@ (8001cec <HAL_HCD_MspInit+0xbc>)
 8001cac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cae:	4a0f      	ldr	r2, [pc, #60]	@ (8001cec <HAL_HCD_MspInit+0xbc>)
 8001cb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cb4:	6353      	str	r3, [r2, #52]	@ 0x34
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	4b0c      	ldr	r3, [pc, #48]	@ (8001cec <HAL_HCD_MspInit+0xbc>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cbe:	4a0b      	ldr	r2, [pc, #44]	@ (8001cec <HAL_HCD_MspInit+0xbc>)
 8001cc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cc6:	4b09      	ldr	r3, [pc, #36]	@ (8001cec <HAL_HCD_MspInit+0xbc>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	2043      	movs	r0, #67	@ 0x43
 8001cd8:	f000 fe4b 	bl	8002972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001cdc:	2043      	movs	r0, #67	@ 0x43
 8001cde:	f000 fe64 	bl	80029aa <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001ce2:	bf00      	nop
 8001ce4:	3728      	adds	r7, #40	@ 0x28
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40020000 	.word	0x40020000

08001cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d06:	bf00      	nop
 8001d08:	e7fd      	b.n	8001d06 <HardFault_Handler+0x4>

08001d0a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d0e:	bf00      	nop
 8001d10:	e7fd      	b.n	8001d0e <MemManage_Handler+0x4>

08001d12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d16:	bf00      	nop
 8001d18:	e7fd      	b.n	8001d16 <BusFault_Handler+0x4>

08001d1a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d1e:	bf00      	nop
 8001d20:	e7fd      	b.n	8001d1e <UsageFault_Handler+0x4>

08001d22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d50:	f000 f924 	bl	8001f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d58:	b598      	push	{r3, r4, r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d5c:	4837      	ldr	r0, [pc, #220]	@ (8001e3c <TIM3_IRQHandler+0xe4>)
 8001d5e:	f003 fda9 	bl	80058b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* ADC1 Left channel read */
  HAL_ADC_Start(&hadc1);							          // start conversion
 8001d62:	4837      	ldr	r0, [pc, #220]	@ (8001e40 <TIM3_IRQHandler+0xe8>)
 8001d64:	f000 f9a2 	bl	80020ac <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1,11);				  // wait for conversion to end -- mux ADC123_IN11 input PC1
 8001d68:	210b      	movs	r1, #11
 8001d6a:	4835      	ldr	r0, [pc, #212]	@ (8001e40 <TIM3_IRQHandler+0xe8>)
 8001d6c:	f000 fa70 	bl	8002250 <HAL_ADC_PollForConversion>
  adc1_buf[pos] = HAL_ADC_GetValue(&hadc1);			// fill adc_buf with value1
 8001d70:	4b34      	ldr	r3, [pc, #208]	@ (8001e44 <TIM3_IRQHandler+0xec>)
 8001d72:	681c      	ldr	r4, [r3, #0]
 8001d74:	4832      	ldr	r0, [pc, #200]	@ (8001e40 <TIM3_IRQHandler+0xe8>)
 8001d76:	f000 faf6 	bl	8002366 <HAL_ADC_GetValue>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	4a32      	ldr	r2, [pc, #200]	@ (8001e48 <TIM3_IRQHandler+0xf0>)
 8001d7e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
//  HAL_ADC_PollForConversion(&hadc2,12);				  // wait for conversion to end -- mux ADC123_IN12 input PC2
//  value2 = HAL_ADC_GetValue(&hadc2);  					  // read value
//  value2 ++;

  // Update the filter buffer and sum
  filter_sum -= filter_buf[filter_pos];
 8001d82:	4b32      	ldr	r3, [pc, #200]	@ (8001e4c <TIM3_IRQHandler+0xf4>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	4b32      	ldr	r3, [pc, #200]	@ (8001e50 <TIM3_IRQHandler+0xf8>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4b31      	ldr	r3, [pc, #196]	@ (8001e54 <TIM3_IRQHandler+0xfc>)
 8001d8e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	4a2d      	ldr	r2, [pc, #180]	@ (8001e4c <TIM3_IRQHandler+0xf4>)
 8001d96:	6013      	str	r3, [r2, #0]
  filter_buf[filter_pos] = adc1_buf[pos];
 8001d98:	4b2a      	ldr	r3, [pc, #168]	@ (8001e44 <TIM3_IRQHandler+0xec>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a2c      	ldr	r2, [pc, #176]	@ (8001e50 <TIM3_IRQHandler+0xf8>)
 8001d9e:	7812      	ldrb	r2, [r2, #0]
 8001da0:	4611      	mov	r1, r2
 8001da2:	4a29      	ldr	r2, [pc, #164]	@ (8001e48 <TIM3_IRQHandler+0xf0>)
 8001da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da8:	4a2a      	ldr	r2, [pc, #168]	@ (8001e54 <TIM3_IRQHandler+0xfc>)
 8001daa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  filter_sum += adc1_buf[pos];
 8001dae:	4b25      	ldr	r3, [pc, #148]	@ (8001e44 <TIM3_IRQHandler+0xec>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a25      	ldr	r2, [pc, #148]	@ (8001e48 <TIM3_IRQHandler+0xf0>)
 8001db4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001db8:	4b24      	ldr	r3, [pc, #144]	@ (8001e4c <TIM3_IRQHandler+0xf4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	4a23      	ldr	r2, [pc, #140]	@ (8001e4c <TIM3_IRQHandler+0xf4>)
 8001dc0:	6013      	str	r3, [r2, #0]
  filter_pos = (filter_pos + 1) % WINDOW_SIZE;
 8001dc2:	4b23      	ldr	r3, [pc, #140]	@ (8001e50 <TIM3_IRQHandler+0xf8>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	1c5a      	adds	r2, r3, #1
 8001dc8:	4b23      	ldr	r3, [pc, #140]	@ (8001e58 <TIM3_IRQHandler+0x100>)
 8001dca:	fb83 1302 	smull	r1, r3, r3, r2
 8001dce:	1099      	asrs	r1, r3, #2
 8001dd0:	17d3      	asrs	r3, r2, #31
 8001dd2:	1ac9      	subs	r1, r1, r3
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	1ad1      	subs	r1, r2, r3
 8001dde:	b2ca      	uxtb	r2, r1
 8001de0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e50 <TIM3_IRQHandler+0xf8>)
 8001de2:	701a      	strb	r2, [r3, #0]

  // Calculate the moving average and store in average buffer
  avg_buf[pos] = filter_sum / WINDOW_SIZE;
 8001de4:	4b19      	ldr	r3, [pc, #100]	@ (8001e4c <TIM3_IRQHandler+0xf4>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4b16      	ldr	r3, [pc, #88]	@ (8001e44 <TIM3_IRQHandler+0xec>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	491b      	ldr	r1, [pc, #108]	@ (8001e5c <TIM3_IRQHandler+0x104>)
 8001dee:	fba1 1202 	umull	r1, r2, r1, r2
 8001df2:	08d2      	lsrs	r2, r2, #3
 8001df4:	491a      	ldr	r1, [pc, #104]	@ (8001e60 <TIM3_IRQHandler+0x108>)
 8001df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  pos++; // Increase pos counter
 8001dfa:	4b12      	ldr	r3, [pc, #72]	@ (8001e44 <TIM3_IRQHandler+0xec>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	4a10      	ldr	r2, [pc, #64]	@ (8001e44 <TIM3_IRQHandler+0xec>)
 8001e02:	6013      	str	r3, [r2, #0]
			 					

// /* DAC1 Left SetValue */
//	 HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, adc1_buf[pos]);	// set adc1_buf[pos] on DAC1	PA4
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, avg_buf[pos]);	// set avg_buf[pos] on DAC1	PA4
 8001e04:	4b0f      	ldr	r3, [pc, #60]	@ (8001e44 <TIM3_IRQHandler+0xec>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a15      	ldr	r2, [pc, #84]	@ (8001e60 <TIM3_IRQHandler+0x108>)
 8001e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2100      	movs	r1, #0
 8001e12:	4814      	ldr	r0, [pc, #80]	@ (8001e64 <TIM3_IRQHandler+0x10c>)
 8001e14:	f000 fe5c 	bl	8002ad0 <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);								    // execute new value
 8001e18:	2100      	movs	r1, #0
 8001e1a:	4812      	ldr	r0, [pc, #72]	@ (8001e64 <TIM3_IRQHandler+0x10c>)
 8001e1c:	f000 fe01 	bl	8002a22 <HAL_DAC_Start>

// /* DAC2 Right SetValue */
//  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, value2);    	// set value on DAC2	PA5
//  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);							    	// execute new value

  if (pos > BUF_SIZE)
 8001e20:	4b08      	ldr	r3, [pc, #32]	@ (8001e44 <TIM3_IRQHandler+0xec>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e28:	d905      	bls.n	8001e36 <TIM3_IRQHandler+0xde>
  {
	  bufferFull = true; // data gevuld in buffer
 8001e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e68 <TIM3_IRQHandler+0x110>)
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	701a      	strb	r2, [r3, #0]
	  pos = 0; // herstel de positieteller naar nul
 8001e30:	4b04      	ldr	r3, [pc, #16]	@ (8001e44 <TIM3_IRQHandler+0xec>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
  }
//  HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
  /* USER CODE END TIM3_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd98      	pop	{r3, r4, r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000184 	.word	0x20000184
 8001e40:	2000008c 	.word	0x2000008c
 8001e44:	200005ac 	.word	0x200005ac
 8001e48:	200005b0 	.word	0x200005b0
 8001e4c:	200025dc 	.word	0x200025dc
 8001e50:	200025e0 	.word	0x200025e0
 8001e54:	200025b4 	.word	0x200025b4
 8001e58:	66666667 	.word	0x66666667
 8001e5c:	cccccccd 	.word	0xcccccccd
 8001e60:	200015b0 	.word	0x200015b0
 8001e64:	2000011c 	.word	0x2000011c
 8001e68:	200025b0 	.word	0x200025b0

08001e6c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001e70:	4802      	ldr	r0, [pc, #8]	@ (8001e7c <OTG_FS_IRQHandler+0x10>)
 8001e72:	f001 f8cd 	bl	8003010 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	200001cc 	.word	0x200001cc

08001e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001eb8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e86:	e003      	b.n	8001e90 <LoopCopyDataInit>

08001e88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e88:	4b0c      	ldr	r3, [pc, #48]	@ (8001ebc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e8e:	3104      	adds	r1, #4

08001e90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e90:	480b      	ldr	r0, [pc, #44]	@ (8001ec0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e92:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e98:	d3f6      	bcc.n	8001e88 <CopyDataInit>
  ldr  r2, =_sbss
 8001e9a:	4a0b      	ldr	r2, [pc, #44]	@ (8001ec8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e9c:	e002      	b.n	8001ea4 <LoopFillZerobss>

08001e9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ea0:	f842 3b04 	str.w	r3, [r2], #4

08001ea4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ea4:	4b09      	ldr	r3, [pc, #36]	@ (8001ecc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ea6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ea8:	d3f9      	bcc.n	8001e9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001eaa:	f000 f813 	bl	8001ed4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eae:	f004 fced 	bl	800688c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eb2:	f7fe ffd1 	bl	8000e58 <main>
  bx  lr    
 8001eb6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001eb8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001ebc:	080080a0 	.word	0x080080a0
  ldr  r0, =_sdata
 8001ec0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ec4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001ec8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001ecc:	20002720 	.word	0x20002720

08001ed0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ed0:	e7fe      	b.n	8001ed0 <ADC_IRQHandler>
	...

08001ed4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ed8:	4b06      	ldr	r3, [pc, #24]	@ (8001ef4 <SystemInit+0x20>)
 8001eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ede:	4a05      	ldr	r2, [pc, #20]	@ (8001ef4 <SystemInit+0x20>)
 8001ee0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ee4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001efc:	4b0e      	ldr	r3, [pc, #56]	@ (8001f38 <HAL_Init+0x40>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a0d      	ldr	r2, [pc, #52]	@ (8001f38 <HAL_Init+0x40>)
 8001f02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f08:	4b0b      	ldr	r3, [pc, #44]	@ (8001f38 <HAL_Init+0x40>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f38 <HAL_Init+0x40>)
 8001f0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f14:	4b08      	ldr	r3, [pc, #32]	@ (8001f38 <HAL_Init+0x40>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a07      	ldr	r2, [pc, #28]	@ (8001f38 <HAL_Init+0x40>)
 8001f1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f20:	2003      	movs	r0, #3
 8001f22:	f000 fd1b 	bl	800295c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f26:	2000      	movs	r0, #0
 8001f28:	f000 f808 	bl	8001f3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f2c:	f7ff fd30 	bl	8001990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40023c00 	.word	0x40023c00

08001f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f44:	4b12      	ldr	r3, [pc, #72]	@ (8001f90 <HAL_InitTick+0x54>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	4b12      	ldr	r3, [pc, #72]	@ (8001f94 <HAL_InitTick+0x58>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f000 fd33 	bl	80029c6 <HAL_SYSTICK_Config>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e00e      	b.n	8001f88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b0f      	cmp	r3, #15
 8001f6e:	d80a      	bhi.n	8001f86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f70:	2200      	movs	r2, #0
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f78:	f000 fcfb 	bl	8002972 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f7c:	4a06      	ldr	r2, [pc, #24]	@ (8001f98 <HAL_InitTick+0x5c>)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
 8001f84:	e000      	b.n	8001f88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20000000 	.word	0x20000000
 8001f94:	20000008 	.word	0x20000008
 8001f98:	20000004 	.word	0x20000004

08001f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa0:	4b06      	ldr	r3, [pc, #24]	@ (8001fbc <HAL_IncTick+0x20>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <HAL_IncTick+0x24>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4413      	add	r3, r2
 8001fac:	4a04      	ldr	r2, [pc, #16]	@ (8001fc0 <HAL_IncTick+0x24>)
 8001fae:	6013      	str	r3, [r2, #0]
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	20000008 	.word	0x20000008
 8001fc0:	200025e4 	.word	0x200025e4

08001fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fc8:	4b03      	ldr	r3, [pc, #12]	@ (8001fd8 <HAL_GetTick+0x14>)
 8001fca:	681b      	ldr	r3, [r3, #0]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	200025e4 	.word	0x200025e4

08001fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fe4:	f7ff ffee 	bl	8001fc4 <HAL_GetTick>
 8001fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ff4:	d005      	beq.n	8002002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8002020 <HAL_Delay+0x44>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4413      	add	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002002:	bf00      	nop
 8002004:	f7ff ffde 	bl	8001fc4 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	429a      	cmp	r2, r3
 8002012:	d8f7      	bhi.n	8002004 <HAL_Delay+0x28>
  {
  }
}
 8002014:	bf00      	nop
 8002016:	bf00      	nop
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000008 	.word	0x20000008

08002024 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e033      	b.n	80020a2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203e:	2b00      	cmp	r3, #0
 8002040:	d109      	bne.n	8002056 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff fccc 	bl	80019e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205a:	f003 0310 	and.w	r3, r3, #16
 800205e:	2b00      	cmp	r3, #0
 8002060:	d118      	bne.n	8002094 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002066:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800206a:	f023 0302 	bic.w	r3, r3, #2
 800206e:	f043 0202 	orr.w	r2, r3, #2
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 faa4 	bl	80025c4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002086:	f023 0303 	bic.w	r3, r3, #3
 800208a:	f043 0201 	orr.w	r2, r3, #1
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	641a      	str	r2, [r3, #64]	@ 0x40
 8002092:	e001      	b.n	8002098 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80020b4:	2300      	movs	r3, #0
 80020b6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d101      	bne.n	80020c6 <HAL_ADC_Start+0x1a>
 80020c2:	2302      	movs	r3, #2
 80020c4:	e0b2      	b.n	800222c <HAL_ADC_Start+0x180>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d018      	beq.n	800210e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f042 0201 	orr.w	r2, r2, #1
 80020ea:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020ec:	4b52      	ldr	r3, [pc, #328]	@ (8002238 <HAL_ADC_Start+0x18c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a52      	ldr	r2, [pc, #328]	@ (800223c <HAL_ADC_Start+0x190>)
 80020f2:	fba2 2303 	umull	r2, r3, r2, r3
 80020f6:	0c9a      	lsrs	r2, r3, #18
 80020f8:	4613      	mov	r3, r2
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	4413      	add	r3, r2
 80020fe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002100:	e002      	b.n	8002108 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	3b01      	subs	r3, #1
 8002106:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1f9      	bne.n	8002102 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b01      	cmp	r3, #1
 800211a:	d17a      	bne.n	8002212 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002120:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002124:	f023 0301 	bic.w	r3, r3, #1
 8002128:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800213a:	2b00      	cmp	r3, #0
 800213c:	d007      	beq.n	800214e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002142:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002146:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002152:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002156:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800215a:	d106      	bne.n	800216a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002160:	f023 0206 	bic.w	r2, r3, #6
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	645a      	str	r2, [r3, #68]	@ 0x44
 8002168:	e002      	b.n	8002170 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002178:	4b31      	ldr	r3, [pc, #196]	@ (8002240 <HAL_ADC_Start+0x194>)
 800217a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002184:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 031f 	and.w	r3, r3, #31
 800218e:	2b00      	cmp	r3, #0
 8002190:	d12a      	bne.n	80021e8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a2b      	ldr	r2, [pc, #172]	@ (8002244 <HAL_ADC_Start+0x198>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d015      	beq.n	80021c8 <HAL_ADC_Start+0x11c>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a29      	ldr	r2, [pc, #164]	@ (8002248 <HAL_ADC_Start+0x19c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d105      	bne.n	80021b2 <HAL_ADC_Start+0x106>
 80021a6:	4b26      	ldr	r3, [pc, #152]	@ (8002240 <HAL_ADC_Start+0x194>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 031f 	and.w	r3, r3, #31
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00a      	beq.n	80021c8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a25      	ldr	r2, [pc, #148]	@ (800224c <HAL_ADC_Start+0x1a0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d136      	bne.n	800222a <HAL_ADC_Start+0x17e>
 80021bc:	4b20      	ldr	r3, [pc, #128]	@ (8002240 <HAL_ADC_Start+0x194>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 0310 	and.w	r3, r3, #16
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d130      	bne.n	800222a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d129      	bne.n	800222a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	e020      	b.n	800222a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a15      	ldr	r2, [pc, #84]	@ (8002244 <HAL_ADC_Start+0x198>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d11b      	bne.n	800222a <HAL_ADC_Start+0x17e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d114      	bne.n	800222a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	e00b      	b.n	800222a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002216:	f043 0210 	orr.w	r2, r3, #16
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002222:	f043 0201 	orr.w	r2, r3, #1
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	20000000 	.word	0x20000000
 800223c:	431bde83 	.word	0x431bde83
 8002240:	40012300 	.word	0x40012300
 8002244:	40012000 	.word	0x40012000
 8002248:	40012100 	.word	0x40012100
 800224c:	40012200 	.word	0x40012200

08002250 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002268:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800226c:	d113      	bne.n	8002296 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002278:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800227c:	d10b      	bne.n	8002296 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002282:	f043 0220 	orr.w	r2, r3, #32
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e063      	b.n	800235e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002296:	f7ff fe95 	bl	8001fc4 <HAL_GetTick>
 800229a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800229c:	e021      	b.n	80022e2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022a4:	d01d      	beq.n	80022e2 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d007      	beq.n	80022bc <HAL_ADC_PollForConversion+0x6c>
 80022ac:	f7ff fe8a 	bl	8001fc4 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d212      	bcs.n	80022e2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d00b      	beq.n	80022e2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ce:	f043 0204 	orr.w	r2, r3, #4
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e03d      	b.n	800235e <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d1d6      	bne.n	800229e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f06f 0212 	mvn.w	r2, #18
 80022f8:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fe:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d123      	bne.n	800235c <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002318:	2b00      	cmp	r3, #0
 800231a:	d11f      	bne.n	800235c <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002322:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002326:	2b00      	cmp	r3, #0
 8002328:	d006      	beq.n	8002338 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002334:	2b00      	cmp	r3, #0
 8002336:	d111      	bne.n	800235c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002348:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d105      	bne.n	800235c <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002354:	f043 0201 	orr.w	r2, r3, #1
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002374:	4618      	mov	r0, r3
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002394:	2b01      	cmp	r3, #1
 8002396:	d101      	bne.n	800239c <HAL_ADC_ConfigChannel+0x1c>
 8002398:	2302      	movs	r3, #2
 800239a:	e105      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x228>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2b09      	cmp	r3, #9
 80023aa:	d925      	bls.n	80023f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68d9      	ldr	r1, [r3, #12]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	461a      	mov	r2, r3
 80023ba:	4613      	mov	r3, r2
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	4413      	add	r3, r2
 80023c0:	3b1e      	subs	r3, #30
 80023c2:	2207      	movs	r2, #7
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43da      	mvns	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	400a      	ands	r2, r1
 80023d0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68d9      	ldr	r1, [r3, #12]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	4618      	mov	r0, r3
 80023e4:	4603      	mov	r3, r0
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	4403      	add	r3, r0
 80023ea:	3b1e      	subs	r3, #30
 80023ec:	409a      	lsls	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	60da      	str	r2, [r3, #12]
 80023f6:	e022      	b.n	800243e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6919      	ldr	r1, [r3, #16]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	b29b      	uxth	r3, r3
 8002404:	461a      	mov	r2, r3
 8002406:	4613      	mov	r3, r2
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	4413      	add	r3, r2
 800240c:	2207      	movs	r2, #7
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43da      	mvns	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	400a      	ands	r2, r1
 800241a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6919      	ldr	r1, [r3, #16]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	b29b      	uxth	r3, r3
 800242c:	4618      	mov	r0, r3
 800242e:	4603      	mov	r3, r0
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	4403      	add	r3, r0
 8002434:	409a      	lsls	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b06      	cmp	r3, #6
 8002444:	d824      	bhi.n	8002490 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	3b05      	subs	r3, #5
 8002458:	221f      	movs	r2, #31
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43da      	mvns	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	400a      	ands	r2, r1
 8002466:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	b29b      	uxth	r3, r3
 8002474:	4618      	mov	r0, r3
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	3b05      	subs	r3, #5
 8002482:	fa00 f203 	lsl.w	r2, r0, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	430a      	orrs	r2, r1
 800248c:	635a      	str	r2, [r3, #52]	@ 0x34
 800248e:	e04c      	b.n	800252a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b0c      	cmp	r3, #12
 8002496:	d824      	bhi.n	80024e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	3b23      	subs	r3, #35	@ 0x23
 80024aa:	221f      	movs	r2, #31
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	43da      	mvns	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	400a      	ands	r2, r1
 80024b8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	4618      	mov	r0, r3
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	3b23      	subs	r3, #35	@ 0x23
 80024d4:	fa00 f203 	lsl.w	r2, r0, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	430a      	orrs	r2, r1
 80024de:	631a      	str	r2, [r3, #48]	@ 0x30
 80024e0:	e023      	b.n	800252a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	3b41      	subs	r3, #65	@ 0x41
 80024f4:	221f      	movs	r2, #31
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43da      	mvns	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	400a      	ands	r2, r1
 8002502:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	b29b      	uxth	r3, r3
 8002510:	4618      	mov	r0, r3
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	3b41      	subs	r3, #65	@ 0x41
 800251e:	fa00 f203 	lsl.w	r2, r0, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	430a      	orrs	r2, r1
 8002528:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800252a:	4b22      	ldr	r3, [pc, #136]	@ (80025b4 <HAL_ADC_ConfigChannel+0x234>)
 800252c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a21      	ldr	r2, [pc, #132]	@ (80025b8 <HAL_ADC_ConfigChannel+0x238>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d109      	bne.n	800254c <HAL_ADC_ConfigChannel+0x1cc>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b12      	cmp	r3, #18
 800253e:	d105      	bne.n	800254c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a19      	ldr	r2, [pc, #100]	@ (80025b8 <HAL_ADC_ConfigChannel+0x238>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d123      	bne.n	800259e <HAL_ADC_ConfigChannel+0x21e>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2b10      	cmp	r3, #16
 800255c:	d003      	beq.n	8002566 <HAL_ADC_ConfigChannel+0x1e6>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2b11      	cmp	r3, #17
 8002564:	d11b      	bne.n	800259e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2b10      	cmp	r3, #16
 8002578:	d111      	bne.n	800259e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800257a:	4b10      	ldr	r3, [pc, #64]	@ (80025bc <HAL_ADC_ConfigChannel+0x23c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a10      	ldr	r2, [pc, #64]	@ (80025c0 <HAL_ADC_ConfigChannel+0x240>)
 8002580:	fba2 2303 	umull	r2, r3, r2, r3
 8002584:	0c9a      	lsrs	r2, r3, #18
 8002586:	4613      	mov	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002590:	e002      	b.n	8002598 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	3b01      	subs	r3, #1
 8002596:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f9      	bne.n	8002592 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	40012300 	.word	0x40012300
 80025b8:	40012000 	.word	0x40012000
 80025bc:	20000000 	.word	0x20000000
 80025c0:	431bde83 	.word	0x431bde83

080025c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025cc:	4b79      	ldr	r3, [pc, #484]	@ (80027b4 <ADC_Init+0x1f0>)
 80025ce:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	431a      	orrs	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6859      	ldr	r1, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	021a      	lsls	r2, r3, #8
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800261c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6859      	ldr	r1, [r3, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	430a      	orrs	r2, r1
 800262e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800263e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6899      	ldr	r1, [r3, #8]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68da      	ldr	r2, [r3, #12]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002656:	4a58      	ldr	r2, [pc, #352]	@ (80027b8 <ADC_Init+0x1f4>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d022      	beq.n	80026a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800266a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6899      	ldr	r1, [r3, #8]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800268c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6899      	ldr	r1, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	e00f      	b.n	80026c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80026c0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0202 	bic.w	r2, r2, #2
 80026d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6899      	ldr	r1, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	7e1b      	ldrb	r3, [r3, #24]
 80026dc:	005a      	lsls	r2, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d01b      	beq.n	8002728 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026fe:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800270e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6859      	ldr	r1, [r3, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271a:	3b01      	subs	r3, #1
 800271c:	035a      	lsls	r2, r3, #13
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	605a      	str	r2, [r3, #4]
 8002726:	e007      	b.n	8002738 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002736:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002746:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	3b01      	subs	r3, #1
 8002754:	051a      	lsls	r2, r3, #20
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800276c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6899      	ldr	r1, [r3, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800277a:	025a      	lsls	r2, r3, #9
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002792:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6899      	ldr	r1, [r3, #8]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	029a      	lsls	r2, r3, #10
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	609a      	str	r2, [r3, #8]
}
 80027a8:	bf00      	nop
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	40012300 	.word	0x40012300
 80027b8:	0f000001 	.word	0x0f000001

080027bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002800 <__NVIC_SetPriorityGrouping+0x44>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027d8:	4013      	ands	r3, r2
 80027da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ee:	4a04      	ldr	r2, [pc, #16]	@ (8002800 <__NVIC_SetPriorityGrouping+0x44>)
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	60d3      	str	r3, [r2, #12]
}
 80027f4:	bf00      	nop
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002808:	4b04      	ldr	r3, [pc, #16]	@ (800281c <__NVIC_GetPriorityGrouping+0x18>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	0a1b      	lsrs	r3, r3, #8
 800280e:	f003 0307 	and.w	r3, r3, #7
}
 8002812:	4618      	mov	r0, r3
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	e000ed00 	.word	0xe000ed00

08002820 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800282a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282e:	2b00      	cmp	r3, #0
 8002830:	db0b      	blt.n	800284a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	f003 021f 	and.w	r2, r3, #31
 8002838:	4907      	ldr	r1, [pc, #28]	@ (8002858 <__NVIC_EnableIRQ+0x38>)
 800283a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283e:	095b      	lsrs	r3, r3, #5
 8002840:	2001      	movs	r0, #1
 8002842:	fa00 f202 	lsl.w	r2, r0, r2
 8002846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	e000e100 	.word	0xe000e100

0800285c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	6039      	str	r1, [r7, #0]
 8002866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286c:	2b00      	cmp	r3, #0
 800286e:	db0a      	blt.n	8002886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	b2da      	uxtb	r2, r3
 8002874:	490c      	ldr	r1, [pc, #48]	@ (80028a8 <__NVIC_SetPriority+0x4c>)
 8002876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287a:	0112      	lsls	r2, r2, #4
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	440b      	add	r3, r1
 8002880:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002884:	e00a      	b.n	800289c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	b2da      	uxtb	r2, r3
 800288a:	4908      	ldr	r1, [pc, #32]	@ (80028ac <__NVIC_SetPriority+0x50>)
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	3b04      	subs	r3, #4
 8002894:	0112      	lsls	r2, r2, #4
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	440b      	add	r3, r1
 800289a:	761a      	strb	r2, [r3, #24]
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	e000e100 	.word	0xe000e100
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b089      	sub	sp, #36	@ 0x24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f1c3 0307 	rsb	r3, r3, #7
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	bf28      	it	cs
 80028ce:	2304      	movcs	r3, #4
 80028d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	3304      	adds	r3, #4
 80028d6:	2b06      	cmp	r3, #6
 80028d8:	d902      	bls.n	80028e0 <NVIC_EncodePriority+0x30>
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	3b03      	subs	r3, #3
 80028de:	e000      	b.n	80028e2 <NVIC_EncodePriority+0x32>
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43da      	mvns	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	401a      	ands	r2, r3
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002902:	43d9      	mvns	r1, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002908:	4313      	orrs	r3, r2
         );
}
 800290a:	4618      	mov	r0, r3
 800290c:	3724      	adds	r7, #36	@ 0x24
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
	...

08002918 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3b01      	subs	r3, #1
 8002924:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002928:	d301      	bcc.n	800292e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800292a:	2301      	movs	r3, #1
 800292c:	e00f      	b.n	800294e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800292e:	4a0a      	ldr	r2, [pc, #40]	@ (8002958 <SysTick_Config+0x40>)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3b01      	subs	r3, #1
 8002934:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002936:	210f      	movs	r1, #15
 8002938:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800293c:	f7ff ff8e 	bl	800285c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002940:	4b05      	ldr	r3, [pc, #20]	@ (8002958 <SysTick_Config+0x40>)
 8002942:	2200      	movs	r2, #0
 8002944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002946:	4b04      	ldr	r3, [pc, #16]	@ (8002958 <SysTick_Config+0x40>)
 8002948:	2207      	movs	r2, #7
 800294a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	e000e010 	.word	0xe000e010

0800295c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f7ff ff29 	bl	80027bc <__NVIC_SetPriorityGrouping>
}
 800296a:	bf00      	nop
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002972:	b580      	push	{r7, lr}
 8002974:	b086      	sub	sp, #24
 8002976:	af00      	add	r7, sp, #0
 8002978:	4603      	mov	r3, r0
 800297a:	60b9      	str	r1, [r7, #8]
 800297c:	607a      	str	r2, [r7, #4]
 800297e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002980:	2300      	movs	r3, #0
 8002982:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002984:	f7ff ff3e 	bl	8002804 <__NVIC_GetPriorityGrouping>
 8002988:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	68b9      	ldr	r1, [r7, #8]
 800298e:	6978      	ldr	r0, [r7, #20]
 8002990:	f7ff ff8e 	bl	80028b0 <NVIC_EncodePriority>
 8002994:	4602      	mov	r2, r0
 8002996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800299a:	4611      	mov	r1, r2
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff ff5d 	bl	800285c <__NVIC_SetPriority>
}
 80029a2:	bf00      	nop
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b082      	sub	sp, #8
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	4603      	mov	r3, r0
 80029b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff ff31 	bl	8002820 <__NVIC_EnableIRQ>
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b082      	sub	sp, #8
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7ff ffa2 	bl	8002918 <SysTick_Config>
 80029d4:	4603      	mov	r3, r0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e014      	b.n	8002a1a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	791b      	ldrb	r3, [r3, #4]
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d105      	bne.n	8002a06 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7ff f861 	bl	8001ac8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2202      	movs	r2, #2
 8002a0a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e046      	b.n	8002ac4 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	795b      	ldrb	r3, [r3, #5]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d101      	bne.n	8002a42 <HAL_DAC_Start+0x20>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e040      	b.n	8002ac4 <HAL_DAC_Start+0xa2>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6819      	ldr	r1, [r3, #0]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	f003 0310 	and.w	r3, r3, #16
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	409a      	lsls	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10f      	bne.n	8002a8c <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002a76:	2b3c      	cmp	r3, #60	@ 0x3c
 8002a78:	d11d      	bne.n	8002ab6 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f042 0201 	orr.w	r2, r2, #1
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	e014      	b.n	8002ab6 <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	f003 0310 	and.w	r3, r3, #16
 8002a9c:	213c      	movs	r1, #60	@ 0x3c
 8002a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d107      	bne.n	8002ab6 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f042 0202 	orr.w	r2, r2, #2
 8002ab4:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b087      	sub	sp, #28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
 8002adc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e015      	b.n	8002b18 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d105      	bne.n	8002b04 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4413      	add	r3, r2
 8002afe:	3308      	adds	r3, #8
 8002b00:	617b      	str	r3, [r7, #20]
 8002b02:	e004      	b.n	8002b0e <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4413      	add	r3, r2
 8002b0a:	3314      	adds	r3, #20
 8002b0c:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	461a      	mov	r2, r3
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	371c      	adds	r7, #28
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b089      	sub	sp, #36	@ 0x24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b30:	2300      	movs	r3, #0
 8002b32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d002      	beq.n	8002b40 <HAL_DAC_ConfigChannel+0x1c>
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e042      	b.n	8002bca <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	795b      	ldrb	r3, [r3, #5]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d101      	bne.n	8002b50 <HAL_DAC_ConfigChannel+0x2c>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	e03c      	b.n	8002bca <HAL_DAC_ConfigChannel+0xa6>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2201      	movs	r2, #1
 8002b54:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2202      	movs	r2, #2
 8002b5a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f003 0310 	and.w	r3, r3, #16
 8002b6a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002b72:	43db      	mvns	r3, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4013      	ands	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f003 0310 	and.w	r3, r3, #16
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6819      	ldr	r1, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f003 0310 	and.w	r3, r3, #16
 8002bac:	22c0      	movs	r2, #192	@ 0xc0
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43da      	mvns	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	400a      	ands	r2, r1
 8002bba:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002bc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3724      	adds	r7, #36	@ 0x24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
	...

08002bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b089      	sub	sp, #36	@ 0x24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61fb      	str	r3, [r7, #28]
 8002bf2:	e16b      	b.n	8002ecc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	4013      	ands	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	f040 815a 	bne.w	8002ec6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d005      	beq.n	8002c2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d130      	bne.n	8002c8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	2203      	movs	r2, #3
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c60:	2201      	movs	r2, #1
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	091b      	lsrs	r3, r3, #4
 8002c76:	f003 0201 	and.w	r2, r3, #1
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 0303 	and.w	r3, r3, #3
 8002c94:	2b03      	cmp	r3, #3
 8002c96:	d017      	beq.n	8002cc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	2203      	movs	r2, #3
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4013      	ands	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d123      	bne.n	8002d1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	08da      	lsrs	r2, r3, #3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3208      	adds	r2, #8
 8002cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	220f      	movs	r2, #15
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	691a      	ldr	r2, [r3, #16]
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	08da      	lsrs	r2, r3, #3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3208      	adds	r2, #8
 8002d16:	69b9      	ldr	r1, [r7, #24]
 8002d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	2203      	movs	r2, #3
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4013      	ands	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f003 0203 	and.w	r2, r3, #3
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 80b4 	beq.w	8002ec6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	4b60      	ldr	r3, [pc, #384]	@ (8002ee4 <HAL_GPIO_Init+0x30c>)
 8002d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d66:	4a5f      	ldr	r2, [pc, #380]	@ (8002ee4 <HAL_GPIO_Init+0x30c>)
 8002d68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d6e:	4b5d      	ldr	r3, [pc, #372]	@ (8002ee4 <HAL_GPIO_Init+0x30c>)
 8002d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d7a:	4a5b      	ldr	r2, [pc, #364]	@ (8002ee8 <HAL_GPIO_Init+0x310>)
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	089b      	lsrs	r3, r3, #2
 8002d80:	3302      	adds	r3, #2
 8002d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	220f      	movs	r2, #15
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43db      	mvns	r3, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a52      	ldr	r2, [pc, #328]	@ (8002eec <HAL_GPIO_Init+0x314>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d02b      	beq.n	8002dfe <HAL_GPIO_Init+0x226>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a51      	ldr	r2, [pc, #324]	@ (8002ef0 <HAL_GPIO_Init+0x318>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d025      	beq.n	8002dfa <HAL_GPIO_Init+0x222>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a50      	ldr	r2, [pc, #320]	@ (8002ef4 <HAL_GPIO_Init+0x31c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d01f      	beq.n	8002df6 <HAL_GPIO_Init+0x21e>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a4f      	ldr	r2, [pc, #316]	@ (8002ef8 <HAL_GPIO_Init+0x320>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d019      	beq.n	8002df2 <HAL_GPIO_Init+0x21a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a4e      	ldr	r2, [pc, #312]	@ (8002efc <HAL_GPIO_Init+0x324>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d013      	beq.n	8002dee <HAL_GPIO_Init+0x216>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a4d      	ldr	r2, [pc, #308]	@ (8002f00 <HAL_GPIO_Init+0x328>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d00d      	beq.n	8002dea <HAL_GPIO_Init+0x212>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a4c      	ldr	r2, [pc, #304]	@ (8002f04 <HAL_GPIO_Init+0x32c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d007      	beq.n	8002de6 <HAL_GPIO_Init+0x20e>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a4b      	ldr	r2, [pc, #300]	@ (8002f08 <HAL_GPIO_Init+0x330>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d101      	bne.n	8002de2 <HAL_GPIO_Init+0x20a>
 8002dde:	2307      	movs	r3, #7
 8002de0:	e00e      	b.n	8002e00 <HAL_GPIO_Init+0x228>
 8002de2:	2308      	movs	r3, #8
 8002de4:	e00c      	b.n	8002e00 <HAL_GPIO_Init+0x228>
 8002de6:	2306      	movs	r3, #6
 8002de8:	e00a      	b.n	8002e00 <HAL_GPIO_Init+0x228>
 8002dea:	2305      	movs	r3, #5
 8002dec:	e008      	b.n	8002e00 <HAL_GPIO_Init+0x228>
 8002dee:	2304      	movs	r3, #4
 8002df0:	e006      	b.n	8002e00 <HAL_GPIO_Init+0x228>
 8002df2:	2303      	movs	r3, #3
 8002df4:	e004      	b.n	8002e00 <HAL_GPIO_Init+0x228>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e002      	b.n	8002e00 <HAL_GPIO_Init+0x228>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <HAL_GPIO_Init+0x228>
 8002dfe:	2300      	movs	r3, #0
 8002e00:	69fa      	ldr	r2, [r7, #28]
 8002e02:	f002 0203 	and.w	r2, r2, #3
 8002e06:	0092      	lsls	r2, r2, #2
 8002e08:	4093      	lsls	r3, r2
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e10:	4935      	ldr	r1, [pc, #212]	@ (8002ee8 <HAL_GPIO_Init+0x310>)
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	089b      	lsrs	r3, r3, #2
 8002e16:	3302      	adds	r3, #2
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e1e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f0c <HAL_GPIO_Init+0x334>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	43db      	mvns	r3, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e42:	4a32      	ldr	r2, [pc, #200]	@ (8002f0c <HAL_GPIO_Init+0x334>)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e48:	4b30      	ldr	r3, [pc, #192]	@ (8002f0c <HAL_GPIO_Init+0x334>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e6c:	4a27      	ldr	r2, [pc, #156]	@ (8002f0c <HAL_GPIO_Init+0x334>)
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e72:	4b26      	ldr	r3, [pc, #152]	@ (8002f0c <HAL_GPIO_Init+0x334>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e96:	4a1d      	ldr	r2, [pc, #116]	@ (8002f0c <HAL_GPIO_Init+0x334>)
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8002f0c <HAL_GPIO_Init+0x334>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ec0:	4a12      	ldr	r2, [pc, #72]	@ (8002f0c <HAL_GPIO_Init+0x334>)
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	61fb      	str	r3, [r7, #28]
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	2b0f      	cmp	r3, #15
 8002ed0:	f67f ae90 	bls.w	8002bf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ed4:	bf00      	nop
 8002ed6:	bf00      	nop
 8002ed8:	3724      	adds	r7, #36	@ 0x24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	40013800 	.word	0x40013800
 8002eec:	40020000 	.word	0x40020000
 8002ef0:	40020400 	.word	0x40020400
 8002ef4:	40020800 	.word	0x40020800
 8002ef8:	40020c00 	.word	0x40020c00
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40021400 	.word	0x40021400
 8002f04:	40021800 	.word	0x40021800
 8002f08:	40021c00 	.word	0x40021c00
 8002f0c:	40013c00 	.word	0x40013c00

08002f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	807b      	strh	r3, [r7, #2]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f20:	787b      	ldrb	r3, [r7, #1]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f26:	887a      	ldrh	r2, [r7, #2]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f2c:	e003      	b.n	8002f36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f2e:	887b      	ldrh	r3, [r7, #2]
 8002f30:	041a      	lsls	r2, r3, #16
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	619a      	str	r2, [r3, #24]
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b086      	sub	sp, #24
 8002f46:	af02      	add	r7, sp, #8
 8002f48:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e059      	b.n	8003008 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d106      	bne.n	8002f74 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7fe fe5e 	bl	8001c30 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2203      	movs	r2, #3
 8002f78:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f82:	d102      	bne.n	8002f8a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f003 f8b4 	bl	80060fc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6818      	ldr	r0, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	7c1a      	ldrb	r2, [r3, #16]
 8002f9c:	f88d 2000 	strb.w	r2, [sp]
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fa4:	f003 f846 	bl	8006034 <USB_CoreInit>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d005      	beq.n	8002fba <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e026      	b.n	8003008 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f003 f8ac 	bl	800611e <USB_SetCurrentMode>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d005      	beq.n	8002fd8 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e017      	b.n	8003008 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6818      	ldr	r0, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	7c1a      	ldrb	r2, [r3, #16]
 8002fe0:	f88d 2000 	strb.w	r2, [sp]
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fe8:	f003 fa10 	bl	800640c <USB_HostInit>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d005      	beq.n	8002ffe <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e004      	b.n	8003008 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f003 f9b1 	bl	800638e <USB_GetMode>
 800302c:	4603      	mov	r3, r0
 800302e:	2b01      	cmp	r3, #1
 8003030:	f040 80fb 	bne.w	800322a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f003 f974 	bl	8006326 <USB_ReadInterrupts>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 80f1 	beq.w	8003228 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f003 f96b 	bl	8006326 <USB_ReadInterrupts>
 8003050:	4603      	mov	r3, r0
 8003052:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003056:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800305a:	d104      	bne.n	8003066 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003064:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f003 f95b 	bl	8006326 <USB_ReadInterrupts>
 8003070:	4603      	mov	r3, r0
 8003072:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003076:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800307a:	d104      	bne.n	8003086 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003084:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f003 f94b 	bl	8006326 <USB_ReadInterrupts>
 8003090:	4603      	mov	r3, r0
 8003092:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003096:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800309a:	d104      	bne.n	80030a6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80030a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f003 f93b 	bl	8006326 <USB_ReadInterrupts>
 80030b0:	4603      	mov	r3, r0
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d103      	bne.n	80030c2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2202      	movs	r2, #2
 80030c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f003 f92d 	bl	8006326 <USB_ReadInterrupts>
 80030cc:	4603      	mov	r3, r0
 80030ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030d6:	d120      	bne.n	800311a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80030e0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d113      	bne.n	800311a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80030f2:	2110      	movs	r1, #16
 80030f4:	6938      	ldr	r0, [r7, #16]
 80030f6:	f003 f85e 	bl	80061b6 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80030fa:	6938      	ldr	r0, [r7, #16]
 80030fc:	f003 f88d 	bl	800621a <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	7a5b      	ldrb	r3, [r3, #9]
 8003104:	2b02      	cmp	r3, #2
 8003106:	d105      	bne.n	8003114 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2101      	movs	r1, #1
 800310e:	4618      	mov	r0, r3
 8003110:	f003 fa40 	bl	8006594 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f89f 	bl	8003258 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f003 f901 	bl	8006326 <USB_ReadInterrupts>
 8003124:	4603      	mov	r3, r0
 8003126:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800312a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800312e:	d102      	bne.n	8003136 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f001 fcc4 	bl	8004abe <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	f003 f8f3 	bl	8006326 <USB_ReadInterrupts>
 8003140:	4603      	mov	r3, r0
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b08      	cmp	r3, #8
 8003148:	d106      	bne.n	8003158 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f870 	bl	8003230 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2208      	movs	r2, #8
 8003156:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f003 f8e2 	bl	8006326 <USB_ReadInterrupts>
 8003162:	4603      	mov	r3, r0
 8003164:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003168:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800316c:	d139      	bne.n	80031e2 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f003 fa4b 	bl	800660e <USB_HC_ReadInterrupt>
 8003178:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
 800317e:	e025      	b.n	80031cc <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	fa22 f303 	lsr.w	r3, r2, r3
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d018      	beq.n	80031c6 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	015a      	lsls	r2, r3, #5
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4413      	add	r3, r2
 800319c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031aa:	d106      	bne.n	80031ba <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	4619      	mov	r1, r3
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f87c 	bl	80032b0 <HCD_HC_IN_IRQHandler>
 80031b8:	e005      	b.n	80031c6 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	4619      	mov	r1, r3
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 fede 	bl	8003f82 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	3301      	adds	r3, #1
 80031ca:	617b      	str	r3, [r7, #20]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	795b      	ldrb	r3, [r3, #5]
 80031d0:	461a      	mov	r2, r3
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d3d3      	bcc.n	8003180 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f003 f89d 	bl	8006326 <USB_ReadInterrupts>
 80031ec:	4603      	mov	r3, r0
 80031ee:	f003 0310 	and.w	r3, r3, #16
 80031f2:	2b10      	cmp	r3, #16
 80031f4:	d101      	bne.n	80031fa <HAL_HCD_IRQHandler+0x1ea>
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <HAL_HCD_IRQHandler+0x1ec>
 80031fa:	2300      	movs	r3, #0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d014      	beq.n	800322a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699a      	ldr	r2, [r3, #24]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0210 	bic.w	r2, r2, #16
 800320e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f001 fb75 	bl	8004900 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	699a      	ldr	r2, [r3, #24]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f042 0210 	orr.w	r2, r2, #16
 8003224:	619a      	str	r2, [r3, #24]
 8003226:	e000      	b.n	800322a <HAL_HCD_IRQHandler+0x21a>
      return;
 8003228:	bf00      	nop
    }
  }
}
 800322a:	3718      	adds	r7, #24
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	460b      	mov	r3, r1
 800329e:	70fb      	strb	r3, [r7, #3]
 80032a0:	4613      	mov	r3, r2
 80032a2:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	460b      	mov	r3, r1
 80032ba:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	78fa      	ldrb	r2, [r7, #3]
 80032cc:	4611      	mov	r1, r2
 80032ce:	4618      	mov	r0, r3
 80032d0:	f003 f83c 	bl	800634c <USB_ReadChInterrupts>
 80032d4:	4603      	mov	r3, r0
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d11a      	bne.n	8003314 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80032de:	78fb      	ldrb	r3, [r7, #3]
 80032e0:	015a      	lsls	r2, r3, #5
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	4413      	add	r3, r2
 80032e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032ea:	461a      	mov	r2, r3
 80032ec:	2304      	movs	r3, #4
 80032ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80032f0:	78fa      	ldrb	r2, [r7, #3]
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	4613      	mov	r3, r2
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	1a9b      	subs	r3, r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	440b      	add	r3, r1
 80032fe:	334d      	adds	r3, #77	@ 0x4d
 8003300:	2207      	movs	r2, #7
 8003302:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	78fa      	ldrb	r2, [r7, #3]
 800330a:	4611      	mov	r1, r2
 800330c:	4618      	mov	r0, r3
 800330e:	f003 f98f 	bl	8006630 <USB_HC_Halt>
 8003312:	e09e      	b.n	8003452 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	78fa      	ldrb	r2, [r7, #3]
 800331a:	4611      	mov	r1, r2
 800331c:	4618      	mov	r0, r3
 800331e:	f003 f815 	bl	800634c <USB_ReadChInterrupts>
 8003322:	4603      	mov	r3, r0
 8003324:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003328:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800332c:	d11b      	bne.n	8003366 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800332e:	78fb      	ldrb	r3, [r7, #3]
 8003330:	015a      	lsls	r2, r3, #5
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	4413      	add	r3, r2
 8003336:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800333a:	461a      	mov	r2, r3
 800333c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003340:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003342:	78fa      	ldrb	r2, [r7, #3]
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	1a9b      	subs	r3, r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	334d      	adds	r3, #77	@ 0x4d
 8003352:	2208      	movs	r2, #8
 8003354:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	78fa      	ldrb	r2, [r7, #3]
 800335c:	4611      	mov	r1, r2
 800335e:	4618      	mov	r0, r3
 8003360:	f003 f966 	bl	8006630 <USB_HC_Halt>
 8003364:	e075      	b.n	8003452 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	78fa      	ldrb	r2, [r7, #3]
 800336c:	4611      	mov	r1, r2
 800336e:	4618      	mov	r0, r3
 8003370:	f002 ffec 	bl	800634c <USB_ReadChInterrupts>
 8003374:	4603      	mov	r3, r0
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b08      	cmp	r3, #8
 800337c:	d11a      	bne.n	80033b4 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800337e:	78fb      	ldrb	r3, [r7, #3]
 8003380:	015a      	lsls	r2, r3, #5
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	4413      	add	r3, r2
 8003386:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800338a:	461a      	mov	r2, r3
 800338c:	2308      	movs	r3, #8
 800338e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003390:	78fa      	ldrb	r2, [r7, #3]
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	1a9b      	subs	r3, r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	334d      	adds	r3, #77	@ 0x4d
 80033a0:	2206      	movs	r2, #6
 80033a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	78fa      	ldrb	r2, [r7, #3]
 80033aa:	4611      	mov	r1, r2
 80033ac:	4618      	mov	r0, r3
 80033ae:	f003 f93f 	bl	8006630 <USB_HC_Halt>
 80033b2:	e04e      	b.n	8003452 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	78fa      	ldrb	r2, [r7, #3]
 80033ba:	4611      	mov	r1, r2
 80033bc:	4618      	mov	r0, r3
 80033be:	f002 ffc5 	bl	800634c <USB_ReadChInterrupts>
 80033c2:	4603      	mov	r3, r0
 80033c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033cc:	d11b      	bne.n	8003406 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80033ce:	78fb      	ldrb	r3, [r7, #3]
 80033d0:	015a      	lsls	r2, r3, #5
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	4413      	add	r3, r2
 80033d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033da:	461a      	mov	r2, r3
 80033dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80033e2:	78fa      	ldrb	r2, [r7, #3]
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	1a9b      	subs	r3, r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	440b      	add	r3, r1
 80033f0:	334d      	adds	r3, #77	@ 0x4d
 80033f2:	2209      	movs	r2, #9
 80033f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	78fa      	ldrb	r2, [r7, #3]
 80033fc:	4611      	mov	r1, r2
 80033fe:	4618      	mov	r0, r3
 8003400:	f003 f916 	bl	8006630 <USB_HC_Halt>
 8003404:	e025      	b.n	8003452 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	78fa      	ldrb	r2, [r7, #3]
 800340c:	4611      	mov	r1, r2
 800340e:	4618      	mov	r0, r3
 8003410:	f002 ff9c 	bl	800634c <USB_ReadChInterrupts>
 8003414:	4603      	mov	r3, r0
 8003416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800341a:	2b80      	cmp	r3, #128	@ 0x80
 800341c:	d119      	bne.n	8003452 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800341e:	78fb      	ldrb	r3, [r7, #3]
 8003420:	015a      	lsls	r2, r3, #5
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	4413      	add	r3, r2
 8003426:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800342a:	461a      	mov	r2, r3
 800342c:	2380      	movs	r3, #128	@ 0x80
 800342e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003430:	78fa      	ldrb	r2, [r7, #3]
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	1a9b      	subs	r3, r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	334d      	adds	r3, #77	@ 0x4d
 8003440:	2207      	movs	r2, #7
 8003442:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	78fa      	ldrb	r2, [r7, #3]
 800344a:	4611      	mov	r1, r2
 800344c:	4618      	mov	r0, r3
 800344e:	f003 f8ef 	bl	8006630 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	78fa      	ldrb	r2, [r7, #3]
 8003458:	4611      	mov	r1, r2
 800345a:	4618      	mov	r0, r3
 800345c:	f002 ff76 	bl	800634c <USB_ReadChInterrupts>
 8003460:	4603      	mov	r3, r0
 8003462:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003466:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800346a:	d112      	bne.n	8003492 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	78fa      	ldrb	r2, [r7, #3]
 8003472:	4611      	mov	r1, r2
 8003474:	4618      	mov	r0, r3
 8003476:	f003 f8db 	bl	8006630 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800347a:	78fb      	ldrb	r3, [r7, #3]
 800347c:	015a      	lsls	r2, r3, #5
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	4413      	add	r3, r2
 8003482:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003486:	461a      	mov	r2, r3
 8003488:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800348c:	6093      	str	r3, [r2, #8]
 800348e:	f000 bd75 	b.w	8003f7c <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	78fa      	ldrb	r2, [r7, #3]
 8003498:	4611      	mov	r1, r2
 800349a:	4618      	mov	r0, r3
 800349c:	f002 ff56 	bl	800634c <USB_ReadChInterrupts>
 80034a0:	4603      	mov	r3, r0
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	f040 8128 	bne.w	80036fc <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	015a      	lsls	r2, r3, #5
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	4413      	add	r3, r2
 80034b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034b8:	461a      	mov	r2, r3
 80034ba:	2320      	movs	r3, #32
 80034bc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80034be:	78fa      	ldrb	r2, [r7, #3]
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	011b      	lsls	r3, r3, #4
 80034c6:	1a9b      	subs	r3, r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	331b      	adds	r3, #27
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d119      	bne.n	8003508 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80034d4:	78fa      	ldrb	r2, [r7, #3]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	1a9b      	subs	r3, r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	331b      	adds	r3, #27
 80034e4:	2200      	movs	r2, #0
 80034e6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80034e8:	78fb      	ldrb	r3, [r7, #3]
 80034ea:	015a      	lsls	r2, r3, #5
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	4413      	add	r3, r2
 80034f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	78fa      	ldrb	r2, [r7, #3]
 80034f8:	0151      	lsls	r1, r2, #5
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	440a      	add	r2, r1
 80034fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003502:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003506:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	799b      	ldrb	r3, [r3, #6]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d01b      	beq.n	8003548 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003510:	78fa      	ldrb	r2, [r7, #3]
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	1a9b      	subs	r3, r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	3330      	adds	r3, #48	@ 0x30
 8003520:	6819      	ldr	r1, [r3, #0]
 8003522:	78fb      	ldrb	r3, [r7, #3]
 8003524:	015a      	lsls	r2, r3, #5
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	4413      	add	r3, r2
 800352a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003534:	78fa      	ldrb	r2, [r7, #3]
 8003536:	1ac9      	subs	r1, r1, r3
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	4613      	mov	r3, r2
 800353c:	011b      	lsls	r3, r3, #4
 800353e:	1a9b      	subs	r3, r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4403      	add	r3, r0
 8003544:	3338      	adds	r3, #56	@ 0x38
 8003546:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003548:	78fa      	ldrb	r2, [r7, #3]
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	334d      	adds	r3, #77	@ 0x4d
 8003558:	2201      	movs	r2, #1
 800355a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800355c:	78fa      	ldrb	r2, [r7, #3]
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	1a9b      	subs	r3, r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	3344      	adds	r3, #68	@ 0x44
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003570:	78fb      	ldrb	r3, [r7, #3]
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	4413      	add	r3, r2
 8003578:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800357c:	461a      	mov	r2, r3
 800357e:	2301      	movs	r3, #1
 8003580:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003582:	78fa      	ldrb	r2, [r7, #3]
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	4613      	mov	r3, r2
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	1a9b      	subs	r3, r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	440b      	add	r3, r1
 8003590:	3326      	adds	r3, #38	@ 0x26
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003598:	78fa      	ldrb	r2, [r7, #3]
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	4613      	mov	r3, r2
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	1a9b      	subs	r3, r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	440b      	add	r3, r1
 80035a6:	3326      	adds	r3, #38	@ 0x26
 80035a8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d110      	bne.n	80035d0 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	78fa      	ldrb	r2, [r7, #3]
 80035b4:	4611      	mov	r1, r2
 80035b6:	4618      	mov	r0, r3
 80035b8:	f003 f83a 	bl	8006630 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80035bc:	78fb      	ldrb	r3, [r7, #3]
 80035be:	015a      	lsls	r2, r3, #5
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	4413      	add	r3, r2
 80035c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035c8:	461a      	mov	r2, r3
 80035ca:	2310      	movs	r3, #16
 80035cc:	6093      	str	r3, [r2, #8]
 80035ce:	e03d      	b.n	800364c <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80035d0:	78fa      	ldrb	r2, [r7, #3]
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	011b      	lsls	r3, r3, #4
 80035d8:	1a9b      	subs	r3, r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	3326      	adds	r3, #38	@ 0x26
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	d00a      	beq.n	80035fc <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80035e6:	78fa      	ldrb	r2, [r7, #3]
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	1a9b      	subs	r3, r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	440b      	add	r3, r1
 80035f4:	3326      	adds	r3, #38	@ 0x26
 80035f6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d127      	bne.n	800364c <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80035fc:	78fb      	ldrb	r3, [r7, #3]
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	4413      	add	r3, r2
 8003604:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	78fa      	ldrb	r2, [r7, #3]
 800360c:	0151      	lsls	r1, r2, #5
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	440a      	add	r2, r1
 8003612:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003616:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800361a:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800361c:	78fa      	ldrb	r2, [r7, #3]
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	334c      	adds	r3, #76	@ 0x4c
 800362c:	2201      	movs	r2, #1
 800362e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003630:	78fa      	ldrb	r2, [r7, #3]
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	1a9b      	subs	r3, r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	334c      	adds	r3, #76	@ 0x4c
 8003640:	781a      	ldrb	r2, [r3, #0]
 8003642:	78fb      	ldrb	r3, [r7, #3]
 8003644:	4619      	mov	r1, r3
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7ff fe24 	bl	8003294 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	799b      	ldrb	r3, [r3, #6]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d13b      	bne.n	80036cc <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003654:	78fa      	ldrb	r2, [r7, #3]
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	4613      	mov	r3, r2
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	1a9b      	subs	r3, r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	3338      	adds	r3, #56	@ 0x38
 8003664:	6819      	ldr	r1, [r3, #0]
 8003666:	78fa      	ldrb	r2, [r7, #3]
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	4613      	mov	r3, r2
 800366c:	011b      	lsls	r3, r3, #4
 800366e:	1a9b      	subs	r3, r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4403      	add	r3, r0
 8003674:	3328      	adds	r3, #40	@ 0x28
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	440b      	add	r3, r1
 800367a:	1e59      	subs	r1, r3, #1
 800367c:	78fa      	ldrb	r2, [r7, #3]
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	4613      	mov	r3, r2
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	1a9b      	subs	r3, r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4403      	add	r3, r0
 800368a:	3328      	adds	r3, #40	@ 0x28
 800368c:	881b      	ldrh	r3, [r3, #0]
 800368e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	f000 8470 	beq.w	8003f7c <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800369c:	78fa      	ldrb	r2, [r7, #3]
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	4613      	mov	r3, r2
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	1a9b      	subs	r3, r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	333c      	adds	r3, #60	@ 0x3c
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	78fa      	ldrb	r2, [r7, #3]
 80036b0:	f083 0301 	eor.w	r3, r3, #1
 80036b4:	b2d8      	uxtb	r0, r3
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	4613      	mov	r3, r2
 80036ba:	011b      	lsls	r3, r3, #4
 80036bc:	1a9b      	subs	r3, r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	333c      	adds	r3, #60	@ 0x3c
 80036c4:	4602      	mov	r2, r0
 80036c6:	701a      	strb	r2, [r3, #0]
 80036c8:	f000 bc58 	b.w	8003f7c <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80036cc:	78fa      	ldrb	r2, [r7, #3]
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	4613      	mov	r3, r2
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	1a9b      	subs	r3, r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	333c      	adds	r3, #60	@ 0x3c
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	78fa      	ldrb	r2, [r7, #3]
 80036e0:	f083 0301 	eor.w	r3, r3, #1
 80036e4:	b2d8      	uxtb	r0, r3
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	4613      	mov	r3, r2
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	1a9b      	subs	r3, r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	333c      	adds	r3, #60	@ 0x3c
 80036f4:	4602      	mov	r2, r0
 80036f6:	701a      	strb	r2, [r3, #0]
 80036f8:	f000 bc40 	b.w	8003f7c <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	78fa      	ldrb	r2, [r7, #3]
 8003702:	4611      	mov	r1, r2
 8003704:	4618      	mov	r0, r3
 8003706:	f002 fe21 	bl	800634c <USB_ReadChInterrupts>
 800370a:	4603      	mov	r3, r0
 800370c:	f003 0320 	and.w	r3, r3, #32
 8003710:	2b20      	cmp	r3, #32
 8003712:	d131      	bne.n	8003778 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003714:	78fb      	ldrb	r3, [r7, #3]
 8003716:	015a      	lsls	r2, r3, #5
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	4413      	add	r3, r2
 800371c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003720:	461a      	mov	r2, r3
 8003722:	2320      	movs	r3, #32
 8003724:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003726:	78fa      	ldrb	r2, [r7, #3]
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	4613      	mov	r3, r2
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	1a9b      	subs	r3, r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	440b      	add	r3, r1
 8003734:	331a      	adds	r3, #26
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	2b01      	cmp	r3, #1
 800373a:	f040 841f 	bne.w	8003f7c <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800373e:	78fa      	ldrb	r2, [r7, #3]
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	4613      	mov	r3, r2
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	1a9b      	subs	r3, r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	440b      	add	r3, r1
 800374c:	331b      	adds	r3, #27
 800374e:	2201      	movs	r2, #1
 8003750:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003752:	78fa      	ldrb	r2, [r7, #3]
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	4613      	mov	r3, r2
 8003758:	011b      	lsls	r3, r3, #4
 800375a:	1a9b      	subs	r3, r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	440b      	add	r3, r1
 8003760:	334d      	adds	r3, #77	@ 0x4d
 8003762:	2203      	movs	r2, #3
 8003764:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	78fa      	ldrb	r2, [r7, #3]
 800376c:	4611      	mov	r1, r2
 800376e:	4618      	mov	r0, r3
 8003770:	f002 ff5e 	bl	8006630 <USB_HC_Halt>
 8003774:	f000 bc02 	b.w	8003f7c <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	78fa      	ldrb	r2, [r7, #3]
 800377e:	4611      	mov	r1, r2
 8003780:	4618      	mov	r0, r3
 8003782:	f002 fde3 	bl	800634c <USB_ReadChInterrupts>
 8003786:	4603      	mov	r3, r0
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b02      	cmp	r3, #2
 800378e:	f040 8305 	bne.w	8003d9c <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003792:	78fb      	ldrb	r3, [r7, #3]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4413      	add	r3, r2
 800379a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800379e:	461a      	mov	r2, r3
 80037a0:	2302      	movs	r3, #2
 80037a2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80037a4:	78fa      	ldrb	r2, [r7, #3]
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	4613      	mov	r3, r2
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	1a9b      	subs	r3, r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	440b      	add	r3, r1
 80037b2:	334d      	adds	r3, #77	@ 0x4d
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d114      	bne.n	80037e4 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037ba:	78fa      	ldrb	r2, [r7, #3]
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	4613      	mov	r3, r2
 80037c0:	011b      	lsls	r3, r3, #4
 80037c2:	1a9b      	subs	r3, r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	334d      	adds	r3, #77	@ 0x4d
 80037ca:	2202      	movs	r2, #2
 80037cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80037ce:	78fa      	ldrb	r2, [r7, #3]
 80037d0:	6879      	ldr	r1, [r7, #4]
 80037d2:	4613      	mov	r3, r2
 80037d4:	011b      	lsls	r3, r3, #4
 80037d6:	1a9b      	subs	r3, r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	440b      	add	r3, r1
 80037dc:	334c      	adds	r3, #76	@ 0x4c
 80037de:	2201      	movs	r2, #1
 80037e0:	701a      	strb	r2, [r3, #0]
 80037e2:	e2cc      	b.n	8003d7e <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80037e4:	78fa      	ldrb	r2, [r7, #3]
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	4613      	mov	r3, r2
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	1a9b      	subs	r3, r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	334d      	adds	r3, #77	@ 0x4d
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b06      	cmp	r3, #6
 80037f8:	d114      	bne.n	8003824 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037fa:	78fa      	ldrb	r2, [r7, #3]
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	4613      	mov	r3, r2
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	1a9b      	subs	r3, r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	440b      	add	r3, r1
 8003808:	334d      	adds	r3, #77	@ 0x4d
 800380a:	2202      	movs	r2, #2
 800380c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800380e:	78fa      	ldrb	r2, [r7, #3]
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	1a9b      	subs	r3, r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	440b      	add	r3, r1
 800381c:	334c      	adds	r3, #76	@ 0x4c
 800381e:	2205      	movs	r2, #5
 8003820:	701a      	strb	r2, [r3, #0]
 8003822:	e2ac      	b.n	8003d7e <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003824:	78fa      	ldrb	r2, [r7, #3]
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	4613      	mov	r3, r2
 800382a:	011b      	lsls	r3, r3, #4
 800382c:	1a9b      	subs	r3, r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	440b      	add	r3, r1
 8003832:	334d      	adds	r3, #77	@ 0x4d
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	2b07      	cmp	r3, #7
 8003838:	d00b      	beq.n	8003852 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800383a:	78fa      	ldrb	r2, [r7, #3]
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	334d      	adds	r3, #77	@ 0x4d
 800384a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800384c:	2b09      	cmp	r3, #9
 800384e:	f040 80a6 	bne.w	800399e <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003852:	78fa      	ldrb	r2, [r7, #3]
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	4613      	mov	r3, r2
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	1a9b      	subs	r3, r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	440b      	add	r3, r1
 8003860:	334d      	adds	r3, #77	@ 0x4d
 8003862:	2202      	movs	r2, #2
 8003864:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003866:	78fa      	ldrb	r2, [r7, #3]
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	4613      	mov	r3, r2
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	1a9b      	subs	r3, r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	440b      	add	r3, r1
 8003874:	3344      	adds	r3, #68	@ 0x44
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	1c59      	adds	r1, r3, #1
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	4613      	mov	r3, r2
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	1a9b      	subs	r3, r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4403      	add	r3, r0
 8003886:	3344      	adds	r3, #68	@ 0x44
 8003888:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800388a:	78fa      	ldrb	r2, [r7, #3]
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	4613      	mov	r3, r2
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	1a9b      	subs	r3, r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	3344      	adds	r3, #68	@ 0x44
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b02      	cmp	r3, #2
 800389e:	d943      	bls.n	8003928 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80038a0:	78fa      	ldrb	r2, [r7, #3]
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	4613      	mov	r3, r2
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	1a9b      	subs	r3, r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	3344      	adds	r3, #68	@ 0x44
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80038b4:	78fa      	ldrb	r2, [r7, #3]
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	4613      	mov	r3, r2
 80038ba:	011b      	lsls	r3, r3, #4
 80038bc:	1a9b      	subs	r3, r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	331a      	adds	r3, #26
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d123      	bne.n	8003912 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80038ca:	78fa      	ldrb	r2, [r7, #3]
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	4613      	mov	r3, r2
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	1a9b      	subs	r3, r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	440b      	add	r3, r1
 80038d8:	331b      	adds	r3, #27
 80038da:	2200      	movs	r2, #0
 80038dc:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80038de:	78fa      	ldrb	r2, [r7, #3]
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	4613      	mov	r3, r2
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	1a9b      	subs	r3, r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	440b      	add	r3, r1
 80038ec:	331c      	adds	r3, #28
 80038ee:	2200      	movs	r2, #0
 80038f0:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80038f2:	78fb      	ldrb	r3, [r7, #3]
 80038f4:	015a      	lsls	r2, r3, #5
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	4413      	add	r3, r2
 80038fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	78fa      	ldrb	r2, [r7, #3]
 8003902:	0151      	lsls	r1, r2, #5
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	440a      	add	r2, r1
 8003908:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800390c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003910:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003912:	78fa      	ldrb	r2, [r7, #3]
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	4613      	mov	r3, r2
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	1a9b      	subs	r3, r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	440b      	add	r3, r1
 8003920:	334c      	adds	r3, #76	@ 0x4c
 8003922:	2204      	movs	r2, #4
 8003924:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003926:	e229      	b.n	8003d7c <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003928:	78fa      	ldrb	r2, [r7, #3]
 800392a:	6879      	ldr	r1, [r7, #4]
 800392c:	4613      	mov	r3, r2
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	1a9b      	subs	r3, r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	334c      	adds	r3, #76	@ 0x4c
 8003938:	2202      	movs	r2, #2
 800393a:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800393c:	78fa      	ldrb	r2, [r7, #3]
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	4613      	mov	r3, r2
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	1a9b      	subs	r3, r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	3326      	adds	r3, #38	@ 0x26
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00b      	beq.n	800396a <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003952:	78fa      	ldrb	r2, [r7, #3]
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	4613      	mov	r3, r2
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	1a9b      	subs	r3, r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	440b      	add	r3, r1
 8003960:	3326      	adds	r3, #38	@ 0x26
 8003962:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003964:	2b02      	cmp	r3, #2
 8003966:	f040 8209 	bne.w	8003d7c <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800396a:	78fb      	ldrb	r3, [r7, #3]
 800396c:	015a      	lsls	r2, r3, #5
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	4413      	add	r3, r2
 8003972:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003980:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003988:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800398a:	78fb      	ldrb	r3, [r7, #3]
 800398c:	015a      	lsls	r2, r3, #5
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	4413      	add	r3, r2
 8003992:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003996:	461a      	mov	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800399c:	e1ee      	b.n	8003d7c <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800399e:	78fa      	ldrb	r2, [r7, #3]
 80039a0:	6879      	ldr	r1, [r7, #4]
 80039a2:	4613      	mov	r3, r2
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	1a9b      	subs	r3, r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	440b      	add	r3, r1
 80039ac:	334d      	adds	r3, #77	@ 0x4d
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	2b05      	cmp	r3, #5
 80039b2:	f040 80c8 	bne.w	8003b46 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80039b6:	78fa      	ldrb	r2, [r7, #3]
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	4613      	mov	r3, r2
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	1a9b      	subs	r3, r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	440b      	add	r3, r1
 80039c4:	334d      	adds	r3, #77	@ 0x4d
 80039c6:	2202      	movs	r2, #2
 80039c8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80039ca:	78fa      	ldrb	r2, [r7, #3]
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	4613      	mov	r3, r2
 80039d0:	011b      	lsls	r3, r3, #4
 80039d2:	1a9b      	subs	r3, r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	440b      	add	r3, r1
 80039d8:	331b      	adds	r3, #27
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	f040 81ce 	bne.w	8003d7e <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80039e2:	78fa      	ldrb	r2, [r7, #3]
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	4613      	mov	r3, r2
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	1a9b      	subs	r3, r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	440b      	add	r3, r1
 80039f0:	3326      	adds	r3, #38	@ 0x26
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	d16b      	bne.n	8003ad0 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80039f8:	78fa      	ldrb	r2, [r7, #3]
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	4613      	mov	r3, r2
 80039fe:	011b      	lsls	r3, r3, #4
 8003a00:	1a9b      	subs	r3, r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	3348      	adds	r3, #72	@ 0x48
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	1c59      	adds	r1, r3, #1
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	1a9b      	subs	r3, r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4403      	add	r3, r0
 8003a18:	3348      	adds	r3, #72	@ 0x48
 8003a1a:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003a1c:	78fa      	ldrb	r2, [r7, #3]
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	1a9b      	subs	r3, r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	3348      	adds	r3, #72	@ 0x48
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d943      	bls.n	8003aba <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003a32:	78fa      	ldrb	r2, [r7, #3]
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	011b      	lsls	r3, r3, #4
 8003a3a:	1a9b      	subs	r3, r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	3348      	adds	r3, #72	@ 0x48
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003a46:	78fa      	ldrb	r2, [r7, #3]
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	1a9b      	subs	r3, r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	331b      	adds	r3, #27
 8003a56:	2200      	movs	r2, #0
 8003a58:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003a5a:	78fa      	ldrb	r2, [r7, #3]
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	1a9b      	subs	r3, r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	440b      	add	r3, r1
 8003a68:	3344      	adds	r3, #68	@ 0x44
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d809      	bhi.n	8003a84 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003a70:	78fa      	ldrb	r2, [r7, #3]
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	4613      	mov	r3, r2
 8003a76:	011b      	lsls	r3, r3, #4
 8003a78:	1a9b      	subs	r3, r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	331c      	adds	r3, #28
 8003a80:	2201      	movs	r2, #1
 8003a82:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003a84:	78fb      	ldrb	r3, [r7, #3]
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	78fa      	ldrb	r2, [r7, #3]
 8003a94:	0151      	lsls	r1, r2, #5
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	440a      	add	r2, r1
 8003a9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aa2:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003aa4:	78fa      	ldrb	r2, [r7, #3]
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	1a9b      	subs	r3, r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	334c      	adds	r3, #76	@ 0x4c
 8003ab4:	2204      	movs	r2, #4
 8003ab6:	701a      	strb	r2, [r3, #0]
 8003ab8:	e014      	b.n	8003ae4 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003aba:	78fa      	ldrb	r2, [r7, #3]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	334c      	adds	r3, #76	@ 0x4c
 8003aca:	2202      	movs	r2, #2
 8003acc:	701a      	strb	r2, [r3, #0]
 8003ace:	e009      	b.n	8003ae4 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ad0:	78fa      	ldrb	r2, [r7, #3]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	334c      	adds	r3, #76	@ 0x4c
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ae4:	78fa      	ldrb	r2, [r7, #3]
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	1a9b      	subs	r3, r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	3326      	adds	r3, #38	@ 0x26
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00b      	beq.n	8003b12 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003afa:	78fa      	ldrb	r2, [r7, #3]
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	4613      	mov	r3, r2
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	1a9b      	subs	r3, r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	3326      	adds	r3, #38	@ 0x26
 8003b0a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	f040 8136 	bne.w	8003d7e <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003b12:	78fb      	ldrb	r3, [r7, #3]
 8003b14:	015a      	lsls	r2, r3, #5
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003b28:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b30:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003b32:	78fb      	ldrb	r3, [r7, #3]
 8003b34:	015a      	lsls	r2, r3, #5
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	4413      	add	r3, r2
 8003b3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b3e:	461a      	mov	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	e11b      	b.n	8003d7e <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003b46:	78fa      	ldrb	r2, [r7, #3]
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	1a9b      	subs	r3, r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	440b      	add	r3, r1
 8003b54:	334d      	adds	r3, #77	@ 0x4d
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	2b03      	cmp	r3, #3
 8003b5a:	f040 8081 	bne.w	8003c60 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b5e:	78fa      	ldrb	r2, [r7, #3]
 8003b60:	6879      	ldr	r1, [r7, #4]
 8003b62:	4613      	mov	r3, r2
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	1a9b      	subs	r3, r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	334d      	adds	r3, #77	@ 0x4d
 8003b6e:	2202      	movs	r2, #2
 8003b70:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003b72:	78fa      	ldrb	r2, [r7, #3]
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	4613      	mov	r3, r2
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	1a9b      	subs	r3, r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	440b      	add	r3, r1
 8003b80:	331b      	adds	r3, #27
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	f040 80fa 	bne.w	8003d7e <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b8a:	78fa      	ldrb	r2, [r7, #3]
 8003b8c:	6879      	ldr	r1, [r7, #4]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	011b      	lsls	r3, r3, #4
 8003b92:	1a9b      	subs	r3, r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	440b      	add	r3, r1
 8003b98:	334c      	adds	r3, #76	@ 0x4c
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003b9e:	78fb      	ldrb	r3, [r7, #3]
 8003ba0:	015a      	lsls	r2, r3, #5
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	78fa      	ldrb	r2, [r7, #3]
 8003bae:	0151      	lsls	r1, r2, #5
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	440a      	add	r2, r1
 8003bb4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003bb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bbc:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003bbe:	78fb      	ldrb	r3, [r7, #3]
 8003bc0:	015a      	lsls	r2, r3, #5
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	78fa      	ldrb	r2, [r7, #3]
 8003bce:	0151      	lsls	r1, r2, #5
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	440a      	add	r2, r1
 8003bd4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003bd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bdc:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003bde:	78fb      	ldrb	r3, [r7, #3]
 8003be0:	015a      	lsls	r2, r3, #5
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	78fa      	ldrb	r2, [r7, #3]
 8003bee:	0151      	lsls	r1, r2, #5
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	440a      	add	r2, r1
 8003bf4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003bf8:	f023 0320 	bic.w	r3, r3, #32
 8003bfc:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003bfe:	78fa      	ldrb	r2, [r7, #3]
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	4613      	mov	r3, r2
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	1a9b      	subs	r3, r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	3326      	adds	r3, #38	@ 0x26
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00b      	beq.n	8003c2c <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003c14:	78fa      	ldrb	r2, [r7, #3]
 8003c16:	6879      	ldr	r1, [r7, #4]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	1a9b      	subs	r3, r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	440b      	add	r3, r1
 8003c22:	3326      	adds	r3, #38	@ 0x26
 8003c24:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	f040 80a9 	bne.w	8003d7e <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003c2c:	78fb      	ldrb	r3, [r7, #3]
 8003c2e:	015a      	lsls	r2, r3, #5
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	4413      	add	r3, r2
 8003c34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003c42:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003c4a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003c4c:	78fb      	ldrb	r3, [r7, #3]
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c58:	461a      	mov	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6013      	str	r3, [r2, #0]
 8003c5e:	e08e      	b.n	8003d7e <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003c60:	78fa      	ldrb	r2, [r7, #3]
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	4613      	mov	r3, r2
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	1a9b      	subs	r3, r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	334d      	adds	r3, #77	@ 0x4d
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	d143      	bne.n	8003cfe <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c76:	78fa      	ldrb	r2, [r7, #3]
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	1a9b      	subs	r3, r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	440b      	add	r3, r1
 8003c84:	334d      	adds	r3, #77	@ 0x4d
 8003c86:	2202      	movs	r2, #2
 8003c88:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c8a:	78fa      	ldrb	r2, [r7, #3]
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	1a9b      	subs	r3, r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	440b      	add	r3, r1
 8003c98:	334c      	adds	r3, #76	@ 0x4c
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c9e:	78fa      	ldrb	r2, [r7, #3]
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	1a9b      	subs	r3, r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	440b      	add	r3, r1
 8003cac:	3326      	adds	r3, #38	@ 0x26
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00a      	beq.n	8003cca <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003cb4:	78fa      	ldrb	r2, [r7, #3]
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	3326      	adds	r3, #38	@ 0x26
 8003cc4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d159      	bne.n	8003d7e <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003cca:	78fb      	ldrb	r3, [r7, #3]
 8003ccc:	015a      	lsls	r2, r3, #5
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003ce0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ce8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003cea:	78fb      	ldrb	r3, [r7, #3]
 8003cec:	015a      	lsls	r2, r3, #5
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6013      	str	r3, [r2, #0]
 8003cfc:	e03f      	b.n	8003d7e <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003cfe:	78fa      	ldrb	r2, [r7, #3]
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	4613      	mov	r3, r2
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	1a9b      	subs	r3, r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	440b      	add	r3, r1
 8003d0c:	334d      	adds	r3, #77	@ 0x4d
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	d126      	bne.n	8003d62 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d14:	78fa      	ldrb	r2, [r7, #3]
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	1a9b      	subs	r3, r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	334d      	adds	r3, #77	@ 0x4d
 8003d24:	2202      	movs	r2, #2
 8003d26:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003d28:	78fa      	ldrb	r2, [r7, #3]
 8003d2a:	6879      	ldr	r1, [r7, #4]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	011b      	lsls	r3, r3, #4
 8003d30:	1a9b      	subs	r3, r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	440b      	add	r3, r1
 8003d36:	3344      	adds	r3, #68	@ 0x44
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	1c59      	adds	r1, r3, #1
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	011b      	lsls	r3, r3, #4
 8003d42:	1a9b      	subs	r3, r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4403      	add	r3, r0
 8003d48:	3344      	adds	r3, #68	@ 0x44
 8003d4a:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003d4c:	78fa      	ldrb	r2, [r7, #3]
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	4613      	mov	r3, r2
 8003d52:	011b      	lsls	r3, r3, #4
 8003d54:	1a9b      	subs	r3, r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	334c      	adds	r3, #76	@ 0x4c
 8003d5c:	2204      	movs	r2, #4
 8003d5e:	701a      	strb	r2, [r3, #0]
 8003d60:	e00d      	b.n	8003d7e <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003d62:	78fa      	ldrb	r2, [r7, #3]
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	4613      	mov	r3, r2
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	1a9b      	subs	r3, r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	440b      	add	r3, r1
 8003d70:	334d      	adds	r3, #77	@ 0x4d
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	f000 8100 	beq.w	8003f7a <HCD_HC_IN_IRQHandler+0xcca>
 8003d7a:	e000      	b.n	8003d7e <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d7c:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003d7e:	78fa      	ldrb	r2, [r7, #3]
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	4613      	mov	r3, r2
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	1a9b      	subs	r3, r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	440b      	add	r3, r1
 8003d8c:	334c      	adds	r3, #76	@ 0x4c
 8003d8e:	781a      	ldrb	r2, [r3, #0]
 8003d90:	78fb      	ldrb	r3, [r7, #3]
 8003d92:	4619      	mov	r1, r3
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7ff fa7d 	bl	8003294 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003d9a:	e0ef      	b.n	8003f7c <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	78fa      	ldrb	r2, [r7, #3]
 8003da2:	4611      	mov	r1, r2
 8003da4:	4618      	mov	r0, r3
 8003da6:	f002 fad1 	bl	800634c <USB_ReadChInterrupts>
 8003daa:	4603      	mov	r3, r0
 8003dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db0:	2b40      	cmp	r3, #64	@ 0x40
 8003db2:	d12f      	bne.n	8003e14 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003db4:	78fb      	ldrb	r3, [r7, #3]
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	2340      	movs	r3, #64	@ 0x40
 8003dc4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003dc6:	78fa      	ldrb	r2, [r7, #3]
 8003dc8:	6879      	ldr	r1, [r7, #4]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	011b      	lsls	r3, r3, #4
 8003dce:	1a9b      	subs	r3, r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	440b      	add	r3, r1
 8003dd4:	334d      	adds	r3, #77	@ 0x4d
 8003dd6:	2205      	movs	r2, #5
 8003dd8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003dda:	78fa      	ldrb	r2, [r7, #3]
 8003ddc:	6879      	ldr	r1, [r7, #4]
 8003dde:	4613      	mov	r3, r2
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	1a9b      	subs	r3, r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	440b      	add	r3, r1
 8003de8:	331a      	adds	r3, #26
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d109      	bne.n	8003e04 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003df0:	78fa      	ldrb	r2, [r7, #3]
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	4613      	mov	r3, r2
 8003df6:	011b      	lsls	r3, r3, #4
 8003df8:	1a9b      	subs	r3, r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	440b      	add	r3, r1
 8003dfe:	3344      	adds	r3, #68	@ 0x44
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	78fa      	ldrb	r2, [r7, #3]
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f002 fc0f 	bl	8006630 <USB_HC_Halt>
 8003e12:	e0b3      	b.n	8003f7c <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	78fa      	ldrb	r2, [r7, #3]
 8003e1a:	4611      	mov	r1, r2
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f002 fa95 	bl	800634c <USB_ReadChInterrupts>
 8003e22:	4603      	mov	r3, r0
 8003e24:	f003 0310 	and.w	r3, r3, #16
 8003e28:	2b10      	cmp	r3, #16
 8003e2a:	f040 80a7 	bne.w	8003f7c <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003e2e:	78fa      	ldrb	r2, [r7, #3]
 8003e30:	6879      	ldr	r1, [r7, #4]
 8003e32:	4613      	mov	r3, r2
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	1a9b      	subs	r3, r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	440b      	add	r3, r1
 8003e3c:	3326      	adds	r3, #38	@ 0x26
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b03      	cmp	r3, #3
 8003e42:	d11b      	bne.n	8003e7c <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003e44:	78fa      	ldrb	r2, [r7, #3]
 8003e46:	6879      	ldr	r1, [r7, #4]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	1a9b      	subs	r3, r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	440b      	add	r3, r1
 8003e52:	3344      	adds	r3, #68	@ 0x44
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003e58:	78fa      	ldrb	r2, [r7, #3]
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	1a9b      	subs	r3, r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	334d      	adds	r3, #77	@ 0x4d
 8003e68:	2204      	movs	r2, #4
 8003e6a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	78fa      	ldrb	r2, [r7, #3]
 8003e72:	4611      	mov	r1, r2
 8003e74:	4618      	mov	r0, r3
 8003e76:	f002 fbdb 	bl	8006630 <USB_HC_Halt>
 8003e7a:	e03f      	b.n	8003efc <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e7c:	78fa      	ldrb	r2, [r7, #3]
 8003e7e:	6879      	ldr	r1, [r7, #4]
 8003e80:	4613      	mov	r3, r2
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	1a9b      	subs	r3, r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	440b      	add	r3, r1
 8003e8a:	3326      	adds	r3, #38	@ 0x26
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00a      	beq.n	8003ea8 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003e92:	78fa      	ldrb	r2, [r7, #3]
 8003e94:	6879      	ldr	r1, [r7, #4]
 8003e96:	4613      	mov	r3, r2
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	1a9b      	subs	r3, r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	440b      	add	r3, r1
 8003ea0:	3326      	adds	r3, #38	@ 0x26
 8003ea2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d129      	bne.n	8003efc <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003ea8:	78fa      	ldrb	r2, [r7, #3]
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	4613      	mov	r3, r2
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	1a9b      	subs	r3, r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	3344      	adds	r3, #68	@ 0x44
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	799b      	ldrb	r3, [r3, #6]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00a      	beq.n	8003eda <HCD_HC_IN_IRQHandler+0xc2a>
 8003ec4:	78fa      	ldrb	r2, [r7, #3]
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	1a9b      	subs	r3, r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	331b      	adds	r3, #27
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d110      	bne.n	8003efc <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003eda:	78fa      	ldrb	r2, [r7, #3]
 8003edc:	6879      	ldr	r1, [r7, #4]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	1a9b      	subs	r3, r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	440b      	add	r3, r1
 8003ee8:	334d      	adds	r3, #77	@ 0x4d
 8003eea:	2204      	movs	r2, #4
 8003eec:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	78fa      	ldrb	r2, [r7, #3]
 8003ef4:	4611      	mov	r1, r2
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f002 fb9a 	bl	8006630 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003efc:	78fa      	ldrb	r2, [r7, #3]
 8003efe:	6879      	ldr	r1, [r7, #4]
 8003f00:	4613      	mov	r3, r2
 8003f02:	011b      	lsls	r3, r3, #4
 8003f04:	1a9b      	subs	r3, r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	440b      	add	r3, r1
 8003f0a:	331b      	adds	r3, #27
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d129      	bne.n	8003f66 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003f12:	78fa      	ldrb	r2, [r7, #3]
 8003f14:	6879      	ldr	r1, [r7, #4]
 8003f16:	4613      	mov	r3, r2
 8003f18:	011b      	lsls	r3, r3, #4
 8003f1a:	1a9b      	subs	r3, r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	440b      	add	r3, r1
 8003f20:	331b      	adds	r3, #27
 8003f22:	2200      	movs	r2, #0
 8003f24:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003f26:	78fb      	ldrb	r3, [r7, #3]
 8003f28:	015a      	lsls	r2, r3, #5
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	78fa      	ldrb	r2, [r7, #3]
 8003f36:	0151      	lsls	r1, r2, #5
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	440a      	add	r2, r1
 8003f3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003f40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f44:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003f46:	78fb      	ldrb	r3, [r7, #3]
 8003f48:	015a      	lsls	r2, r3, #5
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	78fa      	ldrb	r2, [r7, #3]
 8003f56:	0151      	lsls	r1, r2, #5
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	440a      	add	r2, r1
 8003f5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003f60:	f043 0320 	orr.w	r3, r3, #32
 8003f64:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003f66:	78fb      	ldrb	r3, [r7, #3]
 8003f68:	015a      	lsls	r2, r3, #5
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f72:	461a      	mov	r2, r3
 8003f74:	2310      	movs	r3, #16
 8003f76:	6093      	str	r3, [r2, #8]
 8003f78:	e000      	b.n	8003f7c <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003f7a:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b086      	sub	sp, #24
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	78fa      	ldrb	r2, [r7, #3]
 8003f9e:	4611      	mov	r1, r2
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f002 f9d3 	bl	800634c <USB_ReadChInterrupts>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	d11b      	bne.n	8003fe8 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003fb0:	78fb      	ldrb	r3, [r7, #3]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	2304      	movs	r3, #4
 8003fc0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003fc2:	78fa      	ldrb	r2, [r7, #3]
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	011b      	lsls	r3, r3, #4
 8003fca:	1a9b      	subs	r3, r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	440b      	add	r3, r1
 8003fd0:	334d      	adds	r3, #77	@ 0x4d
 8003fd2:	2207      	movs	r2, #7
 8003fd4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	78fa      	ldrb	r2, [r7, #3]
 8003fdc:	4611      	mov	r1, r2
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f002 fb26 	bl	8006630 <USB_HC_Halt>
 8003fe4:	f000 bc89 	b.w	80048fa <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	78fa      	ldrb	r2, [r7, #3]
 8003fee:	4611      	mov	r1, r2
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f002 f9ab 	bl	800634c <USB_ReadChInterrupts>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f003 0320 	and.w	r3, r3, #32
 8003ffc:	2b20      	cmp	r3, #32
 8003ffe:	f040 8082 	bne.w	8004106 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004002:	78fb      	ldrb	r3, [r7, #3]
 8004004:	015a      	lsls	r2, r3, #5
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	4413      	add	r3, r2
 800400a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800400e:	461a      	mov	r2, r3
 8004010:	2320      	movs	r3, #32
 8004012:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004014:	78fa      	ldrb	r2, [r7, #3]
 8004016:	6879      	ldr	r1, [r7, #4]
 8004018:	4613      	mov	r3, r2
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	1a9b      	subs	r3, r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	440b      	add	r3, r1
 8004022:	3319      	adds	r3, #25
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d124      	bne.n	8004074 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800402a:	78fa      	ldrb	r2, [r7, #3]
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	4613      	mov	r3, r2
 8004030:	011b      	lsls	r3, r3, #4
 8004032:	1a9b      	subs	r3, r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	440b      	add	r3, r1
 8004038:	3319      	adds	r3, #25
 800403a:	2200      	movs	r2, #0
 800403c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800403e:	78fa      	ldrb	r2, [r7, #3]
 8004040:	6879      	ldr	r1, [r7, #4]
 8004042:	4613      	mov	r3, r2
 8004044:	011b      	lsls	r3, r3, #4
 8004046:	1a9b      	subs	r3, r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	440b      	add	r3, r1
 800404c:	334c      	adds	r3, #76	@ 0x4c
 800404e:	2202      	movs	r2, #2
 8004050:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004052:	78fa      	ldrb	r2, [r7, #3]
 8004054:	6879      	ldr	r1, [r7, #4]
 8004056:	4613      	mov	r3, r2
 8004058:	011b      	lsls	r3, r3, #4
 800405a:	1a9b      	subs	r3, r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	440b      	add	r3, r1
 8004060:	334d      	adds	r3, #77	@ 0x4d
 8004062:	2203      	movs	r2, #3
 8004064:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	78fa      	ldrb	r2, [r7, #3]
 800406c:	4611      	mov	r1, r2
 800406e:	4618      	mov	r0, r3
 8004070:	f002 fade 	bl	8006630 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004074:	78fa      	ldrb	r2, [r7, #3]
 8004076:	6879      	ldr	r1, [r7, #4]
 8004078:	4613      	mov	r3, r2
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	1a9b      	subs	r3, r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	331a      	adds	r3, #26
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	2b01      	cmp	r3, #1
 8004088:	f040 8437 	bne.w	80048fa <HCD_HC_OUT_IRQHandler+0x978>
 800408c:	78fa      	ldrb	r2, [r7, #3]
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	4613      	mov	r3, r2
 8004092:	011b      	lsls	r3, r3, #4
 8004094:	1a9b      	subs	r3, r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	331b      	adds	r3, #27
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f040 842b 	bne.w	80048fa <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80040a4:	78fa      	ldrb	r2, [r7, #3]
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	4613      	mov	r3, r2
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	1a9b      	subs	r3, r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	440b      	add	r3, r1
 80040b2:	3326      	adds	r3, #38	@ 0x26
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d009      	beq.n	80040ce <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80040ba:	78fa      	ldrb	r2, [r7, #3]
 80040bc:	6879      	ldr	r1, [r7, #4]
 80040be:	4613      	mov	r3, r2
 80040c0:	011b      	lsls	r3, r3, #4
 80040c2:	1a9b      	subs	r3, r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	440b      	add	r3, r1
 80040c8:	331b      	adds	r3, #27
 80040ca:	2201      	movs	r2, #1
 80040cc:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80040ce:	78fa      	ldrb	r2, [r7, #3]
 80040d0:	6879      	ldr	r1, [r7, #4]
 80040d2:	4613      	mov	r3, r2
 80040d4:	011b      	lsls	r3, r3, #4
 80040d6:	1a9b      	subs	r3, r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	440b      	add	r3, r1
 80040dc:	334d      	adds	r3, #77	@ 0x4d
 80040de:	2203      	movs	r2, #3
 80040e0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	78fa      	ldrb	r2, [r7, #3]
 80040e8:	4611      	mov	r1, r2
 80040ea:	4618      	mov	r0, r3
 80040ec:	f002 faa0 	bl	8006630 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80040f0:	78fa      	ldrb	r2, [r7, #3]
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	4613      	mov	r3, r2
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	1a9b      	subs	r3, r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	440b      	add	r3, r1
 80040fe:	3344      	adds	r3, #68	@ 0x44
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	e3f9      	b.n	80048fa <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	78fa      	ldrb	r2, [r7, #3]
 800410c:	4611      	mov	r1, r2
 800410e:	4618      	mov	r0, r3
 8004110:	f002 f91c 	bl	800634c <USB_ReadChInterrupts>
 8004114:	4603      	mov	r3, r0
 8004116:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800411a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800411e:	d111      	bne.n	8004144 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004120:	78fb      	ldrb	r3, [r7, #3]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	4413      	add	r3, r2
 8004128:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800412c:	461a      	mov	r2, r3
 800412e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004132:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	78fa      	ldrb	r2, [r7, #3]
 800413a:	4611      	mov	r1, r2
 800413c:	4618      	mov	r0, r3
 800413e:	f002 fa77 	bl	8006630 <USB_HC_Halt>
 8004142:	e3da      	b.n	80048fa <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	78fa      	ldrb	r2, [r7, #3]
 800414a:	4611      	mov	r1, r2
 800414c:	4618      	mov	r0, r3
 800414e:	f002 f8fd 	bl	800634c <USB_ReadChInterrupts>
 8004152:	4603      	mov	r3, r0
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b01      	cmp	r3, #1
 800415a:	d168      	bne.n	800422e <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800415c:	78fa      	ldrb	r2, [r7, #3]
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	4613      	mov	r3, r2
 8004162:	011b      	lsls	r3, r3, #4
 8004164:	1a9b      	subs	r3, r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	440b      	add	r3, r1
 800416a:	3344      	adds	r3, #68	@ 0x44
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	78fa      	ldrb	r2, [r7, #3]
 8004176:	4611      	mov	r1, r2
 8004178:	4618      	mov	r0, r3
 800417a:	f002 f8e7 	bl	800634c <USB_ReadChInterrupts>
 800417e:	4603      	mov	r3, r0
 8004180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004184:	2b40      	cmp	r3, #64	@ 0x40
 8004186:	d112      	bne.n	80041ae <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004188:	78fa      	ldrb	r2, [r7, #3]
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	4613      	mov	r3, r2
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	1a9b      	subs	r3, r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	3319      	adds	r3, #25
 8004198:	2201      	movs	r2, #1
 800419a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800419c:	78fb      	ldrb	r3, [r7, #3]
 800419e:	015a      	lsls	r2, r3, #5
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041a8:	461a      	mov	r2, r3
 80041aa:	2340      	movs	r3, #64	@ 0x40
 80041ac:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80041ae:	78fa      	ldrb	r2, [r7, #3]
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	4613      	mov	r3, r2
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	1a9b      	subs	r3, r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	440b      	add	r3, r1
 80041bc:	331b      	adds	r3, #27
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d019      	beq.n	80041f8 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80041c4:	78fa      	ldrb	r2, [r7, #3]
 80041c6:	6879      	ldr	r1, [r7, #4]
 80041c8:	4613      	mov	r3, r2
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	1a9b      	subs	r3, r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	440b      	add	r3, r1
 80041d2:	331b      	adds	r3, #27
 80041d4:	2200      	movs	r2, #0
 80041d6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80041d8:	78fb      	ldrb	r3, [r7, #3]
 80041da:	015a      	lsls	r2, r3, #5
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	4413      	add	r3, r2
 80041e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	78fa      	ldrb	r2, [r7, #3]
 80041e8:	0151      	lsls	r1, r2, #5
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	440a      	add	r2, r1
 80041ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80041f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041f6:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80041f8:	78fb      	ldrb	r3, [r7, #3]
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004204:	461a      	mov	r2, r3
 8004206:	2301      	movs	r3, #1
 8004208:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800420a:	78fa      	ldrb	r2, [r7, #3]
 800420c:	6879      	ldr	r1, [r7, #4]
 800420e:	4613      	mov	r3, r2
 8004210:	011b      	lsls	r3, r3, #4
 8004212:	1a9b      	subs	r3, r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	440b      	add	r3, r1
 8004218:	334d      	adds	r3, #77	@ 0x4d
 800421a:	2201      	movs	r2, #1
 800421c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	78fa      	ldrb	r2, [r7, #3]
 8004224:	4611      	mov	r1, r2
 8004226:	4618      	mov	r0, r3
 8004228:	f002 fa02 	bl	8006630 <USB_HC_Halt>
 800422c:	e365      	b.n	80048fa <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	78fa      	ldrb	r2, [r7, #3]
 8004234:	4611      	mov	r1, r2
 8004236:	4618      	mov	r0, r3
 8004238:	f002 f888 	bl	800634c <USB_ReadChInterrupts>
 800423c:	4603      	mov	r3, r0
 800423e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004242:	2b40      	cmp	r3, #64	@ 0x40
 8004244:	d139      	bne.n	80042ba <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004246:	78fa      	ldrb	r2, [r7, #3]
 8004248:	6879      	ldr	r1, [r7, #4]
 800424a:	4613      	mov	r3, r2
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	1a9b      	subs	r3, r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	440b      	add	r3, r1
 8004254:	334d      	adds	r3, #77	@ 0x4d
 8004256:	2205      	movs	r2, #5
 8004258:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800425a:	78fa      	ldrb	r2, [r7, #3]
 800425c:	6879      	ldr	r1, [r7, #4]
 800425e:	4613      	mov	r3, r2
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	1a9b      	subs	r3, r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	440b      	add	r3, r1
 8004268:	331a      	adds	r3, #26
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d109      	bne.n	8004284 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004270:	78fa      	ldrb	r2, [r7, #3]
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	4613      	mov	r3, r2
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	1a9b      	subs	r3, r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	440b      	add	r3, r1
 800427e:	3319      	adds	r3, #25
 8004280:	2201      	movs	r2, #1
 8004282:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004284:	78fa      	ldrb	r2, [r7, #3]
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	4613      	mov	r3, r2
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	1a9b      	subs	r3, r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	440b      	add	r3, r1
 8004292:	3344      	adds	r3, #68	@ 0x44
 8004294:	2200      	movs	r2, #0
 8004296:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	78fa      	ldrb	r2, [r7, #3]
 800429e:	4611      	mov	r1, r2
 80042a0:	4618      	mov	r0, r3
 80042a2:	f002 f9c5 	bl	8006630 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80042a6:	78fb      	ldrb	r3, [r7, #3]
 80042a8:	015a      	lsls	r2, r3, #5
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	4413      	add	r3, r2
 80042ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042b2:	461a      	mov	r2, r3
 80042b4:	2340      	movs	r3, #64	@ 0x40
 80042b6:	6093      	str	r3, [r2, #8]
 80042b8:	e31f      	b.n	80048fa <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	78fa      	ldrb	r2, [r7, #3]
 80042c0:	4611      	mov	r1, r2
 80042c2:	4618      	mov	r0, r3
 80042c4:	f002 f842 	bl	800634c <USB_ReadChInterrupts>
 80042c8:	4603      	mov	r3, r0
 80042ca:	f003 0308 	and.w	r3, r3, #8
 80042ce:	2b08      	cmp	r3, #8
 80042d0:	d11a      	bne.n	8004308 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80042d2:	78fb      	ldrb	r3, [r7, #3]
 80042d4:	015a      	lsls	r2, r3, #5
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	4413      	add	r3, r2
 80042da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042de:	461a      	mov	r2, r3
 80042e0:	2308      	movs	r3, #8
 80042e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80042e4:	78fa      	ldrb	r2, [r7, #3]
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	4613      	mov	r3, r2
 80042ea:	011b      	lsls	r3, r3, #4
 80042ec:	1a9b      	subs	r3, r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	334d      	adds	r3, #77	@ 0x4d
 80042f4:	2206      	movs	r2, #6
 80042f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	78fa      	ldrb	r2, [r7, #3]
 80042fe:	4611      	mov	r1, r2
 8004300:	4618      	mov	r0, r3
 8004302:	f002 f995 	bl	8006630 <USB_HC_Halt>
 8004306:	e2f8      	b.n	80048fa <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	78fa      	ldrb	r2, [r7, #3]
 800430e:	4611      	mov	r1, r2
 8004310:	4618      	mov	r0, r3
 8004312:	f002 f81b 	bl	800634c <USB_ReadChInterrupts>
 8004316:	4603      	mov	r3, r0
 8004318:	f003 0310 	and.w	r3, r3, #16
 800431c:	2b10      	cmp	r3, #16
 800431e:	d144      	bne.n	80043aa <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004320:	78fa      	ldrb	r2, [r7, #3]
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	4613      	mov	r3, r2
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	1a9b      	subs	r3, r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	440b      	add	r3, r1
 800432e:	3344      	adds	r3, #68	@ 0x44
 8004330:	2200      	movs	r2, #0
 8004332:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004334:	78fa      	ldrb	r2, [r7, #3]
 8004336:	6879      	ldr	r1, [r7, #4]
 8004338:	4613      	mov	r3, r2
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	1a9b      	subs	r3, r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	440b      	add	r3, r1
 8004342:	334d      	adds	r3, #77	@ 0x4d
 8004344:	2204      	movs	r2, #4
 8004346:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004348:	78fa      	ldrb	r2, [r7, #3]
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	4613      	mov	r3, r2
 800434e:	011b      	lsls	r3, r3, #4
 8004350:	1a9b      	subs	r3, r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	3319      	adds	r3, #25
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d114      	bne.n	8004388 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800435e:	78fa      	ldrb	r2, [r7, #3]
 8004360:	6879      	ldr	r1, [r7, #4]
 8004362:	4613      	mov	r3, r2
 8004364:	011b      	lsls	r3, r3, #4
 8004366:	1a9b      	subs	r3, r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	440b      	add	r3, r1
 800436c:	3318      	adds	r3, #24
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d109      	bne.n	8004388 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004374:	78fa      	ldrb	r2, [r7, #3]
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	4613      	mov	r3, r2
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	1a9b      	subs	r3, r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	440b      	add	r3, r1
 8004382:	3319      	adds	r3, #25
 8004384:	2201      	movs	r2, #1
 8004386:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	78fa      	ldrb	r2, [r7, #3]
 800438e:	4611      	mov	r1, r2
 8004390:	4618      	mov	r0, r3
 8004392:	f002 f94d 	bl	8006630 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004396:	78fb      	ldrb	r3, [r7, #3]
 8004398:	015a      	lsls	r2, r3, #5
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	4413      	add	r3, r2
 800439e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043a2:	461a      	mov	r2, r3
 80043a4:	2310      	movs	r3, #16
 80043a6:	6093      	str	r3, [r2, #8]
 80043a8:	e2a7      	b.n	80048fa <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	78fa      	ldrb	r2, [r7, #3]
 80043b0:	4611      	mov	r1, r2
 80043b2:	4618      	mov	r0, r3
 80043b4:	f001 ffca 	bl	800634c <USB_ReadChInterrupts>
 80043b8:	4603      	mov	r3, r0
 80043ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043be:	2b80      	cmp	r3, #128	@ 0x80
 80043c0:	f040 8083 	bne.w	80044ca <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	799b      	ldrb	r3, [r3, #6]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d111      	bne.n	80043f0 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80043cc:	78fa      	ldrb	r2, [r7, #3]
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	4613      	mov	r3, r2
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	1a9b      	subs	r3, r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	440b      	add	r3, r1
 80043da:	334d      	adds	r3, #77	@ 0x4d
 80043dc:	2207      	movs	r2, #7
 80043de:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	78fa      	ldrb	r2, [r7, #3]
 80043e6:	4611      	mov	r1, r2
 80043e8:	4618      	mov	r0, r3
 80043ea:	f002 f921 	bl	8006630 <USB_HC_Halt>
 80043ee:	e062      	b.n	80044b6 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80043f0:	78fa      	ldrb	r2, [r7, #3]
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	4613      	mov	r3, r2
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	1a9b      	subs	r3, r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	440b      	add	r3, r1
 80043fe:	3344      	adds	r3, #68	@ 0x44
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	1c59      	adds	r1, r3, #1
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	4613      	mov	r3, r2
 8004408:	011b      	lsls	r3, r3, #4
 800440a:	1a9b      	subs	r3, r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4403      	add	r3, r0
 8004410:	3344      	adds	r3, #68	@ 0x44
 8004412:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004414:	78fa      	ldrb	r2, [r7, #3]
 8004416:	6879      	ldr	r1, [r7, #4]
 8004418:	4613      	mov	r3, r2
 800441a:	011b      	lsls	r3, r3, #4
 800441c:	1a9b      	subs	r3, r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	440b      	add	r3, r1
 8004422:	3344      	adds	r3, #68	@ 0x44
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b02      	cmp	r3, #2
 8004428:	d922      	bls.n	8004470 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800442a:	78fa      	ldrb	r2, [r7, #3]
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	4613      	mov	r3, r2
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	1a9b      	subs	r3, r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	440b      	add	r3, r1
 8004438:	3344      	adds	r3, #68	@ 0x44
 800443a:	2200      	movs	r2, #0
 800443c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800443e:	78fa      	ldrb	r2, [r7, #3]
 8004440:	6879      	ldr	r1, [r7, #4]
 8004442:	4613      	mov	r3, r2
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	1a9b      	subs	r3, r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	440b      	add	r3, r1
 800444c:	334c      	adds	r3, #76	@ 0x4c
 800444e:	2204      	movs	r2, #4
 8004450:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004452:	78fa      	ldrb	r2, [r7, #3]
 8004454:	6879      	ldr	r1, [r7, #4]
 8004456:	4613      	mov	r3, r2
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	1a9b      	subs	r3, r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	440b      	add	r3, r1
 8004460:	334c      	adds	r3, #76	@ 0x4c
 8004462:	781a      	ldrb	r2, [r3, #0]
 8004464:	78fb      	ldrb	r3, [r7, #3]
 8004466:	4619      	mov	r1, r3
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f7fe ff13 	bl	8003294 <HAL_HCD_HC_NotifyURBChange_Callback>
 800446e:	e022      	b.n	80044b6 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004470:	78fa      	ldrb	r2, [r7, #3]
 8004472:	6879      	ldr	r1, [r7, #4]
 8004474:	4613      	mov	r3, r2
 8004476:	011b      	lsls	r3, r3, #4
 8004478:	1a9b      	subs	r3, r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	440b      	add	r3, r1
 800447e:	334c      	adds	r3, #76	@ 0x4c
 8004480:	2202      	movs	r2, #2
 8004482:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004484:	78fb      	ldrb	r3, [r7, #3]
 8004486:	015a      	lsls	r2, r3, #5
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	4413      	add	r3, r2
 800448c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800449a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80044a2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80044a4:	78fb      	ldrb	r3, [r7, #3]
 80044a6:	015a      	lsls	r2, r3, #5
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	4413      	add	r3, r2
 80044ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044b0:	461a      	mov	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80044b6:	78fb      	ldrb	r3, [r7, #3]
 80044b8:	015a      	lsls	r2, r3, #5
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	4413      	add	r3, r2
 80044be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044c2:	461a      	mov	r2, r3
 80044c4:	2380      	movs	r3, #128	@ 0x80
 80044c6:	6093      	str	r3, [r2, #8]
 80044c8:	e217      	b.n	80048fa <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	78fa      	ldrb	r2, [r7, #3]
 80044d0:	4611      	mov	r1, r2
 80044d2:	4618      	mov	r0, r3
 80044d4:	f001 ff3a 	bl	800634c <USB_ReadChInterrupts>
 80044d8:	4603      	mov	r3, r0
 80044da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044e2:	d11b      	bne.n	800451c <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80044e4:	78fa      	ldrb	r2, [r7, #3]
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	4613      	mov	r3, r2
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	1a9b      	subs	r3, r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	334d      	adds	r3, #77	@ 0x4d
 80044f4:	2209      	movs	r2, #9
 80044f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	78fa      	ldrb	r2, [r7, #3]
 80044fe:	4611      	mov	r1, r2
 8004500:	4618      	mov	r0, r3
 8004502:	f002 f895 	bl	8006630 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004506:	78fb      	ldrb	r3, [r7, #3]
 8004508:	015a      	lsls	r2, r3, #5
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	4413      	add	r3, r2
 800450e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004512:	461a      	mov	r2, r3
 8004514:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004518:	6093      	str	r3, [r2, #8]
 800451a:	e1ee      	b.n	80048fa <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	78fa      	ldrb	r2, [r7, #3]
 8004522:	4611      	mov	r1, r2
 8004524:	4618      	mov	r0, r3
 8004526:	f001 ff11 	bl	800634c <USB_ReadChInterrupts>
 800452a:	4603      	mov	r3, r0
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b02      	cmp	r3, #2
 8004532:	f040 81df 	bne.w	80048f4 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004536:	78fb      	ldrb	r3, [r7, #3]
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	4413      	add	r3, r2
 800453e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004542:	461a      	mov	r2, r3
 8004544:	2302      	movs	r3, #2
 8004546:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004548:	78fa      	ldrb	r2, [r7, #3]
 800454a:	6879      	ldr	r1, [r7, #4]
 800454c:	4613      	mov	r3, r2
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	1a9b      	subs	r3, r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	440b      	add	r3, r1
 8004556:	334d      	adds	r3, #77	@ 0x4d
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	2b01      	cmp	r3, #1
 800455c:	f040 8093 	bne.w	8004686 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004560:	78fa      	ldrb	r2, [r7, #3]
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	4613      	mov	r3, r2
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	1a9b      	subs	r3, r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	440b      	add	r3, r1
 800456e:	334d      	adds	r3, #77	@ 0x4d
 8004570:	2202      	movs	r2, #2
 8004572:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004574:	78fa      	ldrb	r2, [r7, #3]
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	4613      	mov	r3, r2
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	1a9b      	subs	r3, r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	440b      	add	r3, r1
 8004582:	334c      	adds	r3, #76	@ 0x4c
 8004584:	2201      	movs	r2, #1
 8004586:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004588:	78fa      	ldrb	r2, [r7, #3]
 800458a:	6879      	ldr	r1, [r7, #4]
 800458c:	4613      	mov	r3, r2
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	1a9b      	subs	r3, r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	440b      	add	r3, r1
 8004596:	3326      	adds	r3, #38	@ 0x26
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2b02      	cmp	r3, #2
 800459c:	d00b      	beq.n	80045b6 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800459e:	78fa      	ldrb	r2, [r7, #3]
 80045a0:	6879      	ldr	r1, [r7, #4]
 80045a2:	4613      	mov	r3, r2
 80045a4:	011b      	lsls	r3, r3, #4
 80045a6:	1a9b      	subs	r3, r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	440b      	add	r3, r1
 80045ac:	3326      	adds	r3, #38	@ 0x26
 80045ae:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80045b0:	2b03      	cmp	r3, #3
 80045b2:	f040 8190 	bne.w	80048d6 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	799b      	ldrb	r3, [r3, #6]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d115      	bne.n	80045ea <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80045be:	78fa      	ldrb	r2, [r7, #3]
 80045c0:	6879      	ldr	r1, [r7, #4]
 80045c2:	4613      	mov	r3, r2
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	1a9b      	subs	r3, r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	440b      	add	r3, r1
 80045cc:	333d      	adds	r3, #61	@ 0x3d
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	78fa      	ldrb	r2, [r7, #3]
 80045d2:	f083 0301 	eor.w	r3, r3, #1
 80045d6:	b2d8      	uxtb	r0, r3
 80045d8:	6879      	ldr	r1, [r7, #4]
 80045da:	4613      	mov	r3, r2
 80045dc:	011b      	lsls	r3, r3, #4
 80045de:	1a9b      	subs	r3, r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	440b      	add	r3, r1
 80045e4:	333d      	adds	r3, #61	@ 0x3d
 80045e6:	4602      	mov	r2, r0
 80045e8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	799b      	ldrb	r3, [r3, #6]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	f040 8171 	bne.w	80048d6 <HCD_HC_OUT_IRQHandler+0x954>
 80045f4:	78fa      	ldrb	r2, [r7, #3]
 80045f6:	6879      	ldr	r1, [r7, #4]
 80045f8:	4613      	mov	r3, r2
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	1a9b      	subs	r3, r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	440b      	add	r3, r1
 8004602:	3334      	adds	r3, #52	@ 0x34
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 8165 	beq.w	80048d6 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800460c:	78fa      	ldrb	r2, [r7, #3]
 800460e:	6879      	ldr	r1, [r7, #4]
 8004610:	4613      	mov	r3, r2
 8004612:	011b      	lsls	r3, r3, #4
 8004614:	1a9b      	subs	r3, r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	440b      	add	r3, r1
 800461a:	3334      	adds	r3, #52	@ 0x34
 800461c:	6819      	ldr	r1, [r3, #0]
 800461e:	78fa      	ldrb	r2, [r7, #3]
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	4613      	mov	r3, r2
 8004624:	011b      	lsls	r3, r3, #4
 8004626:	1a9b      	subs	r3, r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4403      	add	r3, r0
 800462c:	3328      	adds	r3, #40	@ 0x28
 800462e:	881b      	ldrh	r3, [r3, #0]
 8004630:	440b      	add	r3, r1
 8004632:	1e59      	subs	r1, r3, #1
 8004634:	78fa      	ldrb	r2, [r7, #3]
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	4613      	mov	r3, r2
 800463a:	011b      	lsls	r3, r3, #4
 800463c:	1a9b      	subs	r3, r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4403      	add	r3, r0
 8004642:	3328      	adds	r3, #40	@ 0x28
 8004644:	881b      	ldrh	r3, [r3, #0]
 8004646:	fbb1 f3f3 	udiv	r3, r1, r3
 800464a:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 813f 	beq.w	80048d6 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004658:	78fa      	ldrb	r2, [r7, #3]
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	4613      	mov	r3, r2
 800465e:	011b      	lsls	r3, r3, #4
 8004660:	1a9b      	subs	r3, r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	440b      	add	r3, r1
 8004666:	333d      	adds	r3, #61	@ 0x3d
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	78fa      	ldrb	r2, [r7, #3]
 800466c:	f083 0301 	eor.w	r3, r3, #1
 8004670:	b2d8      	uxtb	r0, r3
 8004672:	6879      	ldr	r1, [r7, #4]
 8004674:	4613      	mov	r3, r2
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	1a9b      	subs	r3, r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	440b      	add	r3, r1
 800467e:	333d      	adds	r3, #61	@ 0x3d
 8004680:	4602      	mov	r2, r0
 8004682:	701a      	strb	r2, [r3, #0]
 8004684:	e127      	b.n	80048d6 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004686:	78fa      	ldrb	r2, [r7, #3]
 8004688:	6879      	ldr	r1, [r7, #4]
 800468a:	4613      	mov	r3, r2
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	1a9b      	subs	r3, r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	440b      	add	r3, r1
 8004694:	334d      	adds	r3, #77	@ 0x4d
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	2b03      	cmp	r3, #3
 800469a:	d120      	bne.n	80046de <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800469c:	78fa      	ldrb	r2, [r7, #3]
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	4613      	mov	r3, r2
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	1a9b      	subs	r3, r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	334d      	adds	r3, #77	@ 0x4d
 80046ac:	2202      	movs	r2, #2
 80046ae:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80046b0:	78fa      	ldrb	r2, [r7, #3]
 80046b2:	6879      	ldr	r1, [r7, #4]
 80046b4:	4613      	mov	r3, r2
 80046b6:	011b      	lsls	r3, r3, #4
 80046b8:	1a9b      	subs	r3, r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	440b      	add	r3, r1
 80046be:	331b      	adds	r3, #27
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	f040 8107 	bne.w	80048d6 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80046c8:	78fa      	ldrb	r2, [r7, #3]
 80046ca:	6879      	ldr	r1, [r7, #4]
 80046cc:	4613      	mov	r3, r2
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	1a9b      	subs	r3, r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	440b      	add	r3, r1
 80046d6:	334c      	adds	r3, #76	@ 0x4c
 80046d8:	2202      	movs	r2, #2
 80046da:	701a      	strb	r2, [r3, #0]
 80046dc:	e0fb      	b.n	80048d6 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80046de:	78fa      	ldrb	r2, [r7, #3]
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	4613      	mov	r3, r2
 80046e4:	011b      	lsls	r3, r3, #4
 80046e6:	1a9b      	subs	r3, r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	440b      	add	r3, r1
 80046ec:	334d      	adds	r3, #77	@ 0x4d
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d13a      	bne.n	800476a <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80046f4:	78fa      	ldrb	r2, [r7, #3]
 80046f6:	6879      	ldr	r1, [r7, #4]
 80046f8:	4613      	mov	r3, r2
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	1a9b      	subs	r3, r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	334d      	adds	r3, #77	@ 0x4d
 8004704:	2202      	movs	r2, #2
 8004706:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004708:	78fa      	ldrb	r2, [r7, #3]
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	4613      	mov	r3, r2
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	1a9b      	subs	r3, r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	334c      	adds	r3, #76	@ 0x4c
 8004718:	2202      	movs	r2, #2
 800471a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800471c:	78fa      	ldrb	r2, [r7, #3]
 800471e:	6879      	ldr	r1, [r7, #4]
 8004720:	4613      	mov	r3, r2
 8004722:	011b      	lsls	r3, r3, #4
 8004724:	1a9b      	subs	r3, r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	440b      	add	r3, r1
 800472a:	331b      	adds	r3, #27
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	2b01      	cmp	r3, #1
 8004730:	f040 80d1 	bne.w	80048d6 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004734:	78fa      	ldrb	r2, [r7, #3]
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	4613      	mov	r3, r2
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	1a9b      	subs	r3, r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	440b      	add	r3, r1
 8004742:	331b      	adds	r3, #27
 8004744:	2200      	movs	r2, #0
 8004746:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004748:	78fb      	ldrb	r3, [r7, #3]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	4413      	add	r3, r2
 8004750:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	78fa      	ldrb	r2, [r7, #3]
 8004758:	0151      	lsls	r1, r2, #5
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	440a      	add	r2, r1
 800475e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004762:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004766:	6053      	str	r3, [r2, #4]
 8004768:	e0b5      	b.n	80048d6 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800476a:	78fa      	ldrb	r2, [r7, #3]
 800476c:	6879      	ldr	r1, [r7, #4]
 800476e:	4613      	mov	r3, r2
 8004770:	011b      	lsls	r3, r3, #4
 8004772:	1a9b      	subs	r3, r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	440b      	add	r3, r1
 8004778:	334d      	adds	r3, #77	@ 0x4d
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	2b05      	cmp	r3, #5
 800477e:	d114      	bne.n	80047aa <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004780:	78fa      	ldrb	r2, [r7, #3]
 8004782:	6879      	ldr	r1, [r7, #4]
 8004784:	4613      	mov	r3, r2
 8004786:	011b      	lsls	r3, r3, #4
 8004788:	1a9b      	subs	r3, r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	440b      	add	r3, r1
 800478e:	334d      	adds	r3, #77	@ 0x4d
 8004790:	2202      	movs	r2, #2
 8004792:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004794:	78fa      	ldrb	r2, [r7, #3]
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	4613      	mov	r3, r2
 800479a:	011b      	lsls	r3, r3, #4
 800479c:	1a9b      	subs	r3, r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	440b      	add	r3, r1
 80047a2:	334c      	adds	r3, #76	@ 0x4c
 80047a4:	2202      	movs	r2, #2
 80047a6:	701a      	strb	r2, [r3, #0]
 80047a8:	e095      	b.n	80048d6 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80047aa:	78fa      	ldrb	r2, [r7, #3]
 80047ac:	6879      	ldr	r1, [r7, #4]
 80047ae:	4613      	mov	r3, r2
 80047b0:	011b      	lsls	r3, r3, #4
 80047b2:	1a9b      	subs	r3, r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	440b      	add	r3, r1
 80047b8:	334d      	adds	r3, #77	@ 0x4d
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	2b06      	cmp	r3, #6
 80047be:	d114      	bne.n	80047ea <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80047c0:	78fa      	ldrb	r2, [r7, #3]
 80047c2:	6879      	ldr	r1, [r7, #4]
 80047c4:	4613      	mov	r3, r2
 80047c6:	011b      	lsls	r3, r3, #4
 80047c8:	1a9b      	subs	r3, r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	440b      	add	r3, r1
 80047ce:	334d      	adds	r3, #77	@ 0x4d
 80047d0:	2202      	movs	r2, #2
 80047d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80047d4:	78fa      	ldrb	r2, [r7, #3]
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	4613      	mov	r3, r2
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	1a9b      	subs	r3, r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	440b      	add	r3, r1
 80047e2:	334c      	adds	r3, #76	@ 0x4c
 80047e4:	2205      	movs	r2, #5
 80047e6:	701a      	strb	r2, [r3, #0]
 80047e8:	e075      	b.n	80048d6 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80047ea:	78fa      	ldrb	r2, [r7, #3]
 80047ec:	6879      	ldr	r1, [r7, #4]
 80047ee:	4613      	mov	r3, r2
 80047f0:	011b      	lsls	r3, r3, #4
 80047f2:	1a9b      	subs	r3, r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	440b      	add	r3, r1
 80047f8:	334d      	adds	r3, #77	@ 0x4d
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	2b07      	cmp	r3, #7
 80047fe:	d00a      	beq.n	8004816 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004800:	78fa      	ldrb	r2, [r7, #3]
 8004802:	6879      	ldr	r1, [r7, #4]
 8004804:	4613      	mov	r3, r2
 8004806:	011b      	lsls	r3, r3, #4
 8004808:	1a9b      	subs	r3, r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	440b      	add	r3, r1
 800480e:	334d      	adds	r3, #77	@ 0x4d
 8004810:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004812:	2b09      	cmp	r3, #9
 8004814:	d170      	bne.n	80048f8 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004816:	78fa      	ldrb	r2, [r7, #3]
 8004818:	6879      	ldr	r1, [r7, #4]
 800481a:	4613      	mov	r3, r2
 800481c:	011b      	lsls	r3, r3, #4
 800481e:	1a9b      	subs	r3, r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	440b      	add	r3, r1
 8004824:	334d      	adds	r3, #77	@ 0x4d
 8004826:	2202      	movs	r2, #2
 8004828:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800482a:	78fa      	ldrb	r2, [r7, #3]
 800482c:	6879      	ldr	r1, [r7, #4]
 800482e:	4613      	mov	r3, r2
 8004830:	011b      	lsls	r3, r3, #4
 8004832:	1a9b      	subs	r3, r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	440b      	add	r3, r1
 8004838:	3344      	adds	r3, #68	@ 0x44
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	1c59      	adds	r1, r3, #1
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	4613      	mov	r3, r2
 8004842:	011b      	lsls	r3, r3, #4
 8004844:	1a9b      	subs	r3, r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4403      	add	r3, r0
 800484a:	3344      	adds	r3, #68	@ 0x44
 800484c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800484e:	78fa      	ldrb	r2, [r7, #3]
 8004850:	6879      	ldr	r1, [r7, #4]
 8004852:	4613      	mov	r3, r2
 8004854:	011b      	lsls	r3, r3, #4
 8004856:	1a9b      	subs	r3, r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	440b      	add	r3, r1
 800485c:	3344      	adds	r3, #68	@ 0x44
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b02      	cmp	r3, #2
 8004862:	d914      	bls.n	800488e <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004864:	78fa      	ldrb	r2, [r7, #3]
 8004866:	6879      	ldr	r1, [r7, #4]
 8004868:	4613      	mov	r3, r2
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	1a9b      	subs	r3, r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	440b      	add	r3, r1
 8004872:	3344      	adds	r3, #68	@ 0x44
 8004874:	2200      	movs	r2, #0
 8004876:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004878:	78fa      	ldrb	r2, [r7, #3]
 800487a:	6879      	ldr	r1, [r7, #4]
 800487c:	4613      	mov	r3, r2
 800487e:	011b      	lsls	r3, r3, #4
 8004880:	1a9b      	subs	r3, r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	440b      	add	r3, r1
 8004886:	334c      	adds	r3, #76	@ 0x4c
 8004888:	2204      	movs	r2, #4
 800488a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800488c:	e022      	b.n	80048d4 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800488e:	78fa      	ldrb	r2, [r7, #3]
 8004890:	6879      	ldr	r1, [r7, #4]
 8004892:	4613      	mov	r3, r2
 8004894:	011b      	lsls	r3, r3, #4
 8004896:	1a9b      	subs	r3, r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	440b      	add	r3, r1
 800489c:	334c      	adds	r3, #76	@ 0x4c
 800489e:	2202      	movs	r2, #2
 80048a0:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80048a2:	78fb      	ldrb	r3, [r7, #3]
 80048a4:	015a      	lsls	r2, r3, #5
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	4413      	add	r3, r2
 80048aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80048b8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80048c0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80048c2:	78fb      	ldrb	r3, [r7, #3]
 80048c4:	015a      	lsls	r2, r3, #5
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	4413      	add	r3, r2
 80048ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048ce:	461a      	mov	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80048d4:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80048d6:	78fa      	ldrb	r2, [r7, #3]
 80048d8:	6879      	ldr	r1, [r7, #4]
 80048da:	4613      	mov	r3, r2
 80048dc:	011b      	lsls	r3, r3, #4
 80048de:	1a9b      	subs	r3, r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	440b      	add	r3, r1
 80048e4:	334c      	adds	r3, #76	@ 0x4c
 80048e6:	781a      	ldrb	r2, [r3, #0]
 80048e8:	78fb      	ldrb	r3, [r7, #3]
 80048ea:	4619      	mov	r1, r3
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f7fe fcd1 	bl	8003294 <HAL_HCD_HC_NotifyURBChange_Callback>
 80048f2:	e002      	b.n	80048fa <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80048f4:	bf00      	nop
 80048f6:	e000      	b.n	80048fa <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80048f8:	bf00      	nop
  }
}
 80048fa:	3718      	adds	r7, #24
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b08a      	sub	sp, #40	@ 0x28
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800490e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004910:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	f003 030f 	and.w	r3, r3, #15
 8004920:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	0c5b      	lsrs	r3, r3, #17
 8004926:	f003 030f 	and.w	r3, r3, #15
 800492a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	091b      	lsrs	r3, r3, #4
 8004930:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004934:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	2b02      	cmp	r3, #2
 800493a:	d004      	beq.n	8004946 <HCD_RXQLVL_IRQHandler+0x46>
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	2b05      	cmp	r3, #5
 8004940:	f000 80b6 	beq.w	8004ab0 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004944:	e0b7      	b.n	8004ab6 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 80b3 	beq.w	8004ab4 <HCD_RXQLVL_IRQHandler+0x1b4>
 800494e:	6879      	ldr	r1, [r7, #4]
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	4613      	mov	r3, r2
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	1a9b      	subs	r3, r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	440b      	add	r3, r1
 800495c:	332c      	adds	r3, #44	@ 0x2c
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 80a7 	beq.w	8004ab4 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004966:	6879      	ldr	r1, [r7, #4]
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	4613      	mov	r3, r2
 800496c:	011b      	lsls	r3, r3, #4
 800496e:	1a9b      	subs	r3, r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	440b      	add	r3, r1
 8004974:	3338      	adds	r3, #56	@ 0x38
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	18d1      	adds	r1, r2, r3
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	4613      	mov	r3, r2
 8004982:	011b      	lsls	r3, r3, #4
 8004984:	1a9b      	subs	r3, r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4403      	add	r3, r0
 800498a:	3334      	adds	r3, #52	@ 0x34
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4299      	cmp	r1, r3
 8004990:	f200 8083 	bhi.w	8004a9a <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6818      	ldr	r0, [r3, #0]
 8004998:	6879      	ldr	r1, [r7, #4]
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	4613      	mov	r3, r2
 800499e:	011b      	lsls	r3, r3, #4
 80049a0:	1a9b      	subs	r3, r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	440b      	add	r3, r1
 80049a6:	332c      	adds	r3, #44	@ 0x2c
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	b292      	uxth	r2, r2
 80049ae:	4619      	mov	r1, r3
 80049b0:	f001 fc61 	bl	8006276 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80049b4:	6879      	ldr	r1, [r7, #4]
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	4613      	mov	r3, r2
 80049ba:	011b      	lsls	r3, r3, #4
 80049bc:	1a9b      	subs	r3, r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	440b      	add	r3, r1
 80049c2:	332c      	adds	r3, #44	@ 0x2c
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	18d1      	adds	r1, r2, r3
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	4613      	mov	r3, r2
 80049d0:	011b      	lsls	r3, r3, #4
 80049d2:	1a9b      	subs	r3, r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4403      	add	r3, r0
 80049d8:	332c      	adds	r3, #44	@ 0x2c
 80049da:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80049dc:	6879      	ldr	r1, [r7, #4]
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	4613      	mov	r3, r2
 80049e2:	011b      	lsls	r3, r3, #4
 80049e4:	1a9b      	subs	r3, r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	440b      	add	r3, r1
 80049ea:	3338      	adds	r3, #56	@ 0x38
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	18d1      	adds	r1, r2, r3
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	4613      	mov	r3, r2
 80049f8:	011b      	lsls	r3, r3, #4
 80049fa:	1a9b      	subs	r3, r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4403      	add	r3, r0
 8004a00:	3338      	adds	r3, #56	@ 0x38
 8004a02:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	015a      	lsls	r2, r3, #5
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	0cdb      	lsrs	r3, r3, #19
 8004a14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a18:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004a1a:	6879      	ldr	r1, [r7, #4]
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	011b      	lsls	r3, r3, #4
 8004a22:	1a9b      	subs	r3, r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	440b      	add	r3, r1
 8004a28:	3328      	adds	r3, #40	@ 0x28
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d13f      	bne.n	8004ab4 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d03c      	beq.n	8004ab4 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	015a      	lsls	r2, r3, #5
 8004a3e:	6a3b      	ldr	r3, [r7, #32]
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004a50:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004a58:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	015a      	lsls	r2, r3, #5
 8004a5e:	6a3b      	ldr	r3, [r7, #32]
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a66:	461a      	mov	r2, r3
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004a6c:	6879      	ldr	r1, [r7, #4]
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	4613      	mov	r3, r2
 8004a72:	011b      	lsls	r3, r3, #4
 8004a74:	1a9b      	subs	r3, r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	440b      	add	r3, r1
 8004a7a:	333c      	adds	r3, #60	@ 0x3c
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	f083 0301 	eor.w	r3, r3, #1
 8004a82:	b2d8      	uxtb	r0, r3
 8004a84:	6879      	ldr	r1, [r7, #4]
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	011b      	lsls	r3, r3, #4
 8004a8c:	1a9b      	subs	r3, r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	440b      	add	r3, r1
 8004a92:	333c      	adds	r3, #60	@ 0x3c
 8004a94:	4602      	mov	r2, r0
 8004a96:	701a      	strb	r2, [r3, #0]
      break;
 8004a98:	e00c      	b.n	8004ab4 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004a9a:	6879      	ldr	r1, [r7, #4]
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	011b      	lsls	r3, r3, #4
 8004aa2:	1a9b      	subs	r3, r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	440b      	add	r3, r1
 8004aa8:	334c      	adds	r3, #76	@ 0x4c
 8004aaa:	2204      	movs	r2, #4
 8004aac:	701a      	strb	r2, [r3, #0]
      break;
 8004aae:	e001      	b.n	8004ab4 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004ab0:	bf00      	nop
 8004ab2:	e000      	b.n	8004ab6 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004ab4:	bf00      	nop
  }
}
 8004ab6:	bf00      	nop
 8004ab8:	3728      	adds	r7, #40	@ 0x28
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b086      	sub	sp, #24
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004aea:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d10b      	bne.n	8004b0e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d102      	bne.n	8004b06 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7fe fb9f 	bl	8003244 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	f043 0302 	orr.w	r3, r3, #2
 8004b0c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f003 0308 	and.w	r3, r3, #8
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d132      	bne.n	8004b7e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f043 0308 	orr.w	r3, r3, #8
 8004b1e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f003 0304 	and.w	r3, r3, #4
 8004b26:	2b04      	cmp	r3, #4
 8004b28:	d126      	bne.n	8004b78 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	7a5b      	ldrb	r3, [r3, #9]
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d113      	bne.n	8004b5a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004b38:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b3c:	d106      	bne.n	8004b4c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2102      	movs	r1, #2
 8004b44:	4618      	mov	r0, r3
 8004b46:	f001 fd25 	bl	8006594 <USB_InitFSLSPClkSel>
 8004b4a:	e011      	b.n	8004b70 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2101      	movs	r1, #1
 8004b52:	4618      	mov	r0, r3
 8004b54:	f001 fd1e 	bl	8006594 <USB_InitFSLSPClkSel>
 8004b58:	e00a      	b.n	8004b70 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	79db      	ldrb	r3, [r3, #7]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d106      	bne.n	8004b70 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b68:	461a      	mov	r2, r3
 8004b6a:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004b6e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f7fe fb7b 	bl	800326c <HAL_HCD_PortEnabled_Callback>
 8004b76:	e002      	b.n	8004b7e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f7fe fb81 	bl	8003280 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f003 0320 	and.w	r3, r3, #32
 8004b84:	2b20      	cmp	r3, #32
 8004b86:	d103      	bne.n	8004b90 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f043 0320 	orr.w	r3, r3, #32
 8004b8e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004b96:	461a      	mov	r2, r3
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	6013      	str	r3, [r2, #0]
}
 8004b9c:	bf00      	nop
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e12b      	b.n	8004e0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d106      	bne.n	8004bd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7fc ffc0 	bl	8001b50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2224      	movs	r2, #36	@ 0x24
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0201 	bic.w	r2, r2, #1
 8004be6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004bf6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c08:	f000 fd80 	bl	800570c <HAL_RCC_GetPCLK1Freq>
 8004c0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	4a81      	ldr	r2, [pc, #516]	@ (8004e18 <HAL_I2C_Init+0x274>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d807      	bhi.n	8004c28 <HAL_I2C_Init+0x84>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	4a80      	ldr	r2, [pc, #512]	@ (8004e1c <HAL_I2C_Init+0x278>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	bf94      	ite	ls
 8004c20:	2301      	movls	r3, #1
 8004c22:	2300      	movhi	r3, #0
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	e006      	b.n	8004c36 <HAL_I2C_Init+0x92>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4a7d      	ldr	r2, [pc, #500]	@ (8004e20 <HAL_I2C_Init+0x27c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	bf94      	ite	ls
 8004c30:	2301      	movls	r3, #1
 8004c32:	2300      	movhi	r3, #0
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e0e7      	b.n	8004e0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	4a78      	ldr	r2, [pc, #480]	@ (8004e24 <HAL_I2C_Init+0x280>)
 8004c42:	fba2 2303 	umull	r2, r3, r2, r3
 8004c46:	0c9b      	lsrs	r3, r3, #18
 8004c48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	4a6a      	ldr	r2, [pc, #424]	@ (8004e18 <HAL_I2C_Init+0x274>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d802      	bhi.n	8004c78 <HAL_I2C_Init+0xd4>
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	3301      	adds	r3, #1
 8004c76:	e009      	b.n	8004c8c <HAL_I2C_Init+0xe8>
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004c7e:	fb02 f303 	mul.w	r3, r2, r3
 8004c82:	4a69      	ldr	r2, [pc, #420]	@ (8004e28 <HAL_I2C_Init+0x284>)
 8004c84:	fba2 2303 	umull	r2, r3, r2, r3
 8004c88:	099b      	lsrs	r3, r3, #6
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	6812      	ldr	r2, [r2, #0]
 8004c90:	430b      	orrs	r3, r1
 8004c92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004c9e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	495c      	ldr	r1, [pc, #368]	@ (8004e18 <HAL_I2C_Init+0x274>)
 8004ca8:	428b      	cmp	r3, r1
 8004caa:	d819      	bhi.n	8004ce0 <HAL_I2C_Init+0x13c>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	1e59      	subs	r1, r3, #1
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	005b      	lsls	r3, r3, #1
 8004cb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cba:	1c59      	adds	r1, r3, #1
 8004cbc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004cc0:	400b      	ands	r3, r1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <HAL_I2C_Init+0x138>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	1e59      	subs	r1, r3, #1
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cda:	e051      	b.n	8004d80 <HAL_I2C_Init+0x1dc>
 8004cdc:	2304      	movs	r3, #4
 8004cde:	e04f      	b.n	8004d80 <HAL_I2C_Init+0x1dc>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d111      	bne.n	8004d0c <HAL_I2C_Init+0x168>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	1e58      	subs	r0, r3, #1
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6859      	ldr	r1, [r3, #4]
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	440b      	add	r3, r1
 8004cf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	bf0c      	ite	eq
 8004d04:	2301      	moveq	r3, #1
 8004d06:	2300      	movne	r3, #0
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	e012      	b.n	8004d32 <HAL_I2C_Init+0x18e>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	1e58      	subs	r0, r3, #1
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6859      	ldr	r1, [r3, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	440b      	add	r3, r1
 8004d1a:	0099      	lsls	r1, r3, #2
 8004d1c:	440b      	add	r3, r1
 8004d1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d22:	3301      	adds	r3, #1
 8004d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	bf0c      	ite	eq
 8004d2c:	2301      	moveq	r3, #1
 8004d2e:	2300      	movne	r3, #0
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <HAL_I2C_Init+0x196>
 8004d36:	2301      	movs	r3, #1
 8004d38:	e022      	b.n	8004d80 <HAL_I2C_Init+0x1dc>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10e      	bne.n	8004d60 <HAL_I2C_Init+0x1bc>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	1e58      	subs	r0, r3, #1
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6859      	ldr	r1, [r3, #4]
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	005b      	lsls	r3, r3, #1
 8004d4e:	440b      	add	r3, r1
 8004d50:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d54:	3301      	adds	r3, #1
 8004d56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d5e:	e00f      	b.n	8004d80 <HAL_I2C_Init+0x1dc>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	1e58      	subs	r0, r3, #1
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6859      	ldr	r1, [r3, #4]
 8004d68:	460b      	mov	r3, r1
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	440b      	add	r3, r1
 8004d6e:	0099      	lsls	r1, r3, #2
 8004d70:	440b      	add	r3, r1
 8004d72:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d76:	3301      	adds	r3, #1
 8004d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d80:	6879      	ldr	r1, [r7, #4]
 8004d82:	6809      	ldr	r1, [r1, #0]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	69da      	ldr	r2, [r3, #28]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004dae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	6911      	ldr	r1, [r2, #16]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	68d2      	ldr	r2, [r2, #12]
 8004dba:	4311      	orrs	r1, r2
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	6812      	ldr	r2, [r2, #0]
 8004dc0:	430b      	orrs	r3, r1
 8004dc2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	695a      	ldr	r2, [r3, #20]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0201 	orr.w	r2, r2, #1
 8004dee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	000186a0 	.word	0x000186a0
 8004e1c:	001e847f 	.word	0x001e847f
 8004e20:	003d08ff 	.word	0x003d08ff
 8004e24:	431bde83 	.word	0x431bde83
 8004e28:	10624dd3 	.word	0x10624dd3

08004e2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e267      	b.n	800530e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d075      	beq.n	8004f36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004e4a:	4b88      	ldr	r3, [pc, #544]	@ (800506c <HAL_RCC_OscConfig+0x240>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f003 030c 	and.w	r3, r3, #12
 8004e52:	2b04      	cmp	r3, #4
 8004e54:	d00c      	beq.n	8004e70 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e56:	4b85      	ldr	r3, [pc, #532]	@ (800506c <HAL_RCC_OscConfig+0x240>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004e5e:	2b08      	cmp	r3, #8
 8004e60:	d112      	bne.n	8004e88 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e62:	4b82      	ldr	r3, [pc, #520]	@ (800506c <HAL_RCC_OscConfig+0x240>)
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e6e:	d10b      	bne.n	8004e88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e70:	4b7e      	ldr	r3, [pc, #504]	@ (800506c <HAL_RCC_OscConfig+0x240>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d05b      	beq.n	8004f34 <HAL_RCC_OscConfig+0x108>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d157      	bne.n	8004f34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e242      	b.n	800530e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e90:	d106      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x74>
 8004e92:	4b76      	ldr	r3, [pc, #472]	@ (800506c <HAL_RCC_OscConfig+0x240>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a75      	ldr	r2, [pc, #468]	@ (800506c <HAL_RCC_OscConfig+0x240>)
 8004e98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e9c:	6013      	str	r3, [r2, #0]
 8004e9e:	e01d      	b.n	8004edc <HAL_RCC_OscConfig+0xb0>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ea8:	d10c      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x98>
 8004eaa:	4b70      	ldr	r3, [pc, #448]	@ (800506c <HAL_RCC_OscConfig+0x240>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a6f      	ldr	r2, [pc, #444]	@ (800506c <HAL_RCC_OscConfig+0x240>)
 8004eb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004eb4:	6013      	str	r3, [r2, #0]
 8004eb6:	4b6d      	ldr	r3, [pc, #436]	@ (800506c <HAL_RCC_OscConfig+0x240>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a6c      	ldr	r2, [pc, #432]	@ (800506c <HAL_RCC_OscConfig+0x240>)
 8004ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	e00b      	b.n	8004edc <HAL_RCC_OscConfig+0xb0>
 8004ec4:	4b69      	ldr	r3, [pc, #420]	@ (800506c <HAL_RCC_OscConfig+0x240>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a68      	ldr	r2, [pc, #416]	@ (800506c <HAL_RCC_OscConfig+0x240>)
 8004eca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ece:	6013      	str	r3, [r2, #0]
 8004ed0:	4b66      	ldr	r3, [pc, #408]	@ (800506c <HAL_RCC_OscConfig+0x240>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a65      	ldr	r2, [pc, #404]	@ (800506c <HAL_RCC_OscConfig+0x240>)
 8004ed6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004eda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d013      	beq.n	8004f0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee4:	f7fd f86e 	bl	8001fc4 <HAL_GetTick>
 8004ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eea:	e008      	b.n	8004efe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004eec:	f7fd f86a 	bl	8001fc4 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b64      	cmp	r3, #100	@ 0x64
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e207      	b.n	800530e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004efe:	4b5b      	ldr	r3, [pc, #364]	@ (800506c <HAL_RCC_OscConfig+0x240>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d0f0      	beq.n	8004eec <HAL_RCC_OscConfig+0xc0>
 8004f0a:	e014      	b.n	8004f36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f0c:	f7fd f85a 	bl	8001fc4 <HAL_GetTick>
 8004f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f12:	e008      	b.n	8004f26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f14:	f7fd f856 	bl	8001fc4 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b64      	cmp	r3, #100	@ 0x64
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e1f3      	b.n	800530e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f26:	4b51      	ldr	r3, [pc, #324]	@ (800506c <HAL_RCC_OscConfig+0x240>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1f0      	bne.n	8004f14 <HAL_RCC_OscConfig+0xe8>
 8004f32:	e000      	b.n	8004f36 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d063      	beq.n	800500a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004f42:	4b4a      	ldr	r3, [pc, #296]	@ (800506c <HAL_RCC_OscConfig+0x240>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 030c 	and.w	r3, r3, #12
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00b      	beq.n	8004f66 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f4e:	4b47      	ldr	r3, [pc, #284]	@ (800506c <HAL_RCC_OscConfig+0x240>)
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004f56:	2b08      	cmp	r3, #8
 8004f58:	d11c      	bne.n	8004f94 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f5a:	4b44      	ldr	r3, [pc, #272]	@ (800506c <HAL_RCC_OscConfig+0x240>)
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d116      	bne.n	8004f94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f66:	4b41      	ldr	r3, [pc, #260]	@ (800506c <HAL_RCC_OscConfig+0x240>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d005      	beq.n	8004f7e <HAL_RCC_OscConfig+0x152>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d001      	beq.n	8004f7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e1c7      	b.n	800530e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f7e:	4b3b      	ldr	r3, [pc, #236]	@ (800506c <HAL_RCC_OscConfig+0x240>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	4937      	ldr	r1, [pc, #220]	@ (800506c <HAL_RCC_OscConfig+0x240>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f92:	e03a      	b.n	800500a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d020      	beq.n	8004fde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f9c:	4b34      	ldr	r3, [pc, #208]	@ (8005070 <HAL_RCC_OscConfig+0x244>)
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa2:	f7fd f80f 	bl	8001fc4 <HAL_GetTick>
 8004fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fa8:	e008      	b.n	8004fbc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004faa:	f7fd f80b 	bl	8001fc4 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e1a8      	b.n	800530e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fbc:	4b2b      	ldr	r3, [pc, #172]	@ (800506c <HAL_RCC_OscConfig+0x240>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d0f0      	beq.n	8004faa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fc8:	4b28      	ldr	r3, [pc, #160]	@ (800506c <HAL_RCC_OscConfig+0x240>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	00db      	lsls	r3, r3, #3
 8004fd6:	4925      	ldr	r1, [pc, #148]	@ (800506c <HAL_RCC_OscConfig+0x240>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	600b      	str	r3, [r1, #0]
 8004fdc:	e015      	b.n	800500a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fde:	4b24      	ldr	r3, [pc, #144]	@ (8005070 <HAL_RCC_OscConfig+0x244>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe4:	f7fc ffee 	bl	8001fc4 <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fec:	f7fc ffea 	bl	8001fc4 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e187      	b.n	800530e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800506c <HAL_RCC_OscConfig+0x240>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1f0      	bne.n	8004fec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0308 	and.w	r3, r3, #8
 8005012:	2b00      	cmp	r3, #0
 8005014:	d036      	beq.n	8005084 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d016      	beq.n	800504c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800501e:	4b15      	ldr	r3, [pc, #84]	@ (8005074 <HAL_RCC_OscConfig+0x248>)
 8005020:	2201      	movs	r2, #1
 8005022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005024:	f7fc ffce 	bl	8001fc4 <HAL_GetTick>
 8005028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800502c:	f7fc ffca 	bl	8001fc4 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e167      	b.n	800530e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800503e:	4b0b      	ldr	r3, [pc, #44]	@ (800506c <HAL_RCC_OscConfig+0x240>)
 8005040:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0f0      	beq.n	800502c <HAL_RCC_OscConfig+0x200>
 800504a:	e01b      	b.n	8005084 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800504c:	4b09      	ldr	r3, [pc, #36]	@ (8005074 <HAL_RCC_OscConfig+0x248>)
 800504e:	2200      	movs	r2, #0
 8005050:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005052:	f7fc ffb7 	bl	8001fc4 <HAL_GetTick>
 8005056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005058:	e00e      	b.n	8005078 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800505a:	f7fc ffb3 	bl	8001fc4 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d907      	bls.n	8005078 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e150      	b.n	800530e <HAL_RCC_OscConfig+0x4e2>
 800506c:	40023800 	.word	0x40023800
 8005070:	42470000 	.word	0x42470000
 8005074:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005078:	4b88      	ldr	r3, [pc, #544]	@ (800529c <HAL_RCC_OscConfig+0x470>)
 800507a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1ea      	bne.n	800505a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0304 	and.w	r3, r3, #4
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 8097 	beq.w	80051c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005092:	2300      	movs	r3, #0
 8005094:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005096:	4b81      	ldr	r3, [pc, #516]	@ (800529c <HAL_RCC_OscConfig+0x470>)
 8005098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10f      	bne.n	80050c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050a2:	2300      	movs	r3, #0
 80050a4:	60bb      	str	r3, [r7, #8]
 80050a6:	4b7d      	ldr	r3, [pc, #500]	@ (800529c <HAL_RCC_OscConfig+0x470>)
 80050a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050aa:	4a7c      	ldr	r2, [pc, #496]	@ (800529c <HAL_RCC_OscConfig+0x470>)
 80050ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80050b2:	4b7a      	ldr	r3, [pc, #488]	@ (800529c <HAL_RCC_OscConfig+0x470>)
 80050b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050ba:	60bb      	str	r3, [r7, #8]
 80050bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050be:	2301      	movs	r3, #1
 80050c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c2:	4b77      	ldr	r3, [pc, #476]	@ (80052a0 <HAL_RCC_OscConfig+0x474>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d118      	bne.n	8005100 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050ce:	4b74      	ldr	r3, [pc, #464]	@ (80052a0 <HAL_RCC_OscConfig+0x474>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a73      	ldr	r2, [pc, #460]	@ (80052a0 <HAL_RCC_OscConfig+0x474>)
 80050d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050da:	f7fc ff73 	bl	8001fc4 <HAL_GetTick>
 80050de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050e0:	e008      	b.n	80050f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050e2:	f7fc ff6f 	bl	8001fc4 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d901      	bls.n	80050f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e10c      	b.n	800530e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f4:	4b6a      	ldr	r3, [pc, #424]	@ (80052a0 <HAL_RCC_OscConfig+0x474>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d0f0      	beq.n	80050e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d106      	bne.n	8005116 <HAL_RCC_OscConfig+0x2ea>
 8005108:	4b64      	ldr	r3, [pc, #400]	@ (800529c <HAL_RCC_OscConfig+0x470>)
 800510a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800510c:	4a63      	ldr	r2, [pc, #396]	@ (800529c <HAL_RCC_OscConfig+0x470>)
 800510e:	f043 0301 	orr.w	r3, r3, #1
 8005112:	6713      	str	r3, [r2, #112]	@ 0x70
 8005114:	e01c      	b.n	8005150 <HAL_RCC_OscConfig+0x324>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	2b05      	cmp	r3, #5
 800511c:	d10c      	bne.n	8005138 <HAL_RCC_OscConfig+0x30c>
 800511e:	4b5f      	ldr	r3, [pc, #380]	@ (800529c <HAL_RCC_OscConfig+0x470>)
 8005120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005122:	4a5e      	ldr	r2, [pc, #376]	@ (800529c <HAL_RCC_OscConfig+0x470>)
 8005124:	f043 0304 	orr.w	r3, r3, #4
 8005128:	6713      	str	r3, [r2, #112]	@ 0x70
 800512a:	4b5c      	ldr	r3, [pc, #368]	@ (800529c <HAL_RCC_OscConfig+0x470>)
 800512c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800512e:	4a5b      	ldr	r2, [pc, #364]	@ (800529c <HAL_RCC_OscConfig+0x470>)
 8005130:	f043 0301 	orr.w	r3, r3, #1
 8005134:	6713      	str	r3, [r2, #112]	@ 0x70
 8005136:	e00b      	b.n	8005150 <HAL_RCC_OscConfig+0x324>
 8005138:	4b58      	ldr	r3, [pc, #352]	@ (800529c <HAL_RCC_OscConfig+0x470>)
 800513a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800513c:	4a57      	ldr	r2, [pc, #348]	@ (800529c <HAL_RCC_OscConfig+0x470>)
 800513e:	f023 0301 	bic.w	r3, r3, #1
 8005142:	6713      	str	r3, [r2, #112]	@ 0x70
 8005144:	4b55      	ldr	r3, [pc, #340]	@ (800529c <HAL_RCC_OscConfig+0x470>)
 8005146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005148:	4a54      	ldr	r2, [pc, #336]	@ (800529c <HAL_RCC_OscConfig+0x470>)
 800514a:	f023 0304 	bic.w	r3, r3, #4
 800514e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d015      	beq.n	8005184 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005158:	f7fc ff34 	bl	8001fc4 <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800515e:	e00a      	b.n	8005176 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005160:	f7fc ff30 	bl	8001fc4 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800516e:	4293      	cmp	r3, r2
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e0cb      	b.n	800530e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005176:	4b49      	ldr	r3, [pc, #292]	@ (800529c <HAL_RCC_OscConfig+0x470>)
 8005178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b00      	cmp	r3, #0
 8005180:	d0ee      	beq.n	8005160 <HAL_RCC_OscConfig+0x334>
 8005182:	e014      	b.n	80051ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005184:	f7fc ff1e 	bl	8001fc4 <HAL_GetTick>
 8005188:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800518a:	e00a      	b.n	80051a2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800518c:	f7fc ff1a 	bl	8001fc4 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800519a:	4293      	cmp	r3, r2
 800519c:	d901      	bls.n	80051a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e0b5      	b.n	800530e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051a2:	4b3e      	ldr	r3, [pc, #248]	@ (800529c <HAL_RCC_OscConfig+0x470>)
 80051a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1ee      	bne.n	800518c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051ae:	7dfb      	ldrb	r3, [r7, #23]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d105      	bne.n	80051c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051b4:	4b39      	ldr	r3, [pc, #228]	@ (800529c <HAL_RCC_OscConfig+0x470>)
 80051b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b8:	4a38      	ldr	r2, [pc, #224]	@ (800529c <HAL_RCC_OscConfig+0x470>)
 80051ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 80a1 	beq.w	800530c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051ca:	4b34      	ldr	r3, [pc, #208]	@ (800529c <HAL_RCC_OscConfig+0x470>)
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f003 030c 	and.w	r3, r3, #12
 80051d2:	2b08      	cmp	r3, #8
 80051d4:	d05c      	beq.n	8005290 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d141      	bne.n	8005262 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051de:	4b31      	ldr	r3, [pc, #196]	@ (80052a4 <HAL_RCC_OscConfig+0x478>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e4:	f7fc feee 	bl	8001fc4 <HAL_GetTick>
 80051e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ea:	e008      	b.n	80051fe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ec:	f7fc feea 	bl	8001fc4 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e087      	b.n	800530e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051fe:	4b27      	ldr	r3, [pc, #156]	@ (800529c <HAL_RCC_OscConfig+0x470>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1f0      	bne.n	80051ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	69da      	ldr	r2, [r3, #28]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	431a      	orrs	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005218:	019b      	lsls	r3, r3, #6
 800521a:	431a      	orrs	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005220:	085b      	lsrs	r3, r3, #1
 8005222:	3b01      	subs	r3, #1
 8005224:	041b      	lsls	r3, r3, #16
 8005226:	431a      	orrs	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800522c:	061b      	lsls	r3, r3, #24
 800522e:	491b      	ldr	r1, [pc, #108]	@ (800529c <HAL_RCC_OscConfig+0x470>)
 8005230:	4313      	orrs	r3, r2
 8005232:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005234:	4b1b      	ldr	r3, [pc, #108]	@ (80052a4 <HAL_RCC_OscConfig+0x478>)
 8005236:	2201      	movs	r2, #1
 8005238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800523a:	f7fc fec3 	bl	8001fc4 <HAL_GetTick>
 800523e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005240:	e008      	b.n	8005254 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005242:	f7fc febf 	bl	8001fc4 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d901      	bls.n	8005254 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e05c      	b.n	800530e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005254:	4b11      	ldr	r3, [pc, #68]	@ (800529c <HAL_RCC_OscConfig+0x470>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d0f0      	beq.n	8005242 <HAL_RCC_OscConfig+0x416>
 8005260:	e054      	b.n	800530c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005262:	4b10      	ldr	r3, [pc, #64]	@ (80052a4 <HAL_RCC_OscConfig+0x478>)
 8005264:	2200      	movs	r2, #0
 8005266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005268:	f7fc feac 	bl	8001fc4 <HAL_GetTick>
 800526c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800526e:	e008      	b.n	8005282 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005270:	f7fc fea8 	bl	8001fc4 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b02      	cmp	r3, #2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e045      	b.n	800530e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005282:	4b06      	ldr	r3, [pc, #24]	@ (800529c <HAL_RCC_OscConfig+0x470>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1f0      	bne.n	8005270 <HAL_RCC_OscConfig+0x444>
 800528e:	e03d      	b.n	800530c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d107      	bne.n	80052a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e038      	b.n	800530e <HAL_RCC_OscConfig+0x4e2>
 800529c:	40023800 	.word	0x40023800
 80052a0:	40007000 	.word	0x40007000
 80052a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005318 <HAL_RCC_OscConfig+0x4ec>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d028      	beq.n	8005308 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d121      	bne.n	8005308 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d11a      	bne.n	8005308 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80052d8:	4013      	ands	r3, r2
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80052de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d111      	bne.n	8005308 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ee:	085b      	lsrs	r3, r3, #1
 80052f0:	3b01      	subs	r3, #1
 80052f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d107      	bne.n	8005308 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005302:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005304:	429a      	cmp	r2, r3
 8005306:	d001      	beq.n	800530c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e000      	b.n	800530e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3718      	adds	r7, #24
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	40023800 	.word	0x40023800

0800531c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d101      	bne.n	8005330 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e0cc      	b.n	80054ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005330:	4b68      	ldr	r3, [pc, #416]	@ (80054d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0307 	and.w	r3, r3, #7
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	429a      	cmp	r2, r3
 800533c:	d90c      	bls.n	8005358 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800533e:	4b65      	ldr	r3, [pc, #404]	@ (80054d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005340:	683a      	ldr	r2, [r7, #0]
 8005342:	b2d2      	uxtb	r2, r2
 8005344:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005346:	4b63      	ldr	r3, [pc, #396]	@ (80054d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0307 	and.w	r3, r3, #7
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	429a      	cmp	r2, r3
 8005352:	d001      	beq.n	8005358 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e0b8      	b.n	80054ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d020      	beq.n	80053a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0304 	and.w	r3, r3, #4
 800536c:	2b00      	cmp	r3, #0
 800536e:	d005      	beq.n	800537c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005370:	4b59      	ldr	r3, [pc, #356]	@ (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	4a58      	ldr	r2, [pc, #352]	@ (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005376:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800537a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0308 	and.w	r3, r3, #8
 8005384:	2b00      	cmp	r3, #0
 8005386:	d005      	beq.n	8005394 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005388:	4b53      	ldr	r3, [pc, #332]	@ (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	4a52      	ldr	r2, [pc, #328]	@ (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 800538e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005392:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005394:	4b50      	ldr	r3, [pc, #320]	@ (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	494d      	ldr	r1, [pc, #308]	@ (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d044      	beq.n	800543c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d107      	bne.n	80053ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ba:	4b47      	ldr	r3, [pc, #284]	@ (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d119      	bne.n	80053fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e07f      	b.n	80054ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d003      	beq.n	80053da <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053d6:	2b03      	cmp	r3, #3
 80053d8:	d107      	bne.n	80053ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053da:	4b3f      	ldr	r3, [pc, #252]	@ (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d109      	bne.n	80053fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e06f      	b.n	80054ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ea:	4b3b      	ldr	r3, [pc, #236]	@ (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e067      	b.n	80054ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053fa:	4b37      	ldr	r3, [pc, #220]	@ (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f023 0203 	bic.w	r2, r3, #3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	4934      	ldr	r1, [pc, #208]	@ (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005408:	4313      	orrs	r3, r2
 800540a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800540c:	f7fc fdda 	bl	8001fc4 <HAL_GetTick>
 8005410:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005412:	e00a      	b.n	800542a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005414:	f7fc fdd6 	bl	8001fc4 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005422:	4293      	cmp	r3, r2
 8005424:	d901      	bls.n	800542a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e04f      	b.n	80054ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800542a:	4b2b      	ldr	r3, [pc, #172]	@ (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f003 020c 	and.w	r2, r3, #12
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	429a      	cmp	r2, r3
 800543a:	d1eb      	bne.n	8005414 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800543c:	4b25      	ldr	r3, [pc, #148]	@ (80054d4 <HAL_RCC_ClockConfig+0x1b8>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0307 	and.w	r3, r3, #7
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	429a      	cmp	r2, r3
 8005448:	d20c      	bcs.n	8005464 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800544a:	4b22      	ldr	r3, [pc, #136]	@ (80054d4 <HAL_RCC_ClockConfig+0x1b8>)
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	b2d2      	uxtb	r2, r2
 8005450:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005452:	4b20      	ldr	r3, [pc, #128]	@ (80054d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0307 	and.w	r3, r3, #7
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	429a      	cmp	r2, r3
 800545e:	d001      	beq.n	8005464 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e032      	b.n	80054ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0304 	and.w	r3, r3, #4
 800546c:	2b00      	cmp	r3, #0
 800546e:	d008      	beq.n	8005482 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005470:	4b19      	ldr	r3, [pc, #100]	@ (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	4916      	ldr	r1, [pc, #88]	@ (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 800547e:	4313      	orrs	r3, r2
 8005480:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0308 	and.w	r3, r3, #8
 800548a:	2b00      	cmp	r3, #0
 800548c:	d009      	beq.n	80054a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800548e:	4b12      	ldr	r3, [pc, #72]	@ (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	490e      	ldr	r1, [pc, #56]	@ (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054a2:	f000 f821 	bl	80054e8 <HAL_RCC_GetSysClockFreq>
 80054a6:	4602      	mov	r2, r0
 80054a8:	4b0b      	ldr	r3, [pc, #44]	@ (80054d8 <HAL_RCC_ClockConfig+0x1bc>)
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	091b      	lsrs	r3, r3, #4
 80054ae:	f003 030f 	and.w	r3, r3, #15
 80054b2:	490a      	ldr	r1, [pc, #40]	@ (80054dc <HAL_RCC_ClockConfig+0x1c0>)
 80054b4:	5ccb      	ldrb	r3, [r1, r3]
 80054b6:	fa22 f303 	lsr.w	r3, r2, r3
 80054ba:	4a09      	ldr	r2, [pc, #36]	@ (80054e0 <HAL_RCC_ClockConfig+0x1c4>)
 80054bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80054be:	4b09      	ldr	r3, [pc, #36]	@ (80054e4 <HAL_RCC_ClockConfig+0x1c8>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7fc fd3a 	bl	8001f3c <HAL_InitTick>

  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	40023c00 	.word	0x40023c00
 80054d8:	40023800 	.word	0x40023800
 80054dc:	08007ea0 	.word	0x08007ea0
 80054e0:	20000000 	.word	0x20000000
 80054e4:	20000004 	.word	0x20000004

080054e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054ec:	b094      	sub	sp, #80	@ 0x50
 80054ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80054f0:	2300      	movs	r3, #0
 80054f2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80054f4:	2300      	movs	r3, #0
 80054f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80054f8:	2300      	movs	r3, #0
 80054fa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80054fc:	2300      	movs	r3, #0
 80054fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005500:	4b79      	ldr	r3, [pc, #484]	@ (80056e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f003 030c 	and.w	r3, r3, #12
 8005508:	2b08      	cmp	r3, #8
 800550a:	d00d      	beq.n	8005528 <HAL_RCC_GetSysClockFreq+0x40>
 800550c:	2b08      	cmp	r3, #8
 800550e:	f200 80e1 	bhi.w	80056d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005512:	2b00      	cmp	r3, #0
 8005514:	d002      	beq.n	800551c <HAL_RCC_GetSysClockFreq+0x34>
 8005516:	2b04      	cmp	r3, #4
 8005518:	d003      	beq.n	8005522 <HAL_RCC_GetSysClockFreq+0x3a>
 800551a:	e0db      	b.n	80056d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800551c:	4b73      	ldr	r3, [pc, #460]	@ (80056ec <HAL_RCC_GetSysClockFreq+0x204>)
 800551e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005520:	e0db      	b.n	80056da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005522:	4b73      	ldr	r3, [pc, #460]	@ (80056f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005524:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005526:	e0d8      	b.n	80056da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005528:	4b6f      	ldr	r3, [pc, #444]	@ (80056e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005530:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005532:	4b6d      	ldr	r3, [pc, #436]	@ (80056e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d063      	beq.n	8005606 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800553e:	4b6a      	ldr	r3, [pc, #424]	@ (80056e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	099b      	lsrs	r3, r3, #6
 8005544:	2200      	movs	r2, #0
 8005546:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005548:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800554a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800554c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005550:	633b      	str	r3, [r7, #48]	@ 0x30
 8005552:	2300      	movs	r3, #0
 8005554:	637b      	str	r3, [r7, #52]	@ 0x34
 8005556:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800555a:	4622      	mov	r2, r4
 800555c:	462b      	mov	r3, r5
 800555e:	f04f 0000 	mov.w	r0, #0
 8005562:	f04f 0100 	mov.w	r1, #0
 8005566:	0159      	lsls	r1, r3, #5
 8005568:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800556c:	0150      	lsls	r0, r2, #5
 800556e:	4602      	mov	r2, r0
 8005570:	460b      	mov	r3, r1
 8005572:	4621      	mov	r1, r4
 8005574:	1a51      	subs	r1, r2, r1
 8005576:	6139      	str	r1, [r7, #16]
 8005578:	4629      	mov	r1, r5
 800557a:	eb63 0301 	sbc.w	r3, r3, r1
 800557e:	617b      	str	r3, [r7, #20]
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	f04f 0300 	mov.w	r3, #0
 8005588:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800558c:	4659      	mov	r1, fp
 800558e:	018b      	lsls	r3, r1, #6
 8005590:	4651      	mov	r1, sl
 8005592:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005596:	4651      	mov	r1, sl
 8005598:	018a      	lsls	r2, r1, #6
 800559a:	4651      	mov	r1, sl
 800559c:	ebb2 0801 	subs.w	r8, r2, r1
 80055a0:	4659      	mov	r1, fp
 80055a2:	eb63 0901 	sbc.w	r9, r3, r1
 80055a6:	f04f 0200 	mov.w	r2, #0
 80055aa:	f04f 0300 	mov.w	r3, #0
 80055ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055ba:	4690      	mov	r8, r2
 80055bc:	4699      	mov	r9, r3
 80055be:	4623      	mov	r3, r4
 80055c0:	eb18 0303 	adds.w	r3, r8, r3
 80055c4:	60bb      	str	r3, [r7, #8]
 80055c6:	462b      	mov	r3, r5
 80055c8:	eb49 0303 	adc.w	r3, r9, r3
 80055cc:	60fb      	str	r3, [r7, #12]
 80055ce:	f04f 0200 	mov.w	r2, #0
 80055d2:	f04f 0300 	mov.w	r3, #0
 80055d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80055da:	4629      	mov	r1, r5
 80055dc:	024b      	lsls	r3, r1, #9
 80055de:	4621      	mov	r1, r4
 80055e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80055e4:	4621      	mov	r1, r4
 80055e6:	024a      	lsls	r2, r1, #9
 80055e8:	4610      	mov	r0, r2
 80055ea:	4619      	mov	r1, r3
 80055ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055ee:	2200      	movs	r2, #0
 80055f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80055f8:	f7fb fab4 	bl	8000b64 <__aeabi_uldivmod>
 80055fc:	4602      	mov	r2, r0
 80055fe:	460b      	mov	r3, r1
 8005600:	4613      	mov	r3, r2
 8005602:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005604:	e058      	b.n	80056b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005606:	4b38      	ldr	r3, [pc, #224]	@ (80056e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	099b      	lsrs	r3, r3, #6
 800560c:	2200      	movs	r2, #0
 800560e:	4618      	mov	r0, r3
 8005610:	4611      	mov	r1, r2
 8005612:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005616:	623b      	str	r3, [r7, #32]
 8005618:	2300      	movs	r3, #0
 800561a:	627b      	str	r3, [r7, #36]	@ 0x24
 800561c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005620:	4642      	mov	r2, r8
 8005622:	464b      	mov	r3, r9
 8005624:	f04f 0000 	mov.w	r0, #0
 8005628:	f04f 0100 	mov.w	r1, #0
 800562c:	0159      	lsls	r1, r3, #5
 800562e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005632:	0150      	lsls	r0, r2, #5
 8005634:	4602      	mov	r2, r0
 8005636:	460b      	mov	r3, r1
 8005638:	4641      	mov	r1, r8
 800563a:	ebb2 0a01 	subs.w	sl, r2, r1
 800563e:	4649      	mov	r1, r9
 8005640:	eb63 0b01 	sbc.w	fp, r3, r1
 8005644:	f04f 0200 	mov.w	r2, #0
 8005648:	f04f 0300 	mov.w	r3, #0
 800564c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005650:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005654:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005658:	ebb2 040a 	subs.w	r4, r2, sl
 800565c:	eb63 050b 	sbc.w	r5, r3, fp
 8005660:	f04f 0200 	mov.w	r2, #0
 8005664:	f04f 0300 	mov.w	r3, #0
 8005668:	00eb      	lsls	r3, r5, #3
 800566a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800566e:	00e2      	lsls	r2, r4, #3
 8005670:	4614      	mov	r4, r2
 8005672:	461d      	mov	r5, r3
 8005674:	4643      	mov	r3, r8
 8005676:	18e3      	adds	r3, r4, r3
 8005678:	603b      	str	r3, [r7, #0]
 800567a:	464b      	mov	r3, r9
 800567c:	eb45 0303 	adc.w	r3, r5, r3
 8005680:	607b      	str	r3, [r7, #4]
 8005682:	f04f 0200 	mov.w	r2, #0
 8005686:	f04f 0300 	mov.w	r3, #0
 800568a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800568e:	4629      	mov	r1, r5
 8005690:	028b      	lsls	r3, r1, #10
 8005692:	4621      	mov	r1, r4
 8005694:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005698:	4621      	mov	r1, r4
 800569a:	028a      	lsls	r2, r1, #10
 800569c:	4610      	mov	r0, r2
 800569e:	4619      	mov	r1, r3
 80056a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056a2:	2200      	movs	r2, #0
 80056a4:	61bb      	str	r3, [r7, #24]
 80056a6:	61fa      	str	r2, [r7, #28]
 80056a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056ac:	f7fb fa5a 	bl	8000b64 <__aeabi_uldivmod>
 80056b0:	4602      	mov	r2, r0
 80056b2:	460b      	mov	r3, r1
 80056b4:	4613      	mov	r3, r2
 80056b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80056b8:	4b0b      	ldr	r3, [pc, #44]	@ (80056e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	0c1b      	lsrs	r3, r3, #16
 80056be:	f003 0303 	and.w	r3, r3, #3
 80056c2:	3301      	adds	r3, #1
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80056c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80056ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056d2:	e002      	b.n	80056da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056d4:	4b05      	ldr	r3, [pc, #20]	@ (80056ec <HAL_RCC_GetSysClockFreq+0x204>)
 80056d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3750      	adds	r7, #80	@ 0x50
 80056e0:	46bd      	mov	sp, r7
 80056e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056e6:	bf00      	nop
 80056e8:	40023800 	.word	0x40023800
 80056ec:	00f42400 	.word	0x00f42400
 80056f0:	007a1200 	.word	0x007a1200

080056f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056f4:	b480      	push	{r7}
 80056f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056f8:	4b03      	ldr	r3, [pc, #12]	@ (8005708 <HAL_RCC_GetHCLKFreq+0x14>)
 80056fa:	681b      	ldr	r3, [r3, #0]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	20000000 	.word	0x20000000

0800570c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005710:	f7ff fff0 	bl	80056f4 <HAL_RCC_GetHCLKFreq>
 8005714:	4602      	mov	r2, r0
 8005716:	4b05      	ldr	r3, [pc, #20]	@ (800572c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	0a9b      	lsrs	r3, r3, #10
 800571c:	f003 0307 	and.w	r3, r3, #7
 8005720:	4903      	ldr	r1, [pc, #12]	@ (8005730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005722:	5ccb      	ldrb	r3, [r1, r3]
 8005724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005728:	4618      	mov	r0, r3
 800572a:	bd80      	pop	{r7, pc}
 800572c:	40023800 	.word	0x40023800
 8005730:	08007eb0 	.word	0x08007eb0

08005734 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e041      	b.n	80057ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d106      	bne.n	8005760 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7fc fa40 	bl	8001be0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2202      	movs	r2, #2
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	3304      	adds	r3, #4
 8005770:	4619      	mov	r1, r3
 8005772:	4610      	mov	r0, r2
 8005774:	f000 fa88 	bl	8005c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3708      	adds	r7, #8
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
	...

080057d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d001      	beq.n	80057ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e04e      	b.n	800588a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68da      	ldr	r2, [r3, #12]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f042 0201 	orr.w	r2, r2, #1
 8005802:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a23      	ldr	r2, [pc, #140]	@ (8005898 <HAL_TIM_Base_Start_IT+0xc4>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d022      	beq.n	8005854 <HAL_TIM_Base_Start_IT+0x80>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005816:	d01d      	beq.n	8005854 <HAL_TIM_Base_Start_IT+0x80>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a1f      	ldr	r2, [pc, #124]	@ (800589c <HAL_TIM_Base_Start_IT+0xc8>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d018      	beq.n	8005854 <HAL_TIM_Base_Start_IT+0x80>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a1e      	ldr	r2, [pc, #120]	@ (80058a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d013      	beq.n	8005854 <HAL_TIM_Base_Start_IT+0x80>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a1c      	ldr	r2, [pc, #112]	@ (80058a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d00e      	beq.n	8005854 <HAL_TIM_Base_Start_IT+0x80>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a1b      	ldr	r2, [pc, #108]	@ (80058a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d009      	beq.n	8005854 <HAL_TIM_Base_Start_IT+0x80>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a19      	ldr	r2, [pc, #100]	@ (80058ac <HAL_TIM_Base_Start_IT+0xd8>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d004      	beq.n	8005854 <HAL_TIM_Base_Start_IT+0x80>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a18      	ldr	r2, [pc, #96]	@ (80058b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d111      	bne.n	8005878 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f003 0307 	and.w	r3, r3, #7
 800585e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2b06      	cmp	r3, #6
 8005864:	d010      	beq.n	8005888 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f042 0201 	orr.w	r2, r2, #1
 8005874:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005876:	e007      	b.n	8005888 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f042 0201 	orr.w	r2, r2, #1
 8005886:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3714      	adds	r7, #20
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	40010000 	.word	0x40010000
 800589c:	40000400 	.word	0x40000400
 80058a0:	40000800 	.word	0x40000800
 80058a4:	40000c00 	.word	0x40000c00
 80058a8:	40010400 	.word	0x40010400
 80058ac:	40014000 	.word	0x40014000
 80058b0:	40001800 	.word	0x40001800

080058b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	f003 0302 	and.w	r3, r3, #2
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d020      	beq.n	8005918 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d01b      	beq.n	8005918 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f06f 0202 	mvn.w	r2, #2
 80058e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	f003 0303 	and.w	r3, r3, #3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d003      	beq.n	8005906 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f9a3 	bl	8005c4a <HAL_TIM_IC_CaptureCallback>
 8005904:	e005      	b.n	8005912 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f995 	bl	8005c36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f9a6 	bl	8005c5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f003 0304 	and.w	r3, r3, #4
 800591e:	2b00      	cmp	r3, #0
 8005920:	d020      	beq.n	8005964 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b00      	cmp	r3, #0
 800592a:	d01b      	beq.n	8005964 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f06f 0204 	mvn.w	r2, #4
 8005934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2202      	movs	r2, #2
 800593a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f97d 	bl	8005c4a <HAL_TIM_IC_CaptureCallback>
 8005950:	e005      	b.n	800595e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f96f 	bl	8005c36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 f980 	bl	8005c5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	f003 0308 	and.w	r3, r3, #8
 800596a:	2b00      	cmp	r3, #0
 800596c:	d020      	beq.n	80059b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f003 0308 	and.w	r3, r3, #8
 8005974:	2b00      	cmp	r3, #0
 8005976:	d01b      	beq.n	80059b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f06f 0208 	mvn.w	r2, #8
 8005980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2204      	movs	r2, #4
 8005986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	69db      	ldr	r3, [r3, #28]
 800598e:	f003 0303 	and.w	r3, r3, #3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f957 	bl	8005c4a <HAL_TIM_IC_CaptureCallback>
 800599c:	e005      	b.n	80059aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f949 	bl	8005c36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 f95a 	bl	8005c5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	f003 0310 	and.w	r3, r3, #16
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d020      	beq.n	80059fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f003 0310 	and.w	r3, r3, #16
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d01b      	beq.n	80059fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f06f 0210 	mvn.w	r2, #16
 80059cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2208      	movs	r2, #8
 80059d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	69db      	ldr	r3, [r3, #28]
 80059da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f931 	bl	8005c4a <HAL_TIM_IC_CaptureCallback>
 80059e8:	e005      	b.n	80059f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f923 	bl	8005c36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f934 	bl	8005c5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00c      	beq.n	8005a20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d007      	beq.n	8005a20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f06f 0201 	mvn.w	r2, #1
 8005a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f901 	bl	8005c22 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00c      	beq.n	8005a44 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d007      	beq.n	8005a44 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 faee 	bl	8006020 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00c      	beq.n	8005a68 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d007      	beq.n	8005a68 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f905 	bl	8005c72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	f003 0320 	and.w	r3, r3, #32
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00c      	beq.n	8005a8c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f003 0320 	and.w	r3, r3, #32
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d007      	beq.n	8005a8c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f06f 0220 	mvn.w	r2, #32
 8005a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 fac0 	bl	800600c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a8c:	bf00      	nop
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d101      	bne.n	8005ab0 <HAL_TIM_ConfigClockSource+0x1c>
 8005aac:	2302      	movs	r3, #2
 8005aae:	e0b4      	b.n	8005c1a <HAL_TIM_ConfigClockSource+0x186>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2202      	movs	r2, #2
 8005abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005ace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ad6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ae8:	d03e      	beq.n	8005b68 <HAL_TIM_ConfigClockSource+0xd4>
 8005aea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005aee:	f200 8087 	bhi.w	8005c00 <HAL_TIM_ConfigClockSource+0x16c>
 8005af2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005af6:	f000 8086 	beq.w	8005c06 <HAL_TIM_ConfigClockSource+0x172>
 8005afa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005afe:	d87f      	bhi.n	8005c00 <HAL_TIM_ConfigClockSource+0x16c>
 8005b00:	2b70      	cmp	r3, #112	@ 0x70
 8005b02:	d01a      	beq.n	8005b3a <HAL_TIM_ConfigClockSource+0xa6>
 8005b04:	2b70      	cmp	r3, #112	@ 0x70
 8005b06:	d87b      	bhi.n	8005c00 <HAL_TIM_ConfigClockSource+0x16c>
 8005b08:	2b60      	cmp	r3, #96	@ 0x60
 8005b0a:	d050      	beq.n	8005bae <HAL_TIM_ConfigClockSource+0x11a>
 8005b0c:	2b60      	cmp	r3, #96	@ 0x60
 8005b0e:	d877      	bhi.n	8005c00 <HAL_TIM_ConfigClockSource+0x16c>
 8005b10:	2b50      	cmp	r3, #80	@ 0x50
 8005b12:	d03c      	beq.n	8005b8e <HAL_TIM_ConfigClockSource+0xfa>
 8005b14:	2b50      	cmp	r3, #80	@ 0x50
 8005b16:	d873      	bhi.n	8005c00 <HAL_TIM_ConfigClockSource+0x16c>
 8005b18:	2b40      	cmp	r3, #64	@ 0x40
 8005b1a:	d058      	beq.n	8005bce <HAL_TIM_ConfigClockSource+0x13a>
 8005b1c:	2b40      	cmp	r3, #64	@ 0x40
 8005b1e:	d86f      	bhi.n	8005c00 <HAL_TIM_ConfigClockSource+0x16c>
 8005b20:	2b30      	cmp	r3, #48	@ 0x30
 8005b22:	d064      	beq.n	8005bee <HAL_TIM_ConfigClockSource+0x15a>
 8005b24:	2b30      	cmp	r3, #48	@ 0x30
 8005b26:	d86b      	bhi.n	8005c00 <HAL_TIM_ConfigClockSource+0x16c>
 8005b28:	2b20      	cmp	r3, #32
 8005b2a:	d060      	beq.n	8005bee <HAL_TIM_ConfigClockSource+0x15a>
 8005b2c:	2b20      	cmp	r3, #32
 8005b2e:	d867      	bhi.n	8005c00 <HAL_TIM_ConfigClockSource+0x16c>
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d05c      	beq.n	8005bee <HAL_TIM_ConfigClockSource+0x15a>
 8005b34:	2b10      	cmp	r3, #16
 8005b36:	d05a      	beq.n	8005bee <HAL_TIM_ConfigClockSource+0x15a>
 8005b38:	e062      	b.n	8005c00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b4a:	f000 f9c3 	bl	8005ed4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	609a      	str	r2, [r3, #8]
      break;
 8005b66:	e04f      	b.n	8005c08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b78:	f000 f9ac 	bl	8005ed4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689a      	ldr	r2, [r3, #8]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b8a:	609a      	str	r2, [r3, #8]
      break;
 8005b8c:	e03c      	b.n	8005c08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	f000 f920 	bl	8005de0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2150      	movs	r1, #80	@ 0x50
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 f979 	bl	8005e9e <TIM_ITRx_SetConfig>
      break;
 8005bac:	e02c      	b.n	8005c08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bba:	461a      	mov	r2, r3
 8005bbc:	f000 f93f 	bl	8005e3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2160      	movs	r1, #96	@ 0x60
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 f969 	bl	8005e9e <TIM_ITRx_SetConfig>
      break;
 8005bcc:	e01c      	b.n	8005c08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bda:	461a      	mov	r2, r3
 8005bdc:	f000 f900 	bl	8005de0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2140      	movs	r1, #64	@ 0x40
 8005be6:	4618      	mov	r0, r3
 8005be8:	f000 f959 	bl	8005e9e <TIM_ITRx_SetConfig>
      break;
 8005bec:	e00c      	b.n	8005c08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	4610      	mov	r0, r2
 8005bfa:	f000 f950 	bl	8005e9e <TIM_ITRx_SetConfig>
      break;
 8005bfe:	e003      	b.n	8005c08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	73fb      	strb	r3, [r7, #15]
      break;
 8005c04:	e000      	b.n	8005c08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b083      	sub	sp, #12
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005c2a:	bf00      	nop
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b083      	sub	sp, #12
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c3e:	bf00      	nop
 8005c40:	370c      	adds	r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b083      	sub	sp, #12
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c52:	bf00      	nop
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b083      	sub	sp, #12
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c66:	bf00      	nop
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c7a:	bf00      	nop
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
	...

08005c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a46      	ldr	r2, [pc, #280]	@ (8005db4 <TIM_Base_SetConfig+0x12c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d013      	beq.n	8005cc8 <TIM_Base_SetConfig+0x40>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ca6:	d00f      	beq.n	8005cc8 <TIM_Base_SetConfig+0x40>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a43      	ldr	r2, [pc, #268]	@ (8005db8 <TIM_Base_SetConfig+0x130>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d00b      	beq.n	8005cc8 <TIM_Base_SetConfig+0x40>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a42      	ldr	r2, [pc, #264]	@ (8005dbc <TIM_Base_SetConfig+0x134>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d007      	beq.n	8005cc8 <TIM_Base_SetConfig+0x40>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a41      	ldr	r2, [pc, #260]	@ (8005dc0 <TIM_Base_SetConfig+0x138>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d003      	beq.n	8005cc8 <TIM_Base_SetConfig+0x40>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a40      	ldr	r2, [pc, #256]	@ (8005dc4 <TIM_Base_SetConfig+0x13c>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d108      	bne.n	8005cda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a35      	ldr	r2, [pc, #212]	@ (8005db4 <TIM_Base_SetConfig+0x12c>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d02b      	beq.n	8005d3a <TIM_Base_SetConfig+0xb2>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ce8:	d027      	beq.n	8005d3a <TIM_Base_SetConfig+0xb2>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a32      	ldr	r2, [pc, #200]	@ (8005db8 <TIM_Base_SetConfig+0x130>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d023      	beq.n	8005d3a <TIM_Base_SetConfig+0xb2>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a31      	ldr	r2, [pc, #196]	@ (8005dbc <TIM_Base_SetConfig+0x134>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d01f      	beq.n	8005d3a <TIM_Base_SetConfig+0xb2>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a30      	ldr	r2, [pc, #192]	@ (8005dc0 <TIM_Base_SetConfig+0x138>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d01b      	beq.n	8005d3a <TIM_Base_SetConfig+0xb2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a2f      	ldr	r2, [pc, #188]	@ (8005dc4 <TIM_Base_SetConfig+0x13c>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d017      	beq.n	8005d3a <TIM_Base_SetConfig+0xb2>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a2e      	ldr	r2, [pc, #184]	@ (8005dc8 <TIM_Base_SetConfig+0x140>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d013      	beq.n	8005d3a <TIM_Base_SetConfig+0xb2>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a2d      	ldr	r2, [pc, #180]	@ (8005dcc <TIM_Base_SetConfig+0x144>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d00f      	beq.n	8005d3a <TIM_Base_SetConfig+0xb2>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a2c      	ldr	r2, [pc, #176]	@ (8005dd0 <TIM_Base_SetConfig+0x148>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d00b      	beq.n	8005d3a <TIM_Base_SetConfig+0xb2>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a2b      	ldr	r2, [pc, #172]	@ (8005dd4 <TIM_Base_SetConfig+0x14c>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d007      	beq.n	8005d3a <TIM_Base_SetConfig+0xb2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a2a      	ldr	r2, [pc, #168]	@ (8005dd8 <TIM_Base_SetConfig+0x150>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d003      	beq.n	8005d3a <TIM_Base_SetConfig+0xb2>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a29      	ldr	r2, [pc, #164]	@ (8005ddc <TIM_Base_SetConfig+0x154>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d108      	bne.n	8005d4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	689a      	ldr	r2, [r3, #8]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a10      	ldr	r2, [pc, #64]	@ (8005db4 <TIM_Base_SetConfig+0x12c>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d003      	beq.n	8005d80 <TIM_Base_SetConfig+0xf8>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a12      	ldr	r2, [pc, #72]	@ (8005dc4 <TIM_Base_SetConfig+0x13c>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d103      	bne.n	8005d88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	691a      	ldr	r2, [r3, #16]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d105      	bne.n	8005da6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f023 0201 	bic.w	r2, r3, #1
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	611a      	str	r2, [r3, #16]
  }
}
 8005da6:	bf00      	nop
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	40010000 	.word	0x40010000
 8005db8:	40000400 	.word	0x40000400
 8005dbc:	40000800 	.word	0x40000800
 8005dc0:	40000c00 	.word	0x40000c00
 8005dc4:	40010400 	.word	0x40010400
 8005dc8:	40014000 	.word	0x40014000
 8005dcc:	40014400 	.word	0x40014400
 8005dd0:	40014800 	.word	0x40014800
 8005dd4:	40001800 	.word	0x40001800
 8005dd8:	40001c00 	.word	0x40001c00
 8005ddc:	40002000 	.word	0x40002000

08005de0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b087      	sub	sp, #28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6a1b      	ldr	r3, [r3, #32]
 8005df0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	f023 0201 	bic.w	r2, r3, #1
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	011b      	lsls	r3, r3, #4
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f023 030a 	bic.w	r3, r3, #10
 8005e1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	621a      	str	r2, [r3, #32]
}
 8005e32:	bf00      	nop
 8005e34:	371c      	adds	r7, #28
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b087      	sub	sp, #28
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	60f8      	str	r0, [r7, #12]
 8005e46:	60b9      	str	r1, [r7, #8]
 8005e48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	f023 0210 	bic.w	r2, r3, #16
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	031b      	lsls	r3, r3, #12
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	011b      	lsls	r3, r3, #4
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	621a      	str	r2, [r3, #32]
}
 8005e92:	bf00      	nop
 8005e94:	371c      	adds	r7, #28
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b085      	sub	sp, #20
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
 8005ea6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	f043 0307 	orr.w	r3, r3, #7
 8005ec0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	609a      	str	r2, [r3, #8]
}
 8005ec8:	bf00      	nop
 8005eca:	3714      	adds	r7, #20
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b087      	sub	sp, #28
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
 8005ee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005eee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	021a      	lsls	r2, r3, #8
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	431a      	orrs	r2, r3
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	609a      	str	r2, [r3, #8]
}
 8005f08:	bf00      	nop
 8005f0a:	371c      	adds	r7, #28
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d101      	bne.n	8005f2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	e05a      	b.n	8005fe2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2202      	movs	r2, #2
 8005f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a21      	ldr	r2, [pc, #132]	@ (8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d022      	beq.n	8005fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f78:	d01d      	beq.n	8005fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a1d      	ldr	r2, [pc, #116]	@ (8005ff4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d018      	beq.n	8005fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a1b      	ldr	r2, [pc, #108]	@ (8005ff8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d013      	beq.n	8005fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a1a      	ldr	r2, [pc, #104]	@ (8005ffc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d00e      	beq.n	8005fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a18      	ldr	r2, [pc, #96]	@ (8006000 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d009      	beq.n	8005fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a17      	ldr	r2, [pc, #92]	@ (8006004 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d004      	beq.n	8005fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a15      	ldr	r2, [pc, #84]	@ (8006008 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d10c      	bne.n	8005fd0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	40010000 	.word	0x40010000
 8005ff4:	40000400 	.word	0x40000400
 8005ff8:	40000800 	.word	0x40000800
 8005ffc:	40000c00 	.word	0x40000c00
 8006000:	40010400 	.word	0x40010400
 8006004:	40014000 	.word	0x40014000
 8006008:	40001800 	.word	0x40001800

0800600c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006034:	b084      	sub	sp, #16
 8006036:	b580      	push	{r7, lr}
 8006038:	b084      	sub	sp, #16
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
 800603e:	f107 001c 	add.w	r0, r7, #28
 8006042:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006046:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800604a:	2b01      	cmp	r3, #1
 800604c:	d123      	bne.n	8006096 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006052:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006062:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006076:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800607a:	2b01      	cmp	r3, #1
 800607c:	d105      	bne.n	800608a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f98d 	bl	80063aa <USB_CoreReset>
 8006090:	4603      	mov	r3, r0
 8006092:	73fb      	strb	r3, [r7, #15]
 8006094:	e01b      	b.n	80060ce <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f981 	bl	80063aa <USB_CoreReset>
 80060a8:	4603      	mov	r3, r0
 80060aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80060ac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d106      	bne.n	80060c2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	639a      	str	r2, [r3, #56]	@ 0x38
 80060c0:	e005      	b.n	80060ce <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80060ce:	7fbb      	ldrb	r3, [r7, #30]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d10b      	bne.n	80060ec <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f043 0206 	orr.w	r2, r3, #6
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	f043 0220 	orr.w	r2, r3, #32
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060f8:	b004      	add	sp, #16
 80060fa:	4770      	bx	lr

080060fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f023 0201 	bic.w	r2, r3, #1
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b084      	sub	sp, #16
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	460b      	mov	r3, r1
 8006128:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800612a:	2300      	movs	r3, #0
 800612c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800613a:	78fb      	ldrb	r3, [r7, #3]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d115      	bne.n	800616c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800614c:	200a      	movs	r0, #10
 800614e:	f7fb ff45 	bl	8001fdc <HAL_Delay>
      ms += 10U;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	330a      	adds	r3, #10
 8006156:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 f918 	bl	800638e <USB_GetMode>
 800615e:	4603      	mov	r3, r0
 8006160:	2b01      	cmp	r3, #1
 8006162:	d01e      	beq.n	80061a2 <USB_SetCurrentMode+0x84>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2bc7      	cmp	r3, #199	@ 0xc7
 8006168:	d9f0      	bls.n	800614c <USB_SetCurrentMode+0x2e>
 800616a:	e01a      	b.n	80061a2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800616c:	78fb      	ldrb	r3, [r7, #3]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d115      	bne.n	800619e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800617e:	200a      	movs	r0, #10
 8006180:	f7fb ff2c 	bl	8001fdc <HAL_Delay>
      ms += 10U;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	330a      	adds	r3, #10
 8006188:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 f8ff 	bl	800638e <USB_GetMode>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d005      	beq.n	80061a2 <USB_SetCurrentMode+0x84>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2bc7      	cmp	r3, #199	@ 0xc7
 800619a:	d9f0      	bls.n	800617e <USB_SetCurrentMode+0x60>
 800619c:	e001      	b.n	80061a2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e005      	b.n	80061ae <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2bc8      	cmp	r3, #200	@ 0xc8
 80061a6:	d101      	bne.n	80061ac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e000      	b.n	80061ae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b085      	sub	sp, #20
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
 80061be:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80061c0:	2300      	movs	r3, #0
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	3301      	adds	r3, #1
 80061c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061d0:	d901      	bls.n	80061d6 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e01b      	b.n	800620e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	daf2      	bge.n	80061c4 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80061de:	2300      	movs	r3, #0
 80061e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	019b      	lsls	r3, r3, #6
 80061e6:	f043 0220 	orr.w	r2, r3, #32
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	3301      	adds	r3, #1
 80061f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061fa:	d901      	bls.n	8006200 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e006      	b.n	800620e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	f003 0320 	and.w	r3, r3, #32
 8006208:	2b20      	cmp	r3, #32
 800620a:	d0f0      	beq.n	80061ee <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800621a:	b480      	push	{r7}
 800621c:	b085      	sub	sp, #20
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006222:	2300      	movs	r3, #0
 8006224:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	3301      	adds	r3, #1
 800622a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006232:	d901      	bls.n	8006238 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e018      	b.n	800626a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	2b00      	cmp	r3, #0
 800623e:	daf2      	bge.n	8006226 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006240:	2300      	movs	r3, #0
 8006242:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2210      	movs	r2, #16
 8006248:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	3301      	adds	r3, #1
 800624e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006256:	d901      	bls.n	800625c <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e006      	b.n	800626a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	f003 0310 	and.w	r3, r3, #16
 8006264:	2b10      	cmp	r3, #16
 8006266:	d0f0      	beq.n	800624a <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006276:	b480      	push	{r7}
 8006278:	b08b      	sub	sp, #44	@ 0x2c
 800627a:	af00      	add	r7, sp, #0
 800627c:	60f8      	str	r0, [r7, #12]
 800627e:	60b9      	str	r1, [r7, #8]
 8006280:	4613      	mov	r3, r2
 8006282:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800628c:	88fb      	ldrh	r3, [r7, #6]
 800628e:	089b      	lsrs	r3, r3, #2
 8006290:	b29b      	uxth	r3, r3
 8006292:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006294:	88fb      	ldrh	r3, [r7, #6]
 8006296:	f003 0303 	and.w	r3, r3, #3
 800629a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800629c:	2300      	movs	r3, #0
 800629e:	623b      	str	r3, [r7, #32]
 80062a0:	e014      	b.n	80062cc <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ac:	601a      	str	r2, [r3, #0]
    pDest++;
 80062ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b0:	3301      	adds	r3, #1
 80062b2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80062b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b6:	3301      	adds	r3, #1
 80062b8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80062ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062bc:	3301      	adds	r3, #1
 80062be:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80062c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c2:	3301      	adds	r3, #1
 80062c4:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80062c6:	6a3b      	ldr	r3, [r7, #32]
 80062c8:	3301      	adds	r3, #1
 80062ca:	623b      	str	r3, [r7, #32]
 80062cc:	6a3a      	ldr	r2, [r7, #32]
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d3e6      	bcc.n	80062a2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80062d4:	8bfb      	ldrh	r3, [r7, #30]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d01e      	beq.n	8006318 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80062da:	2300      	movs	r3, #0
 80062dc:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062e4:	461a      	mov	r2, r3
 80062e6:	f107 0310 	add.w	r3, r7, #16
 80062ea:	6812      	ldr	r2, [r2, #0]
 80062ec:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	6a3b      	ldr	r3, [r7, #32]
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	00db      	lsls	r3, r3, #3
 80062f6:	fa22 f303 	lsr.w	r3, r2, r3
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fe:	701a      	strb	r2, [r3, #0]
      i++;
 8006300:	6a3b      	ldr	r3, [r7, #32]
 8006302:	3301      	adds	r3, #1
 8006304:	623b      	str	r3, [r7, #32]
      pDest++;
 8006306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006308:	3301      	adds	r3, #1
 800630a:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800630c:	8bfb      	ldrh	r3, [r7, #30]
 800630e:	3b01      	subs	r3, #1
 8006310:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006312:	8bfb      	ldrh	r3, [r7, #30]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1ea      	bne.n	80062ee <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800631a:	4618      	mov	r0, r3
 800631c:	372c      	adds	r7, #44	@ 0x2c
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006326:	b480      	push	{r7}
 8006328:	b085      	sub	sp, #20
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	4013      	ands	r3, r2
 800633c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800633e:	68fb      	ldr	r3, [r7, #12]
}
 8006340:	4618      	mov	r0, r3
 8006342:	3714      	adds	r7, #20
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	460b      	mov	r3, r1
 8006356:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800635c:	78fb      	ldrb	r3, [r7, #3]
 800635e:	015a      	lsls	r2, r3, #5
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	4413      	add	r3, r2
 8006364:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800636c:	78fb      	ldrb	r3, [r7, #3]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	4413      	add	r3, r2
 8006374:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	4013      	ands	r3, r2
 800637e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006380:	68bb      	ldr	r3, [r7, #8]
}
 8006382:	4618      	mov	r0, r3
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800638e:	b480      	push	{r7}
 8006390:	b083      	sub	sp, #12
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	f003 0301 	and.w	r3, r3, #1
}
 800639e:	4618      	mov	r0, r3
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b085      	sub	sp, #20
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063b2:	2300      	movs	r3, #0
 80063b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	3301      	adds	r3, #1
 80063ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063c2:	d901      	bls.n	80063c8 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e01b      	b.n	8006400 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	daf2      	bge.n	80063b6 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80063d0:	2300      	movs	r3, #0
 80063d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	f043 0201 	orr.w	r2, r3, #1
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	3301      	adds	r3, #1
 80063e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063ec:	d901      	bls.n	80063f2 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e006      	b.n	8006400 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d0f0      	beq.n	80063e0 <USB_CoreReset+0x36>

  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800640c:	b084      	sub	sp, #16
 800640e:	b580      	push	{r7, lr}
 8006410:	b086      	sub	sp, #24
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
 8006416:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800641a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800641e:	2300      	movs	r3, #0
 8006420:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800642c:	461a      	mov	r2, r3
 800642e:	2300      	movs	r3, #0
 8006430:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006436:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006442:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800644e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800645e:	2b00      	cmp	r3, #0
 8006460:	d119      	bne.n	8006496 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006462:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006466:	2b01      	cmp	r3, #1
 8006468:	d10a      	bne.n	8006480 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006478:	f043 0304 	orr.w	r3, r3, #4
 800647c:	6013      	str	r3, [r2, #0]
 800647e:	e014      	b.n	80064aa <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800648e:	f023 0304 	bic.w	r3, r3, #4
 8006492:	6013      	str	r3, [r2, #0]
 8006494:	e009      	b.n	80064aa <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80064a4:	f023 0304 	bic.w	r3, r3, #4
 80064a8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064aa:	2110      	movs	r1, #16
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f7ff fe82 	bl	80061b6 <USB_FlushTxFifo>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d001      	beq.n	80064bc <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7ff feac 	bl	800621a <USB_FlushRxFifo>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80064cc:	2300      	movs	r3, #0
 80064ce:	613b      	str	r3, [r7, #16]
 80064d0:	e015      	b.n	80064fe <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	015a      	lsls	r2, r3, #5
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	4413      	add	r3, r2
 80064da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064de:	461a      	mov	r2, r3
 80064e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80064e4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064f2:	461a      	mov	r2, r3
 80064f4:	2300      	movs	r3, #0
 80064f6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	3301      	adds	r3, #1
 80064fc:	613b      	str	r3, [r7, #16]
 80064fe:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006502:	461a      	mov	r2, r3
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	4293      	cmp	r3, r2
 8006508:	d3e3      	bcc.n	80064d2 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006516:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a18      	ldr	r2, [pc, #96]	@ (800657c <USB_HostInit+0x170>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d10b      	bne.n	8006538 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006526:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a15      	ldr	r2, [pc, #84]	@ (8006580 <USB_HostInit+0x174>)
 800652c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a14      	ldr	r2, [pc, #80]	@ (8006584 <USB_HostInit+0x178>)
 8006532:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8006536:	e009      	b.n	800654c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2280      	movs	r2, #128	@ 0x80
 800653c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a11      	ldr	r2, [pc, #68]	@ (8006588 <USB_HostInit+0x17c>)
 8006542:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a11      	ldr	r2, [pc, #68]	@ (800658c <USB_HostInit+0x180>)
 8006548:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800654c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006550:	2b00      	cmp	r3, #0
 8006552:	d105      	bne.n	8006560 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	f043 0210 	orr.w	r2, r3, #16
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	699a      	ldr	r2, [r3, #24]
 8006564:	4b0a      	ldr	r3, [pc, #40]	@ (8006590 <USB_HostInit+0x184>)
 8006566:	4313      	orrs	r3, r2
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800656c:	7dfb      	ldrb	r3, [r7, #23]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3718      	adds	r7, #24
 8006572:	46bd      	mov	sp, r7
 8006574:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006578:	b004      	add	sp, #16
 800657a:	4770      	bx	lr
 800657c:	40040000 	.word	0x40040000
 8006580:	01000200 	.word	0x01000200
 8006584:	00e00300 	.word	0x00e00300
 8006588:	00600080 	.word	0x00600080
 800658c:	004000e0 	.word	0x004000e0
 8006590:	a3200008 	.word	0xa3200008

08006594 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	460b      	mov	r3, r1
 800659e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80065b2:	f023 0303 	bic.w	r3, r3, #3
 80065b6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	78fb      	ldrb	r3, [r7, #3]
 80065c2:	f003 0303 	and.w	r3, r3, #3
 80065c6:	68f9      	ldr	r1, [r7, #12]
 80065c8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80065cc:	4313      	orrs	r3, r2
 80065ce:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80065d0:	78fb      	ldrb	r3, [r7, #3]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d107      	bne.n	80065e6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065dc:	461a      	mov	r2, r3
 80065de:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80065e2:	6053      	str	r3, [r2, #4]
 80065e4:	e00c      	b.n	8006600 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80065e6:	78fb      	ldrb	r3, [r7, #3]
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d107      	bne.n	80065fc <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065f2:	461a      	mov	r2, r3
 80065f4:	f241 7370 	movw	r3, #6000	@ 0x1770
 80065f8:	6053      	str	r3, [r2, #4]
 80065fa:	e001      	b.n	8006600 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e000      	b.n	8006602 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800660e:	b480      	push	{r7}
 8006610:	b085      	sub	sp, #20
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	b29b      	uxth	r3, r3
}
 8006624:	4618      	mov	r0, r3
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006630:	b480      	push	{r7}
 8006632:	b089      	sub	sp, #36	@ 0x24
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	460b      	mov	r3, r1
 800663a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006640:	78fb      	ldrb	r3, [r7, #3]
 8006642:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006644:	2300      	movs	r3, #0
 8006646:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	015a      	lsls	r2, r3, #5
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	4413      	add	r3, r2
 8006650:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	0c9b      	lsrs	r3, r3, #18
 8006658:	f003 0303 	and.w	r3, r3, #3
 800665c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	4413      	add	r3, r2
 8006666:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	0fdb      	lsrs	r3, r3, #31
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	015a      	lsls	r2, r3, #5
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	4413      	add	r3, r2
 800667c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	0fdb      	lsrs	r3, r3, #31
 8006684:	f003 0301 	and.w	r3, r3, #1
 8006688:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f003 0320 	and.w	r3, r3, #32
 8006692:	2b20      	cmp	r3, #32
 8006694:	d10d      	bne.n	80066b2 <USB_HC_Halt+0x82>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10a      	bne.n	80066b2 <USB_HC_Halt+0x82>
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d005      	beq.n	80066ae <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d002      	beq.n	80066ae <USB_HC_Halt+0x7e>
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	2b03      	cmp	r3, #3
 80066ac:	d101      	bne.n	80066b2 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80066ae:	2300      	movs	r3, #0
 80066b0:	e0d8      	b.n	8006864 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d002      	beq.n	80066be <USB_HC_Halt+0x8e>
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d173      	bne.n	80067a6 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	69ba      	ldr	r2, [r7, #24]
 80066ce:	0151      	lsls	r1, r2, #5
 80066d0:	69fa      	ldr	r2, [r7, #28]
 80066d2:	440a      	add	r2, r1
 80066d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066dc:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	f003 0320 	and.w	r3, r3, #32
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d14a      	bne.n	8006780 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ee:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d133      	bne.n	800675e <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	015a      	lsls	r2, r3, #5
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	4413      	add	r3, r2
 80066fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	69ba      	ldr	r2, [r7, #24]
 8006706:	0151      	lsls	r1, r2, #5
 8006708:	69fa      	ldr	r2, [r7, #28]
 800670a:	440a      	add	r2, r1
 800670c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006710:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006714:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	015a      	lsls	r2, r3, #5
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	4413      	add	r3, r2
 800671e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	69ba      	ldr	r2, [r7, #24]
 8006726:	0151      	lsls	r1, r2, #5
 8006728:	69fa      	ldr	r2, [r7, #28]
 800672a:	440a      	add	r2, r1
 800672c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006730:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006734:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	3301      	adds	r3, #1
 800673a:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006742:	d82e      	bhi.n	80067a2 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	015a      	lsls	r2, r3, #5
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	4413      	add	r3, r2
 800674c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006756:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800675a:	d0ec      	beq.n	8006736 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800675c:	e081      	b.n	8006862 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	015a      	lsls	r2, r3, #5
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	4413      	add	r3, r2
 8006766:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	69ba      	ldr	r2, [r7, #24]
 800676e:	0151      	lsls	r1, r2, #5
 8006770:	69fa      	ldr	r2, [r7, #28]
 8006772:	440a      	add	r2, r1
 8006774:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006778:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800677c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800677e:	e070      	b.n	8006862 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	015a      	lsls	r2, r3, #5
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	4413      	add	r3, r2
 8006788:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	69ba      	ldr	r2, [r7, #24]
 8006790:	0151      	lsls	r1, r2, #5
 8006792:	69fa      	ldr	r2, [r7, #28]
 8006794:	440a      	add	r2, r1
 8006796:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800679a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800679e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067a0:	e05f      	b.n	8006862 <USB_HC_Halt+0x232>
            break;
 80067a2:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067a4:	e05d      	b.n	8006862 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	015a      	lsls	r2, r3, #5
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	4413      	add	r3, r2
 80067ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	69ba      	ldr	r2, [r7, #24]
 80067b6:	0151      	lsls	r1, r2, #5
 80067b8:	69fa      	ldr	r2, [r7, #28]
 80067ba:	440a      	add	r2, r1
 80067bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067c4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d133      	bne.n	800683e <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	015a      	lsls	r2, r3, #5
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	4413      	add	r3, r2
 80067de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	69ba      	ldr	r2, [r7, #24]
 80067e6:	0151      	lsls	r1, r2, #5
 80067e8:	69fa      	ldr	r2, [r7, #28]
 80067ea:	440a      	add	r2, r1
 80067ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80067f4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	69ba      	ldr	r2, [r7, #24]
 8006806:	0151      	lsls	r1, r2, #5
 8006808:	69fa      	ldr	r2, [r7, #28]
 800680a:	440a      	add	r2, r1
 800680c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006810:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006814:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	3301      	adds	r3, #1
 800681a:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006822:	d81d      	bhi.n	8006860 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	015a      	lsls	r2, r3, #5
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	4413      	add	r3, r2
 800682c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006836:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800683a:	d0ec      	beq.n	8006816 <USB_HC_Halt+0x1e6>
 800683c:	e011      	b.n	8006862 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	015a      	lsls	r2, r3, #5
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	4413      	add	r3, r2
 8006846:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	69ba      	ldr	r2, [r7, #24]
 800684e:	0151      	lsls	r1, r2, #5
 8006850:	69fa      	ldr	r2, [r7, #28]
 8006852:	440a      	add	r2, r1
 8006854:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006858:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800685c:	6013      	str	r3, [r2, #0]
 800685e:	e000      	b.n	8006862 <USB_HC_Halt+0x232>
          break;
 8006860:	bf00      	nop
    }
  }

  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3724      	adds	r7, #36	@ 0x24
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <memset>:
 8006870:	4402      	add	r2, r0
 8006872:	4603      	mov	r3, r0
 8006874:	4293      	cmp	r3, r2
 8006876:	d100      	bne.n	800687a <memset+0xa>
 8006878:	4770      	bx	lr
 800687a:	f803 1b01 	strb.w	r1, [r3], #1
 800687e:	e7f9      	b.n	8006874 <memset+0x4>

08006880 <__errno>:
 8006880:	4b01      	ldr	r3, [pc, #4]	@ (8006888 <__errno+0x8>)
 8006882:	6818      	ldr	r0, [r3, #0]
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	2000000c 	.word	0x2000000c

0800688c <__libc_init_array>:
 800688c:	b570      	push	{r4, r5, r6, lr}
 800688e:	4d0d      	ldr	r5, [pc, #52]	@ (80068c4 <__libc_init_array+0x38>)
 8006890:	4c0d      	ldr	r4, [pc, #52]	@ (80068c8 <__libc_init_array+0x3c>)
 8006892:	1b64      	subs	r4, r4, r5
 8006894:	10a4      	asrs	r4, r4, #2
 8006896:	2600      	movs	r6, #0
 8006898:	42a6      	cmp	r6, r4
 800689a:	d109      	bne.n	80068b0 <__libc_init_array+0x24>
 800689c:	4d0b      	ldr	r5, [pc, #44]	@ (80068cc <__libc_init_array+0x40>)
 800689e:	4c0c      	ldr	r4, [pc, #48]	@ (80068d0 <__libc_init_array+0x44>)
 80068a0:	f001 faf2 	bl	8007e88 <_init>
 80068a4:	1b64      	subs	r4, r4, r5
 80068a6:	10a4      	asrs	r4, r4, #2
 80068a8:	2600      	movs	r6, #0
 80068aa:	42a6      	cmp	r6, r4
 80068ac:	d105      	bne.n	80068ba <__libc_init_array+0x2e>
 80068ae:	bd70      	pop	{r4, r5, r6, pc}
 80068b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80068b4:	4798      	blx	r3
 80068b6:	3601      	adds	r6, #1
 80068b8:	e7ee      	b.n	8006898 <__libc_init_array+0xc>
 80068ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80068be:	4798      	blx	r3
 80068c0:	3601      	adds	r6, #1
 80068c2:	e7f2      	b.n	80068aa <__libc_init_array+0x1e>
 80068c4:	08008098 	.word	0x08008098
 80068c8:	08008098 	.word	0x08008098
 80068cc:	08008098 	.word	0x08008098
 80068d0:	0800809c 	.word	0x0800809c

080068d4 <roundf>:
 80068d4:	ee10 0a10 	vmov	r0, s0
 80068d8:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80068dc:	3a7f      	subs	r2, #127	@ 0x7f
 80068de:	2a16      	cmp	r2, #22
 80068e0:	dc15      	bgt.n	800690e <roundf+0x3a>
 80068e2:	2a00      	cmp	r2, #0
 80068e4:	da08      	bge.n	80068f8 <roundf+0x24>
 80068e6:	3201      	adds	r2, #1
 80068e8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80068ec:	d101      	bne.n	80068f2 <roundf+0x1e>
 80068ee:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 80068f2:	ee00 3a10 	vmov	s0, r3
 80068f6:	4770      	bx	lr
 80068f8:	4907      	ldr	r1, [pc, #28]	@ (8006918 <roundf+0x44>)
 80068fa:	4111      	asrs	r1, r2
 80068fc:	4201      	tst	r1, r0
 80068fe:	d0fa      	beq.n	80068f6 <roundf+0x22>
 8006900:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006904:	4113      	asrs	r3, r2
 8006906:	4403      	add	r3, r0
 8006908:	ea23 0301 	bic.w	r3, r3, r1
 800690c:	e7f1      	b.n	80068f2 <roundf+0x1e>
 800690e:	2a80      	cmp	r2, #128	@ 0x80
 8006910:	d1f1      	bne.n	80068f6 <roundf+0x22>
 8006912:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006916:	4770      	bx	lr
 8006918:	007fffff 	.word	0x007fffff
 800691c:	00000000 	.word	0x00000000

08006920 <hypot>:
 8006920:	b508      	push	{r3, lr}
 8006922:	ed2d 8b06 	vpush	{d8-d10}
 8006926:	eeb0 aa40 	vmov.f32	s20, s0
 800692a:	eef0 aa60 	vmov.f32	s21, s1
 800692e:	eeb0 9a41 	vmov.f32	s18, s2
 8006932:	eef0 9a61 	vmov.f32	s19, s3
 8006936:	f000 f8db 	bl	8006af0 <__ieee754_hypot>
 800693a:	eeb0 8a40 	vmov.f32	s16, s0
 800693e:	eef0 8a60 	vmov.f32	s17, s1
 8006942:	f000 f875 	bl	8006a30 <finite>
 8006946:	b998      	cbnz	r0, 8006970 <hypot+0x50>
 8006948:	eeb0 0a4a 	vmov.f32	s0, s20
 800694c:	eef0 0a6a 	vmov.f32	s1, s21
 8006950:	f000 f86e 	bl	8006a30 <finite>
 8006954:	b160      	cbz	r0, 8006970 <hypot+0x50>
 8006956:	eeb0 0a49 	vmov.f32	s0, s18
 800695a:	eef0 0a69 	vmov.f32	s1, s19
 800695e:	f000 f867 	bl	8006a30 <finite>
 8006962:	b128      	cbz	r0, 8006970 <hypot+0x50>
 8006964:	f7ff ff8c 	bl	8006880 <__errno>
 8006968:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 8006980 <hypot+0x60>
 800696c:	2322      	movs	r3, #34	@ 0x22
 800696e:	6003      	str	r3, [r0, #0]
 8006970:	eeb0 0a48 	vmov.f32	s0, s16
 8006974:	eef0 0a68 	vmov.f32	s1, s17
 8006978:	ecbd 8b06 	vpop	{d8-d10}
 800697c:	bd08      	pop	{r3, pc}
 800697e:	bf00      	nop
 8006980:	00000000 	.word	0x00000000
 8006984:	7ff00000 	.word	0x7ff00000

08006988 <cos>:
 8006988:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800698a:	ec53 2b10 	vmov	r2, r3, d0
 800698e:	4826      	ldr	r0, [pc, #152]	@ (8006a28 <cos+0xa0>)
 8006990:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006994:	4281      	cmp	r1, r0
 8006996:	d806      	bhi.n	80069a6 <cos+0x1e>
 8006998:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006a20 <cos+0x98>
 800699c:	b005      	add	sp, #20
 800699e:	f85d eb04 	ldr.w	lr, [sp], #4
 80069a2:	f000 bf11 	b.w	80077c8 <__kernel_cos>
 80069a6:	4821      	ldr	r0, [pc, #132]	@ (8006a2c <cos+0xa4>)
 80069a8:	4281      	cmp	r1, r0
 80069aa:	d908      	bls.n	80069be <cos+0x36>
 80069ac:	4610      	mov	r0, r2
 80069ae:	4619      	mov	r1, r3
 80069b0:	f7f9 fc0e 	bl	80001d0 <__aeabi_dsub>
 80069b4:	ec41 0b10 	vmov	d0, r0, r1
 80069b8:	b005      	add	sp, #20
 80069ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80069be:	4668      	mov	r0, sp
 80069c0:	f000 f9ae 	bl	8006d20 <__ieee754_rem_pio2>
 80069c4:	f000 0003 	and.w	r0, r0, #3
 80069c8:	2801      	cmp	r0, #1
 80069ca:	d00b      	beq.n	80069e4 <cos+0x5c>
 80069cc:	2802      	cmp	r0, #2
 80069ce:	d015      	beq.n	80069fc <cos+0x74>
 80069d0:	b9d8      	cbnz	r0, 8006a0a <cos+0x82>
 80069d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80069d6:	ed9d 0b00 	vldr	d0, [sp]
 80069da:	f000 fef5 	bl	80077c8 <__kernel_cos>
 80069de:	ec51 0b10 	vmov	r0, r1, d0
 80069e2:	e7e7      	b.n	80069b4 <cos+0x2c>
 80069e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80069e8:	ed9d 0b00 	vldr	d0, [sp]
 80069ec:	f000 ffb4 	bl	8007958 <__kernel_sin>
 80069f0:	ec53 2b10 	vmov	r2, r3, d0
 80069f4:	4610      	mov	r0, r2
 80069f6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80069fa:	e7db      	b.n	80069b4 <cos+0x2c>
 80069fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a00:	ed9d 0b00 	vldr	d0, [sp]
 8006a04:	f000 fee0 	bl	80077c8 <__kernel_cos>
 8006a08:	e7f2      	b.n	80069f0 <cos+0x68>
 8006a0a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a0e:	ed9d 0b00 	vldr	d0, [sp]
 8006a12:	2001      	movs	r0, #1
 8006a14:	f000 ffa0 	bl	8007958 <__kernel_sin>
 8006a18:	e7e1      	b.n	80069de <cos+0x56>
 8006a1a:	bf00      	nop
 8006a1c:	f3af 8000 	nop.w
	...
 8006a28:	3fe921fb 	.word	0x3fe921fb
 8006a2c:	7fefffff 	.word	0x7fefffff

08006a30 <finite>:
 8006a30:	b082      	sub	sp, #8
 8006a32:	ed8d 0b00 	vstr	d0, [sp]
 8006a36:	9801      	ldr	r0, [sp, #4]
 8006a38:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8006a3c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8006a40:	0fc0      	lsrs	r0, r0, #31
 8006a42:	b002      	add	sp, #8
 8006a44:	4770      	bx	lr
	...

08006a48 <sin>:
 8006a48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a4a:	ec53 2b10 	vmov	r2, r3, d0
 8006a4e:	4826      	ldr	r0, [pc, #152]	@ (8006ae8 <sin+0xa0>)
 8006a50:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006a54:	4281      	cmp	r1, r0
 8006a56:	d807      	bhi.n	8006a68 <sin+0x20>
 8006a58:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006ae0 <sin+0x98>
 8006a5c:	2000      	movs	r0, #0
 8006a5e:	b005      	add	sp, #20
 8006a60:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a64:	f000 bf78 	b.w	8007958 <__kernel_sin>
 8006a68:	4820      	ldr	r0, [pc, #128]	@ (8006aec <sin+0xa4>)
 8006a6a:	4281      	cmp	r1, r0
 8006a6c:	d908      	bls.n	8006a80 <sin+0x38>
 8006a6e:	4610      	mov	r0, r2
 8006a70:	4619      	mov	r1, r3
 8006a72:	f7f9 fbad 	bl	80001d0 <__aeabi_dsub>
 8006a76:	ec41 0b10 	vmov	d0, r0, r1
 8006a7a:	b005      	add	sp, #20
 8006a7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a80:	4668      	mov	r0, sp
 8006a82:	f000 f94d 	bl	8006d20 <__ieee754_rem_pio2>
 8006a86:	f000 0003 	and.w	r0, r0, #3
 8006a8a:	2801      	cmp	r0, #1
 8006a8c:	d00c      	beq.n	8006aa8 <sin+0x60>
 8006a8e:	2802      	cmp	r0, #2
 8006a90:	d011      	beq.n	8006ab6 <sin+0x6e>
 8006a92:	b9e8      	cbnz	r0, 8006ad0 <sin+0x88>
 8006a94:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a98:	ed9d 0b00 	vldr	d0, [sp]
 8006a9c:	2001      	movs	r0, #1
 8006a9e:	f000 ff5b 	bl	8007958 <__kernel_sin>
 8006aa2:	ec51 0b10 	vmov	r0, r1, d0
 8006aa6:	e7e6      	b.n	8006a76 <sin+0x2e>
 8006aa8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006aac:	ed9d 0b00 	vldr	d0, [sp]
 8006ab0:	f000 fe8a 	bl	80077c8 <__kernel_cos>
 8006ab4:	e7f5      	b.n	8006aa2 <sin+0x5a>
 8006ab6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006aba:	ed9d 0b00 	vldr	d0, [sp]
 8006abe:	2001      	movs	r0, #1
 8006ac0:	f000 ff4a 	bl	8007958 <__kernel_sin>
 8006ac4:	ec53 2b10 	vmov	r2, r3, d0
 8006ac8:	4610      	mov	r0, r2
 8006aca:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006ace:	e7d2      	b.n	8006a76 <sin+0x2e>
 8006ad0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006ad4:	ed9d 0b00 	vldr	d0, [sp]
 8006ad8:	f000 fe76 	bl	80077c8 <__kernel_cos>
 8006adc:	e7f2      	b.n	8006ac4 <sin+0x7c>
 8006ade:	bf00      	nop
	...
 8006ae8:	3fe921fb 	.word	0x3fe921fb
 8006aec:	7fefffff 	.word	0x7fefffff

08006af0 <__ieee754_hypot>:
 8006af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af4:	ec51 0b10 	vmov	r0, r1, d0
 8006af8:	ec53 2b11 	vmov	r2, r3, d1
 8006afc:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 8006b00:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8006b04:	42a5      	cmp	r5, r4
 8006b06:	b087      	sub	sp, #28
 8006b08:	da05      	bge.n	8006b16 <__ieee754_hypot+0x26>
 8006b0a:	462e      	mov	r6, r5
 8006b0c:	4625      	mov	r5, r4
 8006b0e:	4634      	mov	r4, r6
 8006b10:	4606      	mov	r6, r0
 8006b12:	4610      	mov	r0, r2
 8006b14:	4632      	mov	r2, r6
 8006b16:	1b2b      	subs	r3, r5, r4
 8006b18:	f1b3 7f70 	cmp.w	r3, #62914560	@ 0x3c00000
 8006b1c:	4629      	mov	r1, r5
 8006b1e:	4682      	mov	sl, r0
 8006b20:	46ab      	mov	fp, r5
 8006b22:	4616      	mov	r6, r2
 8006b24:	4627      	mov	r7, r4
 8006b26:	dd05      	ble.n	8006b34 <__ieee754_hypot+0x44>
 8006b28:	4623      	mov	r3, r4
 8006b2a:	f7f9 fb53 	bl	80001d4 <__adddf3>
 8006b2e:	4682      	mov	sl, r0
 8006b30:	468b      	mov	fp, r1
 8006b32:	e016      	b.n	8006b62 <__ieee754_hypot+0x72>
 8006b34:	4b75      	ldr	r3, [pc, #468]	@ (8006d0c <__ieee754_hypot+0x21c>)
 8006b36:	429d      	cmp	r5, r3
 8006b38:	f340 8096 	ble.w	8006c68 <__ieee754_hypot+0x178>
 8006b3c:	4b74      	ldr	r3, [pc, #464]	@ (8006d10 <__ieee754_hypot+0x220>)
 8006b3e:	429d      	cmp	r5, r3
 8006b40:	dd14      	ble.n	8006b6c <__ieee754_hypot+0x7c>
 8006b42:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8006b46:	4305      	orrs	r5, r0
 8006b48:	d004      	beq.n	8006b54 <__ieee754_hypot+0x64>
 8006b4a:	4623      	mov	r3, r4
 8006b4c:	f7f9 fb42 	bl	80001d4 <__adddf3>
 8006b50:	4682      	mov	sl, r0
 8006b52:	468b      	mov	fp, r1
 8006b54:	f084 44ff 	eor.w	r4, r4, #2139095040	@ 0x7f800000
 8006b58:	f484 04e0 	eor.w	r4, r4, #7340032	@ 0x700000
 8006b5c:	4334      	orrs	r4, r6
 8006b5e:	f000 80d2 	beq.w	8006d06 <__ieee754_hypot+0x216>
 8006b62:	ec4b ab10 	vmov	d0, sl, fp
 8006b66:	b007      	add	sp, #28
 8006b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b6c:	f1a5 5516 	sub.w	r5, r5, #629145600	@ 0x25800000
 8006b70:	f1a4 5416 	sub.w	r4, r4, #629145600	@ 0x25800000
 8006b74:	46ab      	mov	fp, r5
 8006b76:	4627      	mov	r7, r4
 8006b78:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8006b7c:	9301      	str	r3, [sp, #4]
 8006b7e:	4b65      	ldr	r3, [pc, #404]	@ (8006d14 <__ieee754_hypot+0x224>)
 8006b80:	429c      	cmp	r4, r3
 8006b82:	dc19      	bgt.n	8006bb8 <__ieee754_hypot+0xc8>
 8006b84:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8006b88:	da70      	bge.n	8006c6c <__ieee754_hypot+0x17c>
 8006b8a:	4633      	mov	r3, r6
 8006b8c:	4323      	orrs	r3, r4
 8006b8e:	d0e8      	beq.n	8006b62 <__ieee754_hypot+0x72>
 8006b90:	4b61      	ldr	r3, [pc, #388]	@ (8006d18 <__ieee754_hypot+0x228>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	4630      	mov	r0, r6
 8006b96:	4639      	mov	r1, r7
 8006b98:	f7f9 fcd2 	bl	8000540 <__aeabi_dmul>
 8006b9c:	4b5e      	ldr	r3, [pc, #376]	@ (8006d18 <__ieee754_hypot+0x228>)
 8006b9e:	4606      	mov	r6, r0
 8006ba0:	460f      	mov	r7, r1
 8006ba2:	4650      	mov	r0, sl
 8006ba4:	4659      	mov	r1, fp
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f7f9 fcca 	bl	8000540 <__aeabi_dmul>
 8006bac:	9b01      	ldr	r3, [sp, #4]
 8006bae:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8006bb2:	4682      	mov	sl, r0
 8006bb4:	468b      	mov	fp, r1
 8006bb6:	9301      	str	r3, [sp, #4]
 8006bb8:	4632      	mov	r2, r6
 8006bba:	463b      	mov	r3, r7
 8006bbc:	4650      	mov	r0, sl
 8006bbe:	4659      	mov	r1, fp
 8006bc0:	f7f9 fb06 	bl	80001d0 <__aeabi_dsub>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	4680      	mov	r8, r0
 8006bca:	4689      	mov	r9, r1
 8006bcc:	4630      	mov	r0, r6
 8006bce:	4639      	mov	r1, r7
 8006bd0:	f7f9 ff28 	bl	8000a24 <__aeabi_dcmplt>
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	d053      	beq.n	8006c82 <__ieee754_hypot+0x192>
 8006bda:	462b      	mov	r3, r5
 8006bdc:	4610      	mov	r0, r2
 8006bde:	4629      	mov	r1, r5
 8006be0:	4614      	mov	r4, r2
 8006be2:	f7f9 fcad 	bl	8000540 <__aeabi_dmul>
 8006be6:	4632      	mov	r2, r6
 8006be8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bec:	463b      	mov	r3, r7
 8006bee:	4630      	mov	r0, r6
 8006bf0:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 8006bf4:	f7f9 fca4 	bl	8000540 <__aeabi_dmul>
 8006bf8:	4622      	mov	r2, r4
 8006bfa:	4606      	mov	r6, r0
 8006bfc:	460f      	mov	r7, r1
 8006bfe:	462b      	mov	r3, r5
 8006c00:	4650      	mov	r0, sl
 8006c02:	4659      	mov	r1, fp
 8006c04:	f7f9 fae6 	bl	80001d4 <__adddf3>
 8006c08:	4622      	mov	r2, r4
 8006c0a:	4680      	mov	r8, r0
 8006c0c:	4689      	mov	r9, r1
 8006c0e:	462b      	mov	r3, r5
 8006c10:	4650      	mov	r0, sl
 8006c12:	4659      	mov	r1, fp
 8006c14:	f7f9 fadc 	bl	80001d0 <__aeabi_dsub>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	4640      	mov	r0, r8
 8006c1e:	4649      	mov	r1, r9
 8006c20:	f7f9 fc8e 	bl	8000540 <__aeabi_dmul>
 8006c24:	4602      	mov	r2, r0
 8006c26:	460b      	mov	r3, r1
 8006c28:	4630      	mov	r0, r6
 8006c2a:	4639      	mov	r1, r7
 8006c2c:	f7f9 fad0 	bl	80001d0 <__aeabi_dsub>
 8006c30:	4602      	mov	r2, r0
 8006c32:	460b      	mov	r3, r1
 8006c34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c38:	f7f9 faca 	bl	80001d0 <__aeabi_dsub>
 8006c3c:	ec41 0b10 	vmov	d0, r0, r1
 8006c40:	f000 ffcc 	bl	8007bdc <__ieee754_sqrt>
 8006c44:	9b01      	ldr	r3, [sp, #4]
 8006c46:	ec5b ab10 	vmov	sl, fp, d0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d089      	beq.n	8006b62 <__ieee754_hypot+0x72>
 8006c4e:	051b      	lsls	r3, r3, #20
 8006c50:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8006c54:	2000      	movs	r0, #0
 8006c56:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	4650      	mov	r0, sl
 8006c60:	4659      	mov	r1, fp
 8006c62:	f7f9 fc6d 	bl	8000540 <__aeabi_dmul>
 8006c66:	e762      	b.n	8006b2e <__ieee754_hypot+0x3e>
 8006c68:	2300      	movs	r3, #0
 8006c6a:	e787      	b.n	8006b7c <__ieee754_hypot+0x8c>
 8006c6c:	9b01      	ldr	r3, [sp, #4]
 8006c6e:	f105 5516 	add.w	r5, r5, #629145600	@ 0x25800000
 8006c72:	f104 5416 	add.w	r4, r4, #629145600	@ 0x25800000
 8006c76:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8006c7a:	9301      	str	r3, [sp, #4]
 8006c7c:	46ab      	mov	fp, r5
 8006c7e:	4627      	mov	r7, r4
 8006c80:	e79a      	b.n	8006bb8 <__ieee754_hypot+0xc8>
 8006c82:	4623      	mov	r3, r4
 8006c84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f505 1380 	add.w	r3, r5, #1048576	@ 0x100000
 8006c92:	4614      	mov	r4, r2
 8006c94:	461d      	mov	r5, r3
 8006c96:	f7f9 fc53 	bl	8000540 <__aeabi_dmul>
 8006c9a:	4642      	mov	r2, r8
 8006c9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ca0:	464b      	mov	r3, r9
 8006ca2:	4640      	mov	r0, r8
 8006ca4:	f109 4100 	add.w	r1, r9, #2147483648	@ 0x80000000
 8006ca8:	f7f9 fc4a 	bl	8000540 <__aeabi_dmul>
 8006cac:	4652      	mov	r2, sl
 8006cae:	465b      	mov	r3, fp
 8006cb0:	4680      	mov	r8, r0
 8006cb2:	4689      	mov	r9, r1
 8006cb4:	4650      	mov	r0, sl
 8006cb6:	4659      	mov	r1, fp
 8006cb8:	f7f9 fa8c 	bl	80001d4 <__adddf3>
 8006cbc:	4622      	mov	r2, r4
 8006cbe:	462b      	mov	r3, r5
 8006cc0:	f7f9 fa86 	bl	80001d0 <__aeabi_dsub>
 8006cc4:	4632      	mov	r2, r6
 8006cc6:	463b      	mov	r3, r7
 8006cc8:	f7f9 fc3a 	bl	8000540 <__aeabi_dmul>
 8006ccc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cd0:	4682      	mov	sl, r0
 8006cd2:	468b      	mov	fp, r1
 8006cd4:	4630      	mov	r0, r6
 8006cd6:	4639      	mov	r1, r7
 8006cd8:	f7f9 fa7a 	bl	80001d0 <__aeabi_dsub>
 8006cdc:	4622      	mov	r2, r4
 8006cde:	462b      	mov	r3, r5
 8006ce0:	f7f9 fc2e 	bl	8000540 <__aeabi_dmul>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	4650      	mov	r0, sl
 8006cea:	4659      	mov	r1, fp
 8006cec:	f7f9 fa72 	bl	80001d4 <__adddf3>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	4640      	mov	r0, r8
 8006cf6:	4649      	mov	r1, r9
 8006cf8:	f7f9 fa6a 	bl	80001d0 <__aeabi_dsub>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	460b      	mov	r3, r1
 8006d00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d04:	e798      	b.n	8006c38 <__ieee754_hypot+0x148>
 8006d06:	46b2      	mov	sl, r6
 8006d08:	46bb      	mov	fp, r7
 8006d0a:	e72a      	b.n	8006b62 <__ieee754_hypot+0x72>
 8006d0c:	5f300000 	.word	0x5f300000
 8006d10:	7fefffff 	.word	0x7fefffff
 8006d14:	20afffff 	.word	0x20afffff
 8006d18:	7fd00000 	.word	0x7fd00000
 8006d1c:	00000000 	.word	0x00000000

08006d20 <__ieee754_rem_pio2>:
 8006d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d24:	ec57 6b10 	vmov	r6, r7, d0
 8006d28:	4bc5      	ldr	r3, [pc, #788]	@ (8007040 <__ieee754_rem_pio2+0x320>)
 8006d2a:	b08d      	sub	sp, #52	@ 0x34
 8006d2c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8006d30:	4598      	cmp	r8, r3
 8006d32:	4604      	mov	r4, r0
 8006d34:	9704      	str	r7, [sp, #16]
 8006d36:	d807      	bhi.n	8006d48 <__ieee754_rem_pio2+0x28>
 8006d38:	2200      	movs	r2, #0
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	ed80 0b00 	vstr	d0, [r0]
 8006d40:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006d44:	2500      	movs	r5, #0
 8006d46:	e028      	b.n	8006d9a <__ieee754_rem_pio2+0x7a>
 8006d48:	4bbe      	ldr	r3, [pc, #760]	@ (8007044 <__ieee754_rem_pio2+0x324>)
 8006d4a:	4598      	cmp	r8, r3
 8006d4c:	d878      	bhi.n	8006e40 <__ieee754_rem_pio2+0x120>
 8006d4e:	9b04      	ldr	r3, [sp, #16]
 8006d50:	4dbd      	ldr	r5, [pc, #756]	@ (8007048 <__ieee754_rem_pio2+0x328>)
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	4630      	mov	r0, r6
 8006d56:	a3ac      	add	r3, pc, #688	@ (adr r3, 8007008 <__ieee754_rem_pio2+0x2e8>)
 8006d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5c:	4639      	mov	r1, r7
 8006d5e:	dd38      	ble.n	8006dd2 <__ieee754_rem_pio2+0xb2>
 8006d60:	f7f9 fa36 	bl	80001d0 <__aeabi_dsub>
 8006d64:	45a8      	cmp	r8, r5
 8006d66:	4606      	mov	r6, r0
 8006d68:	460f      	mov	r7, r1
 8006d6a:	d01a      	beq.n	8006da2 <__ieee754_rem_pio2+0x82>
 8006d6c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8007010 <__ieee754_rem_pio2+0x2f0>)
 8006d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d72:	f7f9 fa2d 	bl	80001d0 <__aeabi_dsub>
 8006d76:	4602      	mov	r2, r0
 8006d78:	460b      	mov	r3, r1
 8006d7a:	4680      	mov	r8, r0
 8006d7c:	4689      	mov	r9, r1
 8006d7e:	4630      	mov	r0, r6
 8006d80:	4639      	mov	r1, r7
 8006d82:	f7f9 fa25 	bl	80001d0 <__aeabi_dsub>
 8006d86:	a3a2      	add	r3, pc, #648	@ (adr r3, 8007010 <__ieee754_rem_pio2+0x2f0>)
 8006d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8c:	f7f9 fa20 	bl	80001d0 <__aeabi_dsub>
 8006d90:	e9c4 8900 	strd	r8, r9, [r4]
 8006d94:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006d98:	2501      	movs	r5, #1
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	b00d      	add	sp, #52	@ 0x34
 8006d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da2:	a39d      	add	r3, pc, #628	@ (adr r3, 8007018 <__ieee754_rem_pio2+0x2f8>)
 8006da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da8:	f7f9 fa12 	bl	80001d0 <__aeabi_dsub>
 8006dac:	a39c      	add	r3, pc, #624	@ (adr r3, 8007020 <__ieee754_rem_pio2+0x300>)
 8006dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db2:	4606      	mov	r6, r0
 8006db4:	460f      	mov	r7, r1
 8006db6:	f7f9 fa0b 	bl	80001d0 <__aeabi_dsub>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	4680      	mov	r8, r0
 8006dc0:	4689      	mov	r9, r1
 8006dc2:	4630      	mov	r0, r6
 8006dc4:	4639      	mov	r1, r7
 8006dc6:	f7f9 fa03 	bl	80001d0 <__aeabi_dsub>
 8006dca:	a395      	add	r3, pc, #596	@ (adr r3, 8007020 <__ieee754_rem_pio2+0x300>)
 8006dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd0:	e7dc      	b.n	8006d8c <__ieee754_rem_pio2+0x6c>
 8006dd2:	f7f9 f9ff 	bl	80001d4 <__adddf3>
 8006dd6:	45a8      	cmp	r8, r5
 8006dd8:	4606      	mov	r6, r0
 8006dda:	460f      	mov	r7, r1
 8006ddc:	d018      	beq.n	8006e10 <__ieee754_rem_pio2+0xf0>
 8006dde:	a38c      	add	r3, pc, #560	@ (adr r3, 8007010 <__ieee754_rem_pio2+0x2f0>)
 8006de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de4:	f7f9 f9f6 	bl	80001d4 <__adddf3>
 8006de8:	4602      	mov	r2, r0
 8006dea:	460b      	mov	r3, r1
 8006dec:	4680      	mov	r8, r0
 8006dee:	4689      	mov	r9, r1
 8006df0:	4630      	mov	r0, r6
 8006df2:	4639      	mov	r1, r7
 8006df4:	f7f9 f9ec 	bl	80001d0 <__aeabi_dsub>
 8006df8:	a385      	add	r3, pc, #532	@ (adr r3, 8007010 <__ieee754_rem_pio2+0x2f0>)
 8006dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfe:	f7f9 f9e9 	bl	80001d4 <__adddf3>
 8006e02:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006e06:	e9c4 8900 	strd	r8, r9, [r4]
 8006e0a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006e0e:	e7c4      	b.n	8006d9a <__ieee754_rem_pio2+0x7a>
 8006e10:	a381      	add	r3, pc, #516	@ (adr r3, 8007018 <__ieee754_rem_pio2+0x2f8>)
 8006e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e16:	f7f9 f9dd 	bl	80001d4 <__adddf3>
 8006e1a:	a381      	add	r3, pc, #516	@ (adr r3, 8007020 <__ieee754_rem_pio2+0x300>)
 8006e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e20:	4606      	mov	r6, r0
 8006e22:	460f      	mov	r7, r1
 8006e24:	f7f9 f9d6 	bl	80001d4 <__adddf3>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	4680      	mov	r8, r0
 8006e2e:	4689      	mov	r9, r1
 8006e30:	4630      	mov	r0, r6
 8006e32:	4639      	mov	r1, r7
 8006e34:	f7f9 f9cc 	bl	80001d0 <__aeabi_dsub>
 8006e38:	a379      	add	r3, pc, #484	@ (adr r3, 8007020 <__ieee754_rem_pio2+0x300>)
 8006e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3e:	e7de      	b.n	8006dfe <__ieee754_rem_pio2+0xde>
 8006e40:	4b82      	ldr	r3, [pc, #520]	@ (800704c <__ieee754_rem_pio2+0x32c>)
 8006e42:	4598      	cmp	r8, r3
 8006e44:	f200 80d1 	bhi.w	8006fea <__ieee754_rem_pio2+0x2ca>
 8006e48:	f000 fe40 	bl	8007acc <fabs>
 8006e4c:	ec57 6b10 	vmov	r6, r7, d0
 8006e50:	a375      	add	r3, pc, #468	@ (adr r3, 8007028 <__ieee754_rem_pio2+0x308>)
 8006e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e56:	4630      	mov	r0, r6
 8006e58:	4639      	mov	r1, r7
 8006e5a:	f7f9 fb71 	bl	8000540 <__aeabi_dmul>
 8006e5e:	4b7c      	ldr	r3, [pc, #496]	@ (8007050 <__ieee754_rem_pio2+0x330>)
 8006e60:	2200      	movs	r2, #0
 8006e62:	f7f9 f9b7 	bl	80001d4 <__adddf3>
 8006e66:	f7f9 fe05 	bl	8000a74 <__aeabi_d2iz>
 8006e6a:	4605      	mov	r5, r0
 8006e6c:	f7f9 fafe 	bl	800046c <__aeabi_i2d>
 8006e70:	4602      	mov	r2, r0
 8006e72:	460b      	mov	r3, r1
 8006e74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e78:	a363      	add	r3, pc, #396	@ (adr r3, 8007008 <__ieee754_rem_pio2+0x2e8>)
 8006e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7e:	f7f9 fb5f 	bl	8000540 <__aeabi_dmul>
 8006e82:	4602      	mov	r2, r0
 8006e84:	460b      	mov	r3, r1
 8006e86:	4630      	mov	r0, r6
 8006e88:	4639      	mov	r1, r7
 8006e8a:	f7f9 f9a1 	bl	80001d0 <__aeabi_dsub>
 8006e8e:	a360      	add	r3, pc, #384	@ (adr r3, 8007010 <__ieee754_rem_pio2+0x2f0>)
 8006e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e94:	4682      	mov	sl, r0
 8006e96:	468b      	mov	fp, r1
 8006e98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e9c:	f7f9 fb50 	bl	8000540 <__aeabi_dmul>
 8006ea0:	2d1f      	cmp	r5, #31
 8006ea2:	4606      	mov	r6, r0
 8006ea4:	460f      	mov	r7, r1
 8006ea6:	dc0c      	bgt.n	8006ec2 <__ieee754_rem_pio2+0x1a2>
 8006ea8:	4b6a      	ldr	r3, [pc, #424]	@ (8007054 <__ieee754_rem_pio2+0x334>)
 8006eaa:	1e6a      	subs	r2, r5, #1
 8006eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eb0:	4543      	cmp	r3, r8
 8006eb2:	d006      	beq.n	8006ec2 <__ieee754_rem_pio2+0x1a2>
 8006eb4:	4632      	mov	r2, r6
 8006eb6:	463b      	mov	r3, r7
 8006eb8:	4650      	mov	r0, sl
 8006eba:	4659      	mov	r1, fp
 8006ebc:	f7f9 f988 	bl	80001d0 <__aeabi_dsub>
 8006ec0:	e00e      	b.n	8006ee0 <__ieee754_rem_pio2+0x1c0>
 8006ec2:	463b      	mov	r3, r7
 8006ec4:	4632      	mov	r2, r6
 8006ec6:	4650      	mov	r0, sl
 8006ec8:	4659      	mov	r1, fp
 8006eca:	f7f9 f981 	bl	80001d0 <__aeabi_dsub>
 8006ece:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006ed2:	9305      	str	r3, [sp, #20]
 8006ed4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006ed8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8006edc:	2b10      	cmp	r3, #16
 8006ede:	dc02      	bgt.n	8006ee6 <__ieee754_rem_pio2+0x1c6>
 8006ee0:	e9c4 0100 	strd	r0, r1, [r4]
 8006ee4:	e039      	b.n	8006f5a <__ieee754_rem_pio2+0x23a>
 8006ee6:	a34c      	add	r3, pc, #304	@ (adr r3, 8007018 <__ieee754_rem_pio2+0x2f8>)
 8006ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ef0:	f7f9 fb26 	bl	8000540 <__aeabi_dmul>
 8006ef4:	4606      	mov	r6, r0
 8006ef6:	460f      	mov	r7, r1
 8006ef8:	4602      	mov	r2, r0
 8006efa:	460b      	mov	r3, r1
 8006efc:	4650      	mov	r0, sl
 8006efe:	4659      	mov	r1, fp
 8006f00:	f7f9 f966 	bl	80001d0 <__aeabi_dsub>
 8006f04:	4602      	mov	r2, r0
 8006f06:	460b      	mov	r3, r1
 8006f08:	4680      	mov	r8, r0
 8006f0a:	4689      	mov	r9, r1
 8006f0c:	4650      	mov	r0, sl
 8006f0e:	4659      	mov	r1, fp
 8006f10:	f7f9 f95e 	bl	80001d0 <__aeabi_dsub>
 8006f14:	4632      	mov	r2, r6
 8006f16:	463b      	mov	r3, r7
 8006f18:	f7f9 f95a 	bl	80001d0 <__aeabi_dsub>
 8006f1c:	a340      	add	r3, pc, #256	@ (adr r3, 8007020 <__ieee754_rem_pio2+0x300>)
 8006f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f22:	4606      	mov	r6, r0
 8006f24:	460f      	mov	r7, r1
 8006f26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f2a:	f7f9 fb09 	bl	8000540 <__aeabi_dmul>
 8006f2e:	4632      	mov	r2, r6
 8006f30:	463b      	mov	r3, r7
 8006f32:	f7f9 f94d 	bl	80001d0 <__aeabi_dsub>
 8006f36:	4602      	mov	r2, r0
 8006f38:	460b      	mov	r3, r1
 8006f3a:	4606      	mov	r6, r0
 8006f3c:	460f      	mov	r7, r1
 8006f3e:	4640      	mov	r0, r8
 8006f40:	4649      	mov	r1, r9
 8006f42:	f7f9 f945 	bl	80001d0 <__aeabi_dsub>
 8006f46:	9a05      	ldr	r2, [sp, #20]
 8006f48:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	2b31      	cmp	r3, #49	@ 0x31
 8006f50:	dc20      	bgt.n	8006f94 <__ieee754_rem_pio2+0x274>
 8006f52:	e9c4 0100 	strd	r0, r1, [r4]
 8006f56:	46c2      	mov	sl, r8
 8006f58:	46cb      	mov	fp, r9
 8006f5a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006f5e:	4650      	mov	r0, sl
 8006f60:	4642      	mov	r2, r8
 8006f62:	464b      	mov	r3, r9
 8006f64:	4659      	mov	r1, fp
 8006f66:	f7f9 f933 	bl	80001d0 <__aeabi_dsub>
 8006f6a:	463b      	mov	r3, r7
 8006f6c:	4632      	mov	r2, r6
 8006f6e:	f7f9 f92f 	bl	80001d0 <__aeabi_dsub>
 8006f72:	9b04      	ldr	r3, [sp, #16]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006f7a:	f6bf af0e 	bge.w	8006d9a <__ieee754_rem_pio2+0x7a>
 8006f7e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8006f82:	6063      	str	r3, [r4, #4]
 8006f84:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006f88:	f8c4 8000 	str.w	r8, [r4]
 8006f8c:	60a0      	str	r0, [r4, #8]
 8006f8e:	60e3      	str	r3, [r4, #12]
 8006f90:	426d      	negs	r5, r5
 8006f92:	e702      	b.n	8006d9a <__ieee754_rem_pio2+0x7a>
 8006f94:	a326      	add	r3, pc, #152	@ (adr r3, 8007030 <__ieee754_rem_pio2+0x310>)
 8006f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f9e:	f7f9 facf 	bl	8000540 <__aeabi_dmul>
 8006fa2:	4606      	mov	r6, r0
 8006fa4:	460f      	mov	r7, r1
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	460b      	mov	r3, r1
 8006faa:	4640      	mov	r0, r8
 8006fac:	4649      	mov	r1, r9
 8006fae:	f7f9 f90f 	bl	80001d0 <__aeabi_dsub>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	4682      	mov	sl, r0
 8006fb8:	468b      	mov	fp, r1
 8006fba:	4640      	mov	r0, r8
 8006fbc:	4649      	mov	r1, r9
 8006fbe:	f7f9 f907 	bl	80001d0 <__aeabi_dsub>
 8006fc2:	4632      	mov	r2, r6
 8006fc4:	463b      	mov	r3, r7
 8006fc6:	f7f9 f903 	bl	80001d0 <__aeabi_dsub>
 8006fca:	a31b      	add	r3, pc, #108	@ (adr r3, 8007038 <__ieee754_rem_pio2+0x318>)
 8006fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd0:	4606      	mov	r6, r0
 8006fd2:	460f      	mov	r7, r1
 8006fd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fd8:	f7f9 fab2 	bl	8000540 <__aeabi_dmul>
 8006fdc:	4632      	mov	r2, r6
 8006fde:	463b      	mov	r3, r7
 8006fe0:	f7f9 f8f6 	bl	80001d0 <__aeabi_dsub>
 8006fe4:	4606      	mov	r6, r0
 8006fe6:	460f      	mov	r7, r1
 8006fe8:	e764      	b.n	8006eb4 <__ieee754_rem_pio2+0x194>
 8006fea:	4b1b      	ldr	r3, [pc, #108]	@ (8007058 <__ieee754_rem_pio2+0x338>)
 8006fec:	4598      	cmp	r8, r3
 8006fee:	d935      	bls.n	800705c <__ieee754_rem_pio2+0x33c>
 8006ff0:	4632      	mov	r2, r6
 8006ff2:	463b      	mov	r3, r7
 8006ff4:	4630      	mov	r0, r6
 8006ff6:	4639      	mov	r1, r7
 8006ff8:	f7f9 f8ea 	bl	80001d0 <__aeabi_dsub>
 8006ffc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007000:	e9c4 0100 	strd	r0, r1, [r4]
 8007004:	e69e      	b.n	8006d44 <__ieee754_rem_pio2+0x24>
 8007006:	bf00      	nop
 8007008:	54400000 	.word	0x54400000
 800700c:	3ff921fb 	.word	0x3ff921fb
 8007010:	1a626331 	.word	0x1a626331
 8007014:	3dd0b461 	.word	0x3dd0b461
 8007018:	1a600000 	.word	0x1a600000
 800701c:	3dd0b461 	.word	0x3dd0b461
 8007020:	2e037073 	.word	0x2e037073
 8007024:	3ba3198a 	.word	0x3ba3198a
 8007028:	6dc9c883 	.word	0x6dc9c883
 800702c:	3fe45f30 	.word	0x3fe45f30
 8007030:	2e000000 	.word	0x2e000000
 8007034:	3ba3198a 	.word	0x3ba3198a
 8007038:	252049c1 	.word	0x252049c1
 800703c:	397b839a 	.word	0x397b839a
 8007040:	3fe921fb 	.word	0x3fe921fb
 8007044:	4002d97b 	.word	0x4002d97b
 8007048:	3ff921fb 	.word	0x3ff921fb
 800704c:	413921fb 	.word	0x413921fb
 8007050:	3fe00000 	.word	0x3fe00000
 8007054:	08007eb8 	.word	0x08007eb8
 8007058:	7fefffff 	.word	0x7fefffff
 800705c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8007060:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8007064:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8007068:	4630      	mov	r0, r6
 800706a:	460f      	mov	r7, r1
 800706c:	f7f9 fd02 	bl	8000a74 <__aeabi_d2iz>
 8007070:	f7f9 f9fc 	bl	800046c <__aeabi_i2d>
 8007074:	4602      	mov	r2, r0
 8007076:	460b      	mov	r3, r1
 8007078:	4630      	mov	r0, r6
 800707a:	4639      	mov	r1, r7
 800707c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007080:	f7f9 f8a6 	bl	80001d0 <__aeabi_dsub>
 8007084:	4b22      	ldr	r3, [pc, #136]	@ (8007110 <__ieee754_rem_pio2+0x3f0>)
 8007086:	2200      	movs	r2, #0
 8007088:	f7f9 fa5a 	bl	8000540 <__aeabi_dmul>
 800708c:	460f      	mov	r7, r1
 800708e:	4606      	mov	r6, r0
 8007090:	f7f9 fcf0 	bl	8000a74 <__aeabi_d2iz>
 8007094:	f7f9 f9ea 	bl	800046c <__aeabi_i2d>
 8007098:	4602      	mov	r2, r0
 800709a:	460b      	mov	r3, r1
 800709c:	4630      	mov	r0, r6
 800709e:	4639      	mov	r1, r7
 80070a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80070a4:	f7f9 f894 	bl	80001d0 <__aeabi_dsub>
 80070a8:	4b19      	ldr	r3, [pc, #100]	@ (8007110 <__ieee754_rem_pio2+0x3f0>)
 80070aa:	2200      	movs	r2, #0
 80070ac:	f7f9 fa48 	bl	8000540 <__aeabi_dmul>
 80070b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80070b4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80070b8:	f04f 0803 	mov.w	r8, #3
 80070bc:	2600      	movs	r6, #0
 80070be:	2700      	movs	r7, #0
 80070c0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80070c4:	4632      	mov	r2, r6
 80070c6:	463b      	mov	r3, r7
 80070c8:	46c2      	mov	sl, r8
 80070ca:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80070ce:	f7f9 fc9f 	bl	8000a10 <__aeabi_dcmpeq>
 80070d2:	2800      	cmp	r0, #0
 80070d4:	d1f4      	bne.n	80070c0 <__ieee754_rem_pio2+0x3a0>
 80070d6:	4b0f      	ldr	r3, [pc, #60]	@ (8007114 <__ieee754_rem_pio2+0x3f4>)
 80070d8:	9301      	str	r3, [sp, #4]
 80070da:	2302      	movs	r3, #2
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	462a      	mov	r2, r5
 80070e0:	4653      	mov	r3, sl
 80070e2:	4621      	mov	r1, r4
 80070e4:	a806      	add	r0, sp, #24
 80070e6:	f000 f817 	bl	8007118 <__kernel_rem_pio2>
 80070ea:	9b04      	ldr	r3, [sp, #16]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	4605      	mov	r5, r0
 80070f0:	f6bf ae53 	bge.w	8006d9a <__ieee754_rem_pio2+0x7a>
 80070f4:	e9d4 2100 	ldrd	r2, r1, [r4]
 80070f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80070fc:	e9c4 2300 	strd	r2, r3, [r4]
 8007100:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8007104:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007108:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800710c:	e740      	b.n	8006f90 <__ieee754_rem_pio2+0x270>
 800710e:	bf00      	nop
 8007110:	41700000 	.word	0x41700000
 8007114:	08007f38 	.word	0x08007f38

08007118 <__kernel_rem_pio2>:
 8007118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800711c:	ed2d 8b02 	vpush	{d8}
 8007120:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8007124:	f112 0f14 	cmn.w	r2, #20
 8007128:	9306      	str	r3, [sp, #24]
 800712a:	9104      	str	r1, [sp, #16]
 800712c:	4bbe      	ldr	r3, [pc, #760]	@ (8007428 <__kernel_rem_pio2+0x310>)
 800712e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8007130:	9008      	str	r0, [sp, #32]
 8007132:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007136:	9300      	str	r3, [sp, #0]
 8007138:	9b06      	ldr	r3, [sp, #24]
 800713a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800713e:	bfa8      	it	ge
 8007140:	1ed4      	subge	r4, r2, #3
 8007142:	9305      	str	r3, [sp, #20]
 8007144:	bfb2      	itee	lt
 8007146:	2400      	movlt	r4, #0
 8007148:	2318      	movge	r3, #24
 800714a:	fb94 f4f3 	sdivge	r4, r4, r3
 800714e:	f06f 0317 	mvn.w	r3, #23
 8007152:	fb04 3303 	mla	r3, r4, r3, r3
 8007156:	eb03 0b02 	add.w	fp, r3, r2
 800715a:	9b00      	ldr	r3, [sp, #0]
 800715c:	9a05      	ldr	r2, [sp, #20]
 800715e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8007418 <__kernel_rem_pio2+0x300>
 8007162:	eb03 0802 	add.w	r8, r3, r2
 8007166:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8007168:	1aa7      	subs	r7, r4, r2
 800716a:	ae20      	add	r6, sp, #128	@ 0x80
 800716c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007170:	2500      	movs	r5, #0
 8007172:	4545      	cmp	r5, r8
 8007174:	dd13      	ble.n	800719e <__kernel_rem_pio2+0x86>
 8007176:	9b06      	ldr	r3, [sp, #24]
 8007178:	aa20      	add	r2, sp, #128	@ 0x80
 800717a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800717e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8007182:	f04f 0800 	mov.w	r8, #0
 8007186:	9b00      	ldr	r3, [sp, #0]
 8007188:	4598      	cmp	r8, r3
 800718a:	dc31      	bgt.n	80071f0 <__kernel_rem_pio2+0xd8>
 800718c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8007418 <__kernel_rem_pio2+0x300>
 8007190:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007194:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007198:	462f      	mov	r7, r5
 800719a:	2600      	movs	r6, #0
 800719c:	e01b      	b.n	80071d6 <__kernel_rem_pio2+0xbe>
 800719e:	42ef      	cmn	r7, r5
 80071a0:	d407      	bmi.n	80071b2 <__kernel_rem_pio2+0x9a>
 80071a2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80071a6:	f7f9 f961 	bl	800046c <__aeabi_i2d>
 80071aa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80071ae:	3501      	adds	r5, #1
 80071b0:	e7df      	b.n	8007172 <__kernel_rem_pio2+0x5a>
 80071b2:	ec51 0b18 	vmov	r0, r1, d8
 80071b6:	e7f8      	b.n	80071aa <__kernel_rem_pio2+0x92>
 80071b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071bc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80071c0:	f7f9 f9be 	bl	8000540 <__aeabi_dmul>
 80071c4:	4602      	mov	r2, r0
 80071c6:	460b      	mov	r3, r1
 80071c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071cc:	f7f9 f802 	bl	80001d4 <__adddf3>
 80071d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071d4:	3601      	adds	r6, #1
 80071d6:	9b05      	ldr	r3, [sp, #20]
 80071d8:	429e      	cmp	r6, r3
 80071da:	f1a7 0708 	sub.w	r7, r7, #8
 80071de:	ddeb      	ble.n	80071b8 <__kernel_rem_pio2+0xa0>
 80071e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80071e4:	f108 0801 	add.w	r8, r8, #1
 80071e8:	ecaa 7b02 	vstmia	sl!, {d7}
 80071ec:	3508      	adds	r5, #8
 80071ee:	e7ca      	b.n	8007186 <__kernel_rem_pio2+0x6e>
 80071f0:	9b00      	ldr	r3, [sp, #0]
 80071f2:	f8dd 8000 	ldr.w	r8, [sp]
 80071f6:	aa0c      	add	r2, sp, #48	@ 0x30
 80071f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80071fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80071fe:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8007200:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007204:	9309      	str	r3, [sp, #36]	@ 0x24
 8007206:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800720a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800720c:	ab98      	add	r3, sp, #608	@ 0x260
 800720e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007212:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8007216:	ed8d 7b02 	vstr	d7, [sp, #8]
 800721a:	ac0c      	add	r4, sp, #48	@ 0x30
 800721c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800721e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8007222:	46a1      	mov	r9, r4
 8007224:	46c2      	mov	sl, r8
 8007226:	f1ba 0f00 	cmp.w	sl, #0
 800722a:	f1a5 0508 	sub.w	r5, r5, #8
 800722e:	dc77      	bgt.n	8007320 <__kernel_rem_pio2+0x208>
 8007230:	4658      	mov	r0, fp
 8007232:	ed9d 0b02 	vldr	d0, [sp, #8]
 8007236:	f000 fc53 	bl	8007ae0 <scalbn>
 800723a:	ec57 6b10 	vmov	r6, r7, d0
 800723e:	2200      	movs	r2, #0
 8007240:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8007244:	4630      	mov	r0, r6
 8007246:	4639      	mov	r1, r7
 8007248:	f7f9 f97a 	bl	8000540 <__aeabi_dmul>
 800724c:	ec41 0b10 	vmov	d0, r0, r1
 8007250:	f000 fd9e 	bl	8007d90 <floor>
 8007254:	4b75      	ldr	r3, [pc, #468]	@ (800742c <__kernel_rem_pio2+0x314>)
 8007256:	ec51 0b10 	vmov	r0, r1, d0
 800725a:	2200      	movs	r2, #0
 800725c:	f7f9 f970 	bl	8000540 <__aeabi_dmul>
 8007260:	4602      	mov	r2, r0
 8007262:	460b      	mov	r3, r1
 8007264:	4630      	mov	r0, r6
 8007266:	4639      	mov	r1, r7
 8007268:	f7f8 ffb2 	bl	80001d0 <__aeabi_dsub>
 800726c:	460f      	mov	r7, r1
 800726e:	4606      	mov	r6, r0
 8007270:	f7f9 fc00 	bl	8000a74 <__aeabi_d2iz>
 8007274:	9002      	str	r0, [sp, #8]
 8007276:	f7f9 f8f9 	bl	800046c <__aeabi_i2d>
 800727a:	4602      	mov	r2, r0
 800727c:	460b      	mov	r3, r1
 800727e:	4630      	mov	r0, r6
 8007280:	4639      	mov	r1, r7
 8007282:	f7f8 ffa5 	bl	80001d0 <__aeabi_dsub>
 8007286:	f1bb 0f00 	cmp.w	fp, #0
 800728a:	4606      	mov	r6, r0
 800728c:	460f      	mov	r7, r1
 800728e:	dd6c      	ble.n	800736a <__kernel_rem_pio2+0x252>
 8007290:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8007294:	ab0c      	add	r3, sp, #48	@ 0x30
 8007296:	9d02      	ldr	r5, [sp, #8]
 8007298:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800729c:	f1cb 0018 	rsb	r0, fp, #24
 80072a0:	fa43 f200 	asr.w	r2, r3, r0
 80072a4:	4415      	add	r5, r2
 80072a6:	4082      	lsls	r2, r0
 80072a8:	1a9b      	subs	r3, r3, r2
 80072aa:	aa0c      	add	r2, sp, #48	@ 0x30
 80072ac:	9502      	str	r5, [sp, #8]
 80072ae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80072b2:	f1cb 0217 	rsb	r2, fp, #23
 80072b6:	fa43 f902 	asr.w	r9, r3, r2
 80072ba:	f1b9 0f00 	cmp.w	r9, #0
 80072be:	dd64      	ble.n	800738a <__kernel_rem_pio2+0x272>
 80072c0:	9b02      	ldr	r3, [sp, #8]
 80072c2:	2200      	movs	r2, #0
 80072c4:	3301      	adds	r3, #1
 80072c6:	9302      	str	r3, [sp, #8]
 80072c8:	4615      	mov	r5, r2
 80072ca:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80072ce:	4590      	cmp	r8, r2
 80072d0:	f300 80b8 	bgt.w	8007444 <__kernel_rem_pio2+0x32c>
 80072d4:	f1bb 0f00 	cmp.w	fp, #0
 80072d8:	dd07      	ble.n	80072ea <__kernel_rem_pio2+0x1d2>
 80072da:	f1bb 0f01 	cmp.w	fp, #1
 80072de:	f000 80bf 	beq.w	8007460 <__kernel_rem_pio2+0x348>
 80072e2:	f1bb 0f02 	cmp.w	fp, #2
 80072e6:	f000 80c6 	beq.w	8007476 <__kernel_rem_pio2+0x35e>
 80072ea:	f1b9 0f02 	cmp.w	r9, #2
 80072ee:	d14c      	bne.n	800738a <__kernel_rem_pio2+0x272>
 80072f0:	4632      	mov	r2, r6
 80072f2:	463b      	mov	r3, r7
 80072f4:	494e      	ldr	r1, [pc, #312]	@ (8007430 <__kernel_rem_pio2+0x318>)
 80072f6:	2000      	movs	r0, #0
 80072f8:	f7f8 ff6a 	bl	80001d0 <__aeabi_dsub>
 80072fc:	4606      	mov	r6, r0
 80072fe:	460f      	mov	r7, r1
 8007300:	2d00      	cmp	r5, #0
 8007302:	d042      	beq.n	800738a <__kernel_rem_pio2+0x272>
 8007304:	4658      	mov	r0, fp
 8007306:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8007420 <__kernel_rem_pio2+0x308>
 800730a:	f000 fbe9 	bl	8007ae0 <scalbn>
 800730e:	4630      	mov	r0, r6
 8007310:	4639      	mov	r1, r7
 8007312:	ec53 2b10 	vmov	r2, r3, d0
 8007316:	f7f8 ff5b 	bl	80001d0 <__aeabi_dsub>
 800731a:	4606      	mov	r6, r0
 800731c:	460f      	mov	r7, r1
 800731e:	e034      	b.n	800738a <__kernel_rem_pio2+0x272>
 8007320:	4b44      	ldr	r3, [pc, #272]	@ (8007434 <__kernel_rem_pio2+0x31c>)
 8007322:	2200      	movs	r2, #0
 8007324:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007328:	f7f9 f90a 	bl	8000540 <__aeabi_dmul>
 800732c:	f7f9 fba2 	bl	8000a74 <__aeabi_d2iz>
 8007330:	f7f9 f89c 	bl	800046c <__aeabi_i2d>
 8007334:	4b40      	ldr	r3, [pc, #256]	@ (8007438 <__kernel_rem_pio2+0x320>)
 8007336:	2200      	movs	r2, #0
 8007338:	4606      	mov	r6, r0
 800733a:	460f      	mov	r7, r1
 800733c:	f7f9 f900 	bl	8000540 <__aeabi_dmul>
 8007340:	4602      	mov	r2, r0
 8007342:	460b      	mov	r3, r1
 8007344:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007348:	f7f8 ff42 	bl	80001d0 <__aeabi_dsub>
 800734c:	f7f9 fb92 	bl	8000a74 <__aeabi_d2iz>
 8007350:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007354:	f849 0b04 	str.w	r0, [r9], #4
 8007358:	4639      	mov	r1, r7
 800735a:	4630      	mov	r0, r6
 800735c:	f7f8 ff3a 	bl	80001d4 <__adddf3>
 8007360:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007364:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007368:	e75d      	b.n	8007226 <__kernel_rem_pio2+0x10e>
 800736a:	d107      	bne.n	800737c <__kernel_rem_pio2+0x264>
 800736c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8007370:	aa0c      	add	r2, sp, #48	@ 0x30
 8007372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007376:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800737a:	e79e      	b.n	80072ba <__kernel_rem_pio2+0x1a2>
 800737c:	4b2f      	ldr	r3, [pc, #188]	@ (800743c <__kernel_rem_pio2+0x324>)
 800737e:	2200      	movs	r2, #0
 8007380:	f7f9 fb64 	bl	8000a4c <__aeabi_dcmpge>
 8007384:	2800      	cmp	r0, #0
 8007386:	d143      	bne.n	8007410 <__kernel_rem_pio2+0x2f8>
 8007388:	4681      	mov	r9, r0
 800738a:	2200      	movs	r2, #0
 800738c:	2300      	movs	r3, #0
 800738e:	4630      	mov	r0, r6
 8007390:	4639      	mov	r1, r7
 8007392:	f7f9 fb3d 	bl	8000a10 <__aeabi_dcmpeq>
 8007396:	2800      	cmp	r0, #0
 8007398:	f000 80bf 	beq.w	800751a <__kernel_rem_pio2+0x402>
 800739c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80073a0:	2200      	movs	r2, #0
 80073a2:	9900      	ldr	r1, [sp, #0]
 80073a4:	428b      	cmp	r3, r1
 80073a6:	da6e      	bge.n	8007486 <__kernel_rem_pio2+0x36e>
 80073a8:	2a00      	cmp	r2, #0
 80073aa:	f000 8089 	beq.w	80074c0 <__kernel_rem_pio2+0x3a8>
 80073ae:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80073b2:	ab0c      	add	r3, sp, #48	@ 0x30
 80073b4:	f1ab 0b18 	sub.w	fp, fp, #24
 80073b8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d0f6      	beq.n	80073ae <__kernel_rem_pio2+0x296>
 80073c0:	4658      	mov	r0, fp
 80073c2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8007420 <__kernel_rem_pio2+0x308>
 80073c6:	f000 fb8b 	bl	8007ae0 <scalbn>
 80073ca:	f108 0301 	add.w	r3, r8, #1
 80073ce:	00da      	lsls	r2, r3, #3
 80073d0:	9205      	str	r2, [sp, #20]
 80073d2:	ec55 4b10 	vmov	r4, r5, d0
 80073d6:	aa70      	add	r2, sp, #448	@ 0x1c0
 80073d8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8007434 <__kernel_rem_pio2+0x31c>
 80073dc:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80073e0:	4646      	mov	r6, r8
 80073e2:	f04f 0a00 	mov.w	sl, #0
 80073e6:	2e00      	cmp	r6, #0
 80073e8:	f280 80cf 	bge.w	800758a <__kernel_rem_pio2+0x472>
 80073ec:	4644      	mov	r4, r8
 80073ee:	2c00      	cmp	r4, #0
 80073f0:	f2c0 80fd 	blt.w	80075ee <__kernel_rem_pio2+0x4d6>
 80073f4:	4b12      	ldr	r3, [pc, #72]	@ (8007440 <__kernel_rem_pio2+0x328>)
 80073f6:	461f      	mov	r7, r3
 80073f8:	ab70      	add	r3, sp, #448	@ 0x1c0
 80073fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80073fe:	9306      	str	r3, [sp, #24]
 8007400:	f04f 0a00 	mov.w	sl, #0
 8007404:	f04f 0b00 	mov.w	fp, #0
 8007408:	2600      	movs	r6, #0
 800740a:	eba8 0504 	sub.w	r5, r8, r4
 800740e:	e0e2      	b.n	80075d6 <__kernel_rem_pio2+0x4be>
 8007410:	f04f 0902 	mov.w	r9, #2
 8007414:	e754      	b.n	80072c0 <__kernel_rem_pio2+0x1a8>
 8007416:	bf00      	nop
	...
 8007424:	3ff00000 	.word	0x3ff00000
 8007428:	08008080 	.word	0x08008080
 800742c:	40200000 	.word	0x40200000
 8007430:	3ff00000 	.word	0x3ff00000
 8007434:	3e700000 	.word	0x3e700000
 8007438:	41700000 	.word	0x41700000
 800743c:	3fe00000 	.word	0x3fe00000
 8007440:	08008040 	.word	0x08008040
 8007444:	f854 3b04 	ldr.w	r3, [r4], #4
 8007448:	b945      	cbnz	r5, 800745c <__kernel_rem_pio2+0x344>
 800744a:	b123      	cbz	r3, 8007456 <__kernel_rem_pio2+0x33e>
 800744c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8007450:	f844 3c04 	str.w	r3, [r4, #-4]
 8007454:	2301      	movs	r3, #1
 8007456:	3201      	adds	r2, #1
 8007458:	461d      	mov	r5, r3
 800745a:	e738      	b.n	80072ce <__kernel_rem_pio2+0x1b6>
 800745c:	1acb      	subs	r3, r1, r3
 800745e:	e7f7      	b.n	8007450 <__kernel_rem_pio2+0x338>
 8007460:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8007464:	ab0c      	add	r3, sp, #48	@ 0x30
 8007466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800746a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800746e:	a90c      	add	r1, sp, #48	@ 0x30
 8007470:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007474:	e739      	b.n	80072ea <__kernel_rem_pio2+0x1d2>
 8007476:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800747a:	ab0c      	add	r3, sp, #48	@ 0x30
 800747c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007480:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007484:	e7f3      	b.n	800746e <__kernel_rem_pio2+0x356>
 8007486:	a90c      	add	r1, sp, #48	@ 0x30
 8007488:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800748c:	3b01      	subs	r3, #1
 800748e:	430a      	orrs	r2, r1
 8007490:	e787      	b.n	80073a2 <__kernel_rem_pio2+0x28a>
 8007492:	3401      	adds	r4, #1
 8007494:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007498:	2a00      	cmp	r2, #0
 800749a:	d0fa      	beq.n	8007492 <__kernel_rem_pio2+0x37a>
 800749c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800749e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80074a2:	eb0d 0503 	add.w	r5, sp, r3
 80074a6:	9b06      	ldr	r3, [sp, #24]
 80074a8:	aa20      	add	r2, sp, #128	@ 0x80
 80074aa:	4443      	add	r3, r8
 80074ac:	f108 0701 	add.w	r7, r8, #1
 80074b0:	3d98      	subs	r5, #152	@ 0x98
 80074b2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80074b6:	4444      	add	r4, r8
 80074b8:	42bc      	cmp	r4, r7
 80074ba:	da04      	bge.n	80074c6 <__kernel_rem_pio2+0x3ae>
 80074bc:	46a0      	mov	r8, r4
 80074be:	e6a2      	b.n	8007206 <__kernel_rem_pio2+0xee>
 80074c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074c2:	2401      	movs	r4, #1
 80074c4:	e7e6      	b.n	8007494 <__kernel_rem_pio2+0x37c>
 80074c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074c8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80074cc:	f7f8 ffce 	bl	800046c <__aeabi_i2d>
 80074d0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8007798 <__kernel_rem_pio2+0x680>
 80074d4:	e8e6 0102 	strd	r0, r1, [r6], #8
 80074d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80074dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80074e0:	46b2      	mov	sl, r6
 80074e2:	f04f 0800 	mov.w	r8, #0
 80074e6:	9b05      	ldr	r3, [sp, #20]
 80074e8:	4598      	cmp	r8, r3
 80074ea:	dd05      	ble.n	80074f8 <__kernel_rem_pio2+0x3e0>
 80074ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80074f0:	3701      	adds	r7, #1
 80074f2:	eca5 7b02 	vstmia	r5!, {d7}
 80074f6:	e7df      	b.n	80074b8 <__kernel_rem_pio2+0x3a0>
 80074f8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80074fc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007500:	f7f9 f81e 	bl	8000540 <__aeabi_dmul>
 8007504:	4602      	mov	r2, r0
 8007506:	460b      	mov	r3, r1
 8007508:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800750c:	f7f8 fe62 	bl	80001d4 <__adddf3>
 8007510:	f108 0801 	add.w	r8, r8, #1
 8007514:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007518:	e7e5      	b.n	80074e6 <__kernel_rem_pio2+0x3ce>
 800751a:	f1cb 0000 	rsb	r0, fp, #0
 800751e:	ec47 6b10 	vmov	d0, r6, r7
 8007522:	f000 fadd 	bl	8007ae0 <scalbn>
 8007526:	ec55 4b10 	vmov	r4, r5, d0
 800752a:	4b9d      	ldr	r3, [pc, #628]	@ (80077a0 <__kernel_rem_pio2+0x688>)
 800752c:	2200      	movs	r2, #0
 800752e:	4620      	mov	r0, r4
 8007530:	4629      	mov	r1, r5
 8007532:	f7f9 fa8b 	bl	8000a4c <__aeabi_dcmpge>
 8007536:	b300      	cbz	r0, 800757a <__kernel_rem_pio2+0x462>
 8007538:	4b9a      	ldr	r3, [pc, #616]	@ (80077a4 <__kernel_rem_pio2+0x68c>)
 800753a:	2200      	movs	r2, #0
 800753c:	4620      	mov	r0, r4
 800753e:	4629      	mov	r1, r5
 8007540:	f7f8 fffe 	bl	8000540 <__aeabi_dmul>
 8007544:	f7f9 fa96 	bl	8000a74 <__aeabi_d2iz>
 8007548:	4606      	mov	r6, r0
 800754a:	f7f8 ff8f 	bl	800046c <__aeabi_i2d>
 800754e:	4b94      	ldr	r3, [pc, #592]	@ (80077a0 <__kernel_rem_pio2+0x688>)
 8007550:	2200      	movs	r2, #0
 8007552:	f7f8 fff5 	bl	8000540 <__aeabi_dmul>
 8007556:	460b      	mov	r3, r1
 8007558:	4602      	mov	r2, r0
 800755a:	4629      	mov	r1, r5
 800755c:	4620      	mov	r0, r4
 800755e:	f7f8 fe37 	bl	80001d0 <__aeabi_dsub>
 8007562:	f7f9 fa87 	bl	8000a74 <__aeabi_d2iz>
 8007566:	ab0c      	add	r3, sp, #48	@ 0x30
 8007568:	f10b 0b18 	add.w	fp, fp, #24
 800756c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007570:	f108 0801 	add.w	r8, r8, #1
 8007574:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8007578:	e722      	b.n	80073c0 <__kernel_rem_pio2+0x2a8>
 800757a:	4620      	mov	r0, r4
 800757c:	4629      	mov	r1, r5
 800757e:	f7f9 fa79 	bl	8000a74 <__aeabi_d2iz>
 8007582:	ab0c      	add	r3, sp, #48	@ 0x30
 8007584:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007588:	e71a      	b.n	80073c0 <__kernel_rem_pio2+0x2a8>
 800758a:	ab0c      	add	r3, sp, #48	@ 0x30
 800758c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007590:	f7f8 ff6c 	bl	800046c <__aeabi_i2d>
 8007594:	4622      	mov	r2, r4
 8007596:	462b      	mov	r3, r5
 8007598:	f7f8 ffd2 	bl	8000540 <__aeabi_dmul>
 800759c:	4652      	mov	r2, sl
 800759e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80075a2:	465b      	mov	r3, fp
 80075a4:	4620      	mov	r0, r4
 80075a6:	4629      	mov	r1, r5
 80075a8:	f7f8 ffca 	bl	8000540 <__aeabi_dmul>
 80075ac:	3e01      	subs	r6, #1
 80075ae:	4604      	mov	r4, r0
 80075b0:	460d      	mov	r5, r1
 80075b2:	e718      	b.n	80073e6 <__kernel_rem_pio2+0x2ce>
 80075b4:	9906      	ldr	r1, [sp, #24]
 80075b6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80075ba:	9106      	str	r1, [sp, #24]
 80075bc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80075c0:	f7f8 ffbe 	bl	8000540 <__aeabi_dmul>
 80075c4:	4602      	mov	r2, r0
 80075c6:	460b      	mov	r3, r1
 80075c8:	4650      	mov	r0, sl
 80075ca:	4659      	mov	r1, fp
 80075cc:	f7f8 fe02 	bl	80001d4 <__adddf3>
 80075d0:	3601      	adds	r6, #1
 80075d2:	4682      	mov	sl, r0
 80075d4:	468b      	mov	fp, r1
 80075d6:	9b00      	ldr	r3, [sp, #0]
 80075d8:	429e      	cmp	r6, r3
 80075da:	dc01      	bgt.n	80075e0 <__kernel_rem_pio2+0x4c8>
 80075dc:	42b5      	cmp	r5, r6
 80075de:	dae9      	bge.n	80075b4 <__kernel_rem_pio2+0x49c>
 80075e0:	ab48      	add	r3, sp, #288	@ 0x120
 80075e2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80075e6:	e9c5 ab00 	strd	sl, fp, [r5]
 80075ea:	3c01      	subs	r4, #1
 80075ec:	e6ff      	b.n	80073ee <__kernel_rem_pio2+0x2d6>
 80075ee:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	dc0b      	bgt.n	800760c <__kernel_rem_pio2+0x4f4>
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	dc39      	bgt.n	800766c <__kernel_rem_pio2+0x554>
 80075f8:	d05d      	beq.n	80076b6 <__kernel_rem_pio2+0x59e>
 80075fa:	9b02      	ldr	r3, [sp, #8]
 80075fc:	f003 0007 	and.w	r0, r3, #7
 8007600:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8007604:	ecbd 8b02 	vpop	{d8}
 8007608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800760c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800760e:	2b03      	cmp	r3, #3
 8007610:	d1f3      	bne.n	80075fa <__kernel_rem_pio2+0x4e2>
 8007612:	9b05      	ldr	r3, [sp, #20]
 8007614:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007618:	eb0d 0403 	add.w	r4, sp, r3
 800761c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8007620:	4625      	mov	r5, r4
 8007622:	46c2      	mov	sl, r8
 8007624:	f1ba 0f00 	cmp.w	sl, #0
 8007628:	f1a5 0508 	sub.w	r5, r5, #8
 800762c:	dc6b      	bgt.n	8007706 <__kernel_rem_pio2+0x5ee>
 800762e:	4645      	mov	r5, r8
 8007630:	2d01      	cmp	r5, #1
 8007632:	f1a4 0408 	sub.w	r4, r4, #8
 8007636:	f300 8087 	bgt.w	8007748 <__kernel_rem_pio2+0x630>
 800763a:	9c05      	ldr	r4, [sp, #20]
 800763c:	ab48      	add	r3, sp, #288	@ 0x120
 800763e:	441c      	add	r4, r3
 8007640:	2000      	movs	r0, #0
 8007642:	2100      	movs	r1, #0
 8007644:	f1b8 0f01 	cmp.w	r8, #1
 8007648:	f300 809c 	bgt.w	8007784 <__kernel_rem_pio2+0x66c>
 800764c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8007650:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8007654:	f1b9 0f00 	cmp.w	r9, #0
 8007658:	f040 80a6 	bne.w	80077a8 <__kernel_rem_pio2+0x690>
 800765c:	9b04      	ldr	r3, [sp, #16]
 800765e:	e9c3 7800 	strd	r7, r8, [r3]
 8007662:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007666:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800766a:	e7c6      	b.n	80075fa <__kernel_rem_pio2+0x4e2>
 800766c:	9d05      	ldr	r5, [sp, #20]
 800766e:	ab48      	add	r3, sp, #288	@ 0x120
 8007670:	441d      	add	r5, r3
 8007672:	4644      	mov	r4, r8
 8007674:	2000      	movs	r0, #0
 8007676:	2100      	movs	r1, #0
 8007678:	2c00      	cmp	r4, #0
 800767a:	da35      	bge.n	80076e8 <__kernel_rem_pio2+0x5d0>
 800767c:	f1b9 0f00 	cmp.w	r9, #0
 8007680:	d038      	beq.n	80076f4 <__kernel_rem_pio2+0x5dc>
 8007682:	4602      	mov	r2, r0
 8007684:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007688:	9c04      	ldr	r4, [sp, #16]
 800768a:	e9c4 2300 	strd	r2, r3, [r4]
 800768e:	4602      	mov	r2, r0
 8007690:	460b      	mov	r3, r1
 8007692:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8007696:	f7f8 fd9b 	bl	80001d0 <__aeabi_dsub>
 800769a:	ad4a      	add	r5, sp, #296	@ 0x128
 800769c:	2401      	movs	r4, #1
 800769e:	45a0      	cmp	r8, r4
 80076a0:	da2b      	bge.n	80076fa <__kernel_rem_pio2+0x5e2>
 80076a2:	f1b9 0f00 	cmp.w	r9, #0
 80076a6:	d002      	beq.n	80076ae <__kernel_rem_pio2+0x596>
 80076a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80076ac:	4619      	mov	r1, r3
 80076ae:	9b04      	ldr	r3, [sp, #16]
 80076b0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80076b4:	e7a1      	b.n	80075fa <__kernel_rem_pio2+0x4e2>
 80076b6:	9c05      	ldr	r4, [sp, #20]
 80076b8:	ab48      	add	r3, sp, #288	@ 0x120
 80076ba:	441c      	add	r4, r3
 80076bc:	2000      	movs	r0, #0
 80076be:	2100      	movs	r1, #0
 80076c0:	f1b8 0f00 	cmp.w	r8, #0
 80076c4:	da09      	bge.n	80076da <__kernel_rem_pio2+0x5c2>
 80076c6:	f1b9 0f00 	cmp.w	r9, #0
 80076ca:	d002      	beq.n	80076d2 <__kernel_rem_pio2+0x5ba>
 80076cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80076d0:	4619      	mov	r1, r3
 80076d2:	9b04      	ldr	r3, [sp, #16]
 80076d4:	e9c3 0100 	strd	r0, r1, [r3]
 80076d8:	e78f      	b.n	80075fa <__kernel_rem_pio2+0x4e2>
 80076da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80076de:	f7f8 fd79 	bl	80001d4 <__adddf3>
 80076e2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80076e6:	e7eb      	b.n	80076c0 <__kernel_rem_pio2+0x5a8>
 80076e8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80076ec:	f7f8 fd72 	bl	80001d4 <__adddf3>
 80076f0:	3c01      	subs	r4, #1
 80076f2:	e7c1      	b.n	8007678 <__kernel_rem_pio2+0x560>
 80076f4:	4602      	mov	r2, r0
 80076f6:	460b      	mov	r3, r1
 80076f8:	e7c6      	b.n	8007688 <__kernel_rem_pio2+0x570>
 80076fa:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80076fe:	f7f8 fd69 	bl	80001d4 <__adddf3>
 8007702:	3401      	adds	r4, #1
 8007704:	e7cb      	b.n	800769e <__kernel_rem_pio2+0x586>
 8007706:	ed95 7b00 	vldr	d7, [r5]
 800770a:	ed8d 7b00 	vstr	d7, [sp]
 800770e:	ed95 7b02 	vldr	d7, [r5, #8]
 8007712:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007716:	ec53 2b17 	vmov	r2, r3, d7
 800771a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800771e:	f7f8 fd59 	bl	80001d4 <__adddf3>
 8007722:	4602      	mov	r2, r0
 8007724:	460b      	mov	r3, r1
 8007726:	4606      	mov	r6, r0
 8007728:	460f      	mov	r7, r1
 800772a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800772e:	f7f8 fd4f 	bl	80001d0 <__aeabi_dsub>
 8007732:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007736:	f7f8 fd4d 	bl	80001d4 <__adddf3>
 800773a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800773e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8007742:	e9c5 6700 	strd	r6, r7, [r5]
 8007746:	e76d      	b.n	8007624 <__kernel_rem_pio2+0x50c>
 8007748:	ed94 7b00 	vldr	d7, [r4]
 800774c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8007750:	ec51 0b17 	vmov	r0, r1, d7
 8007754:	4652      	mov	r2, sl
 8007756:	465b      	mov	r3, fp
 8007758:	ed8d 7b00 	vstr	d7, [sp]
 800775c:	f7f8 fd3a 	bl	80001d4 <__adddf3>
 8007760:	4602      	mov	r2, r0
 8007762:	460b      	mov	r3, r1
 8007764:	4606      	mov	r6, r0
 8007766:	460f      	mov	r7, r1
 8007768:	e9dd 0100 	ldrd	r0, r1, [sp]
 800776c:	f7f8 fd30 	bl	80001d0 <__aeabi_dsub>
 8007770:	4652      	mov	r2, sl
 8007772:	465b      	mov	r3, fp
 8007774:	f7f8 fd2e 	bl	80001d4 <__adddf3>
 8007778:	3d01      	subs	r5, #1
 800777a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800777e:	e9c4 6700 	strd	r6, r7, [r4]
 8007782:	e755      	b.n	8007630 <__kernel_rem_pio2+0x518>
 8007784:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007788:	f7f8 fd24 	bl	80001d4 <__adddf3>
 800778c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007790:	e758      	b.n	8007644 <__kernel_rem_pio2+0x52c>
 8007792:	bf00      	nop
 8007794:	f3af 8000 	nop.w
	...
 80077a0:	41700000 	.word	0x41700000
 80077a4:	3e700000 	.word	0x3e700000
 80077a8:	9b04      	ldr	r3, [sp, #16]
 80077aa:	9a04      	ldr	r2, [sp, #16]
 80077ac:	601f      	str	r7, [r3, #0]
 80077ae:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80077b2:	605c      	str	r4, [r3, #4]
 80077b4:	609d      	str	r5, [r3, #8]
 80077b6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80077ba:	60d3      	str	r3, [r2, #12]
 80077bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80077c0:	6110      	str	r0, [r2, #16]
 80077c2:	6153      	str	r3, [r2, #20]
 80077c4:	e719      	b.n	80075fa <__kernel_rem_pio2+0x4e2>
 80077c6:	bf00      	nop

080077c8 <__kernel_cos>:
 80077c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077cc:	ec57 6b10 	vmov	r6, r7, d0
 80077d0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80077d4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80077d8:	ed8d 1b00 	vstr	d1, [sp]
 80077dc:	d206      	bcs.n	80077ec <__kernel_cos+0x24>
 80077de:	4630      	mov	r0, r6
 80077e0:	4639      	mov	r1, r7
 80077e2:	f7f9 f947 	bl	8000a74 <__aeabi_d2iz>
 80077e6:	2800      	cmp	r0, #0
 80077e8:	f000 8088 	beq.w	80078fc <__kernel_cos+0x134>
 80077ec:	4632      	mov	r2, r6
 80077ee:	463b      	mov	r3, r7
 80077f0:	4630      	mov	r0, r6
 80077f2:	4639      	mov	r1, r7
 80077f4:	f7f8 fea4 	bl	8000540 <__aeabi_dmul>
 80077f8:	4b51      	ldr	r3, [pc, #324]	@ (8007940 <__kernel_cos+0x178>)
 80077fa:	2200      	movs	r2, #0
 80077fc:	4604      	mov	r4, r0
 80077fe:	460d      	mov	r5, r1
 8007800:	f7f8 fe9e 	bl	8000540 <__aeabi_dmul>
 8007804:	a340      	add	r3, pc, #256	@ (adr r3, 8007908 <__kernel_cos+0x140>)
 8007806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780a:	4682      	mov	sl, r0
 800780c:	468b      	mov	fp, r1
 800780e:	4620      	mov	r0, r4
 8007810:	4629      	mov	r1, r5
 8007812:	f7f8 fe95 	bl	8000540 <__aeabi_dmul>
 8007816:	a33e      	add	r3, pc, #248	@ (adr r3, 8007910 <__kernel_cos+0x148>)
 8007818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781c:	f7f8 fcda 	bl	80001d4 <__adddf3>
 8007820:	4622      	mov	r2, r4
 8007822:	462b      	mov	r3, r5
 8007824:	f7f8 fe8c 	bl	8000540 <__aeabi_dmul>
 8007828:	a33b      	add	r3, pc, #236	@ (adr r3, 8007918 <__kernel_cos+0x150>)
 800782a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782e:	f7f8 fccf 	bl	80001d0 <__aeabi_dsub>
 8007832:	4622      	mov	r2, r4
 8007834:	462b      	mov	r3, r5
 8007836:	f7f8 fe83 	bl	8000540 <__aeabi_dmul>
 800783a:	a339      	add	r3, pc, #228	@ (adr r3, 8007920 <__kernel_cos+0x158>)
 800783c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007840:	f7f8 fcc8 	bl	80001d4 <__adddf3>
 8007844:	4622      	mov	r2, r4
 8007846:	462b      	mov	r3, r5
 8007848:	f7f8 fe7a 	bl	8000540 <__aeabi_dmul>
 800784c:	a336      	add	r3, pc, #216	@ (adr r3, 8007928 <__kernel_cos+0x160>)
 800784e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007852:	f7f8 fcbd 	bl	80001d0 <__aeabi_dsub>
 8007856:	4622      	mov	r2, r4
 8007858:	462b      	mov	r3, r5
 800785a:	f7f8 fe71 	bl	8000540 <__aeabi_dmul>
 800785e:	a334      	add	r3, pc, #208	@ (adr r3, 8007930 <__kernel_cos+0x168>)
 8007860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007864:	f7f8 fcb6 	bl	80001d4 <__adddf3>
 8007868:	4622      	mov	r2, r4
 800786a:	462b      	mov	r3, r5
 800786c:	f7f8 fe68 	bl	8000540 <__aeabi_dmul>
 8007870:	4622      	mov	r2, r4
 8007872:	462b      	mov	r3, r5
 8007874:	f7f8 fe64 	bl	8000540 <__aeabi_dmul>
 8007878:	e9dd 2300 	ldrd	r2, r3, [sp]
 800787c:	4604      	mov	r4, r0
 800787e:	460d      	mov	r5, r1
 8007880:	4630      	mov	r0, r6
 8007882:	4639      	mov	r1, r7
 8007884:	f7f8 fe5c 	bl	8000540 <__aeabi_dmul>
 8007888:	460b      	mov	r3, r1
 800788a:	4602      	mov	r2, r0
 800788c:	4629      	mov	r1, r5
 800788e:	4620      	mov	r0, r4
 8007890:	f7f8 fc9e 	bl	80001d0 <__aeabi_dsub>
 8007894:	4b2b      	ldr	r3, [pc, #172]	@ (8007944 <__kernel_cos+0x17c>)
 8007896:	4598      	cmp	r8, r3
 8007898:	4606      	mov	r6, r0
 800789a:	460f      	mov	r7, r1
 800789c:	d810      	bhi.n	80078c0 <__kernel_cos+0xf8>
 800789e:	4602      	mov	r2, r0
 80078a0:	460b      	mov	r3, r1
 80078a2:	4650      	mov	r0, sl
 80078a4:	4659      	mov	r1, fp
 80078a6:	f7f8 fc93 	bl	80001d0 <__aeabi_dsub>
 80078aa:	460b      	mov	r3, r1
 80078ac:	4926      	ldr	r1, [pc, #152]	@ (8007948 <__kernel_cos+0x180>)
 80078ae:	4602      	mov	r2, r0
 80078b0:	2000      	movs	r0, #0
 80078b2:	f7f8 fc8d 	bl	80001d0 <__aeabi_dsub>
 80078b6:	ec41 0b10 	vmov	d0, r0, r1
 80078ba:	b003      	add	sp, #12
 80078bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078c0:	4b22      	ldr	r3, [pc, #136]	@ (800794c <__kernel_cos+0x184>)
 80078c2:	4921      	ldr	r1, [pc, #132]	@ (8007948 <__kernel_cos+0x180>)
 80078c4:	4598      	cmp	r8, r3
 80078c6:	bf8c      	ite	hi
 80078c8:	4d21      	ldrhi	r5, [pc, #132]	@ (8007950 <__kernel_cos+0x188>)
 80078ca:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80078ce:	2400      	movs	r4, #0
 80078d0:	4622      	mov	r2, r4
 80078d2:	462b      	mov	r3, r5
 80078d4:	2000      	movs	r0, #0
 80078d6:	f7f8 fc7b 	bl	80001d0 <__aeabi_dsub>
 80078da:	4622      	mov	r2, r4
 80078dc:	4680      	mov	r8, r0
 80078de:	4689      	mov	r9, r1
 80078e0:	462b      	mov	r3, r5
 80078e2:	4650      	mov	r0, sl
 80078e4:	4659      	mov	r1, fp
 80078e6:	f7f8 fc73 	bl	80001d0 <__aeabi_dsub>
 80078ea:	4632      	mov	r2, r6
 80078ec:	463b      	mov	r3, r7
 80078ee:	f7f8 fc6f 	bl	80001d0 <__aeabi_dsub>
 80078f2:	4602      	mov	r2, r0
 80078f4:	460b      	mov	r3, r1
 80078f6:	4640      	mov	r0, r8
 80078f8:	4649      	mov	r1, r9
 80078fa:	e7da      	b.n	80078b2 <__kernel_cos+0xea>
 80078fc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8007938 <__kernel_cos+0x170>
 8007900:	e7db      	b.n	80078ba <__kernel_cos+0xf2>
 8007902:	bf00      	nop
 8007904:	f3af 8000 	nop.w
 8007908:	be8838d4 	.word	0xbe8838d4
 800790c:	bda8fae9 	.word	0xbda8fae9
 8007910:	bdb4b1c4 	.word	0xbdb4b1c4
 8007914:	3e21ee9e 	.word	0x3e21ee9e
 8007918:	809c52ad 	.word	0x809c52ad
 800791c:	3e927e4f 	.word	0x3e927e4f
 8007920:	19cb1590 	.word	0x19cb1590
 8007924:	3efa01a0 	.word	0x3efa01a0
 8007928:	16c15177 	.word	0x16c15177
 800792c:	3f56c16c 	.word	0x3f56c16c
 8007930:	5555554c 	.word	0x5555554c
 8007934:	3fa55555 	.word	0x3fa55555
 8007938:	00000000 	.word	0x00000000
 800793c:	3ff00000 	.word	0x3ff00000
 8007940:	3fe00000 	.word	0x3fe00000
 8007944:	3fd33332 	.word	0x3fd33332
 8007948:	3ff00000 	.word	0x3ff00000
 800794c:	3fe90000 	.word	0x3fe90000
 8007950:	3fd20000 	.word	0x3fd20000
 8007954:	00000000 	.word	0x00000000

08007958 <__kernel_sin>:
 8007958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800795c:	ec55 4b10 	vmov	r4, r5, d0
 8007960:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007964:	b085      	sub	sp, #20
 8007966:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800796a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800796e:	4680      	mov	r8, r0
 8007970:	d205      	bcs.n	800797e <__kernel_sin+0x26>
 8007972:	4620      	mov	r0, r4
 8007974:	4629      	mov	r1, r5
 8007976:	f7f9 f87d 	bl	8000a74 <__aeabi_d2iz>
 800797a:	2800      	cmp	r0, #0
 800797c:	d052      	beq.n	8007a24 <__kernel_sin+0xcc>
 800797e:	4622      	mov	r2, r4
 8007980:	462b      	mov	r3, r5
 8007982:	4620      	mov	r0, r4
 8007984:	4629      	mov	r1, r5
 8007986:	f7f8 fddb 	bl	8000540 <__aeabi_dmul>
 800798a:	4682      	mov	sl, r0
 800798c:	468b      	mov	fp, r1
 800798e:	4602      	mov	r2, r0
 8007990:	460b      	mov	r3, r1
 8007992:	4620      	mov	r0, r4
 8007994:	4629      	mov	r1, r5
 8007996:	f7f8 fdd3 	bl	8000540 <__aeabi_dmul>
 800799a:	a342      	add	r3, pc, #264	@ (adr r3, 8007aa4 <__kernel_sin+0x14c>)
 800799c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a0:	e9cd 0100 	strd	r0, r1, [sp]
 80079a4:	4650      	mov	r0, sl
 80079a6:	4659      	mov	r1, fp
 80079a8:	f7f8 fdca 	bl	8000540 <__aeabi_dmul>
 80079ac:	a33f      	add	r3, pc, #252	@ (adr r3, 8007aac <__kernel_sin+0x154>)
 80079ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b2:	f7f8 fc0d 	bl	80001d0 <__aeabi_dsub>
 80079b6:	4652      	mov	r2, sl
 80079b8:	465b      	mov	r3, fp
 80079ba:	f7f8 fdc1 	bl	8000540 <__aeabi_dmul>
 80079be:	a33d      	add	r3, pc, #244	@ (adr r3, 8007ab4 <__kernel_sin+0x15c>)
 80079c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c4:	f7f8 fc06 	bl	80001d4 <__adddf3>
 80079c8:	4652      	mov	r2, sl
 80079ca:	465b      	mov	r3, fp
 80079cc:	f7f8 fdb8 	bl	8000540 <__aeabi_dmul>
 80079d0:	a33a      	add	r3, pc, #232	@ (adr r3, 8007abc <__kernel_sin+0x164>)
 80079d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d6:	f7f8 fbfb 	bl	80001d0 <__aeabi_dsub>
 80079da:	4652      	mov	r2, sl
 80079dc:	465b      	mov	r3, fp
 80079de:	f7f8 fdaf 	bl	8000540 <__aeabi_dmul>
 80079e2:	a338      	add	r3, pc, #224	@ (adr r3, 8007ac4 <__kernel_sin+0x16c>)
 80079e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e8:	f7f8 fbf4 	bl	80001d4 <__adddf3>
 80079ec:	4606      	mov	r6, r0
 80079ee:	460f      	mov	r7, r1
 80079f0:	f1b8 0f00 	cmp.w	r8, #0
 80079f4:	d11b      	bne.n	8007a2e <__kernel_sin+0xd6>
 80079f6:	4602      	mov	r2, r0
 80079f8:	460b      	mov	r3, r1
 80079fa:	4650      	mov	r0, sl
 80079fc:	4659      	mov	r1, fp
 80079fe:	f7f8 fd9f 	bl	8000540 <__aeabi_dmul>
 8007a02:	a325      	add	r3, pc, #148	@ (adr r3, 8007a98 <__kernel_sin+0x140>)
 8007a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a08:	f7f8 fbe2 	bl	80001d0 <__aeabi_dsub>
 8007a0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a10:	f7f8 fd96 	bl	8000540 <__aeabi_dmul>
 8007a14:	4602      	mov	r2, r0
 8007a16:	460b      	mov	r3, r1
 8007a18:	4620      	mov	r0, r4
 8007a1a:	4629      	mov	r1, r5
 8007a1c:	f7f8 fbda 	bl	80001d4 <__adddf3>
 8007a20:	4604      	mov	r4, r0
 8007a22:	460d      	mov	r5, r1
 8007a24:	ec45 4b10 	vmov	d0, r4, r5
 8007a28:	b005      	add	sp, #20
 8007a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a32:	4b1b      	ldr	r3, [pc, #108]	@ (8007aa0 <__kernel_sin+0x148>)
 8007a34:	2200      	movs	r2, #0
 8007a36:	f7f8 fd83 	bl	8000540 <__aeabi_dmul>
 8007a3a:	4632      	mov	r2, r6
 8007a3c:	4680      	mov	r8, r0
 8007a3e:	4689      	mov	r9, r1
 8007a40:	463b      	mov	r3, r7
 8007a42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a46:	f7f8 fd7b 	bl	8000540 <__aeabi_dmul>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	4640      	mov	r0, r8
 8007a50:	4649      	mov	r1, r9
 8007a52:	f7f8 fbbd 	bl	80001d0 <__aeabi_dsub>
 8007a56:	4652      	mov	r2, sl
 8007a58:	465b      	mov	r3, fp
 8007a5a:	f7f8 fd71 	bl	8000540 <__aeabi_dmul>
 8007a5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a62:	f7f8 fbb5 	bl	80001d0 <__aeabi_dsub>
 8007a66:	a30c      	add	r3, pc, #48	@ (adr r3, 8007a98 <__kernel_sin+0x140>)
 8007a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6c:	4606      	mov	r6, r0
 8007a6e:	460f      	mov	r7, r1
 8007a70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a74:	f7f8 fd64 	bl	8000540 <__aeabi_dmul>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	4630      	mov	r0, r6
 8007a7e:	4639      	mov	r1, r7
 8007a80:	f7f8 fba8 	bl	80001d4 <__adddf3>
 8007a84:	4602      	mov	r2, r0
 8007a86:	460b      	mov	r3, r1
 8007a88:	4620      	mov	r0, r4
 8007a8a:	4629      	mov	r1, r5
 8007a8c:	f7f8 fba0 	bl	80001d0 <__aeabi_dsub>
 8007a90:	e7c6      	b.n	8007a20 <__kernel_sin+0xc8>
 8007a92:	bf00      	nop
 8007a94:	f3af 8000 	nop.w
 8007a98:	55555549 	.word	0x55555549
 8007a9c:	3fc55555 	.word	0x3fc55555
 8007aa0:	3fe00000 	.word	0x3fe00000
 8007aa4:	5acfd57c 	.word	0x5acfd57c
 8007aa8:	3de5d93a 	.word	0x3de5d93a
 8007aac:	8a2b9ceb 	.word	0x8a2b9ceb
 8007ab0:	3e5ae5e6 	.word	0x3e5ae5e6
 8007ab4:	57b1fe7d 	.word	0x57b1fe7d
 8007ab8:	3ec71de3 	.word	0x3ec71de3
 8007abc:	19c161d5 	.word	0x19c161d5
 8007ac0:	3f2a01a0 	.word	0x3f2a01a0
 8007ac4:	1110f8a6 	.word	0x1110f8a6
 8007ac8:	3f811111 	.word	0x3f811111

08007acc <fabs>:
 8007acc:	ec51 0b10 	vmov	r0, r1, d0
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007ad6:	ec43 2b10 	vmov	d0, r2, r3
 8007ada:	4770      	bx	lr
 8007adc:	0000      	movs	r0, r0
	...

08007ae0 <scalbn>:
 8007ae0:	b570      	push	{r4, r5, r6, lr}
 8007ae2:	ec55 4b10 	vmov	r4, r5, d0
 8007ae6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007aea:	4606      	mov	r6, r0
 8007aec:	462b      	mov	r3, r5
 8007aee:	b991      	cbnz	r1, 8007b16 <scalbn+0x36>
 8007af0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007af4:	4323      	orrs	r3, r4
 8007af6:	d03d      	beq.n	8007b74 <scalbn+0x94>
 8007af8:	4b35      	ldr	r3, [pc, #212]	@ (8007bd0 <scalbn+0xf0>)
 8007afa:	4620      	mov	r0, r4
 8007afc:	4629      	mov	r1, r5
 8007afe:	2200      	movs	r2, #0
 8007b00:	f7f8 fd1e 	bl	8000540 <__aeabi_dmul>
 8007b04:	4b33      	ldr	r3, [pc, #204]	@ (8007bd4 <scalbn+0xf4>)
 8007b06:	429e      	cmp	r6, r3
 8007b08:	4604      	mov	r4, r0
 8007b0a:	460d      	mov	r5, r1
 8007b0c:	da0f      	bge.n	8007b2e <scalbn+0x4e>
 8007b0e:	a328      	add	r3, pc, #160	@ (adr r3, 8007bb0 <scalbn+0xd0>)
 8007b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b14:	e01e      	b.n	8007b54 <scalbn+0x74>
 8007b16:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8007b1a:	4291      	cmp	r1, r2
 8007b1c:	d10b      	bne.n	8007b36 <scalbn+0x56>
 8007b1e:	4622      	mov	r2, r4
 8007b20:	4620      	mov	r0, r4
 8007b22:	4629      	mov	r1, r5
 8007b24:	f7f8 fb56 	bl	80001d4 <__adddf3>
 8007b28:	4604      	mov	r4, r0
 8007b2a:	460d      	mov	r5, r1
 8007b2c:	e022      	b.n	8007b74 <scalbn+0x94>
 8007b2e:	460b      	mov	r3, r1
 8007b30:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007b34:	3936      	subs	r1, #54	@ 0x36
 8007b36:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8007b3a:	4296      	cmp	r6, r2
 8007b3c:	dd0d      	ble.n	8007b5a <scalbn+0x7a>
 8007b3e:	2d00      	cmp	r5, #0
 8007b40:	a11d      	add	r1, pc, #116	@ (adr r1, 8007bb8 <scalbn+0xd8>)
 8007b42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b46:	da02      	bge.n	8007b4e <scalbn+0x6e>
 8007b48:	a11d      	add	r1, pc, #116	@ (adr r1, 8007bc0 <scalbn+0xe0>)
 8007b4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b4e:	a31a      	add	r3, pc, #104	@ (adr r3, 8007bb8 <scalbn+0xd8>)
 8007b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b54:	f7f8 fcf4 	bl	8000540 <__aeabi_dmul>
 8007b58:	e7e6      	b.n	8007b28 <scalbn+0x48>
 8007b5a:	1872      	adds	r2, r6, r1
 8007b5c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007b60:	428a      	cmp	r2, r1
 8007b62:	dcec      	bgt.n	8007b3e <scalbn+0x5e>
 8007b64:	2a00      	cmp	r2, #0
 8007b66:	dd08      	ble.n	8007b7a <scalbn+0x9a>
 8007b68:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007b6c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007b70:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007b74:	ec45 4b10 	vmov	d0, r4, r5
 8007b78:	bd70      	pop	{r4, r5, r6, pc}
 8007b7a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8007b7e:	da08      	bge.n	8007b92 <scalbn+0xb2>
 8007b80:	2d00      	cmp	r5, #0
 8007b82:	a10b      	add	r1, pc, #44	@ (adr r1, 8007bb0 <scalbn+0xd0>)
 8007b84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b88:	dac1      	bge.n	8007b0e <scalbn+0x2e>
 8007b8a:	a10f      	add	r1, pc, #60	@ (adr r1, 8007bc8 <scalbn+0xe8>)
 8007b8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b90:	e7bd      	b.n	8007b0e <scalbn+0x2e>
 8007b92:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007b96:	3236      	adds	r2, #54	@ 0x36
 8007b98:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007b9c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8007bd8 <scalbn+0xf8>)
 8007ba4:	4629      	mov	r1, r5
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	e7d4      	b.n	8007b54 <scalbn+0x74>
 8007baa:	bf00      	nop
 8007bac:	f3af 8000 	nop.w
 8007bb0:	c2f8f359 	.word	0xc2f8f359
 8007bb4:	01a56e1f 	.word	0x01a56e1f
 8007bb8:	8800759c 	.word	0x8800759c
 8007bbc:	7e37e43c 	.word	0x7e37e43c
 8007bc0:	8800759c 	.word	0x8800759c
 8007bc4:	fe37e43c 	.word	0xfe37e43c
 8007bc8:	c2f8f359 	.word	0xc2f8f359
 8007bcc:	81a56e1f 	.word	0x81a56e1f
 8007bd0:	43500000 	.word	0x43500000
 8007bd4:	ffff3cb0 	.word	0xffff3cb0
 8007bd8:	3c900000 	.word	0x3c900000

08007bdc <__ieee754_sqrt>:
 8007bdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be0:	4a68      	ldr	r2, [pc, #416]	@ (8007d84 <__ieee754_sqrt+0x1a8>)
 8007be2:	ec55 4b10 	vmov	r4, r5, d0
 8007be6:	43aa      	bics	r2, r5
 8007be8:	462b      	mov	r3, r5
 8007bea:	4621      	mov	r1, r4
 8007bec:	d110      	bne.n	8007c10 <__ieee754_sqrt+0x34>
 8007bee:	4622      	mov	r2, r4
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	4629      	mov	r1, r5
 8007bf4:	f7f8 fca4 	bl	8000540 <__aeabi_dmul>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	4629      	mov	r1, r5
 8007c00:	f7f8 fae8 	bl	80001d4 <__adddf3>
 8007c04:	4604      	mov	r4, r0
 8007c06:	460d      	mov	r5, r1
 8007c08:	ec45 4b10 	vmov	d0, r4, r5
 8007c0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c10:	2d00      	cmp	r5, #0
 8007c12:	dc0e      	bgt.n	8007c32 <__ieee754_sqrt+0x56>
 8007c14:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8007c18:	4322      	orrs	r2, r4
 8007c1a:	d0f5      	beq.n	8007c08 <__ieee754_sqrt+0x2c>
 8007c1c:	b19d      	cbz	r5, 8007c46 <__ieee754_sqrt+0x6a>
 8007c1e:	4622      	mov	r2, r4
 8007c20:	4620      	mov	r0, r4
 8007c22:	4629      	mov	r1, r5
 8007c24:	f7f8 fad4 	bl	80001d0 <__aeabi_dsub>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	f7f8 fdb2 	bl	8000794 <__aeabi_ddiv>
 8007c30:	e7e8      	b.n	8007c04 <__ieee754_sqrt+0x28>
 8007c32:	152a      	asrs	r2, r5, #20
 8007c34:	d115      	bne.n	8007c62 <__ieee754_sqrt+0x86>
 8007c36:	2000      	movs	r0, #0
 8007c38:	e009      	b.n	8007c4e <__ieee754_sqrt+0x72>
 8007c3a:	0acb      	lsrs	r3, r1, #11
 8007c3c:	3a15      	subs	r2, #21
 8007c3e:	0549      	lsls	r1, r1, #21
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d0fa      	beq.n	8007c3a <__ieee754_sqrt+0x5e>
 8007c44:	e7f7      	b.n	8007c36 <__ieee754_sqrt+0x5a>
 8007c46:	462a      	mov	r2, r5
 8007c48:	e7fa      	b.n	8007c40 <__ieee754_sqrt+0x64>
 8007c4a:	005b      	lsls	r3, r3, #1
 8007c4c:	3001      	adds	r0, #1
 8007c4e:	02dc      	lsls	r4, r3, #11
 8007c50:	d5fb      	bpl.n	8007c4a <__ieee754_sqrt+0x6e>
 8007c52:	1e44      	subs	r4, r0, #1
 8007c54:	1b12      	subs	r2, r2, r4
 8007c56:	f1c0 0420 	rsb	r4, r0, #32
 8007c5a:	fa21 f404 	lsr.w	r4, r1, r4
 8007c5e:	4323      	orrs	r3, r4
 8007c60:	4081      	lsls	r1, r0
 8007c62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c66:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8007c6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c6e:	07d2      	lsls	r2, r2, #31
 8007c70:	bf5c      	itt	pl
 8007c72:	005b      	lslpl	r3, r3, #1
 8007c74:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8007c78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007c7c:	bf58      	it	pl
 8007c7e:	0049      	lslpl	r1, r1, #1
 8007c80:	2600      	movs	r6, #0
 8007c82:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8007c86:	106d      	asrs	r5, r5, #1
 8007c88:	0049      	lsls	r1, r1, #1
 8007c8a:	2016      	movs	r0, #22
 8007c8c:	4632      	mov	r2, r6
 8007c8e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8007c92:	1917      	adds	r7, r2, r4
 8007c94:	429f      	cmp	r7, r3
 8007c96:	bfde      	ittt	le
 8007c98:	193a      	addle	r2, r7, r4
 8007c9a:	1bdb      	suble	r3, r3, r7
 8007c9c:	1936      	addle	r6, r6, r4
 8007c9e:	0fcf      	lsrs	r7, r1, #31
 8007ca0:	3801      	subs	r0, #1
 8007ca2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8007ca6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007caa:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007cae:	d1f0      	bne.n	8007c92 <__ieee754_sqrt+0xb6>
 8007cb0:	4604      	mov	r4, r0
 8007cb2:	2720      	movs	r7, #32
 8007cb4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	eb00 0e0c 	add.w	lr, r0, ip
 8007cbe:	db02      	blt.n	8007cc6 <__ieee754_sqrt+0xea>
 8007cc0:	d113      	bne.n	8007cea <__ieee754_sqrt+0x10e>
 8007cc2:	458e      	cmp	lr, r1
 8007cc4:	d811      	bhi.n	8007cea <__ieee754_sqrt+0x10e>
 8007cc6:	f1be 0f00 	cmp.w	lr, #0
 8007cca:	eb0e 000c 	add.w	r0, lr, ip
 8007cce:	da42      	bge.n	8007d56 <__ieee754_sqrt+0x17a>
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	db40      	blt.n	8007d56 <__ieee754_sqrt+0x17a>
 8007cd4:	f102 0801 	add.w	r8, r2, #1
 8007cd8:	1a9b      	subs	r3, r3, r2
 8007cda:	458e      	cmp	lr, r1
 8007cdc:	bf88      	it	hi
 8007cde:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8007ce2:	eba1 010e 	sub.w	r1, r1, lr
 8007ce6:	4464      	add	r4, ip
 8007ce8:	4642      	mov	r2, r8
 8007cea:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8007cee:	3f01      	subs	r7, #1
 8007cf0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8007cf4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007cf8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007cfc:	d1dc      	bne.n	8007cb8 <__ieee754_sqrt+0xdc>
 8007cfe:	4319      	orrs	r1, r3
 8007d00:	d01b      	beq.n	8007d3a <__ieee754_sqrt+0x15e>
 8007d02:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8007d88 <__ieee754_sqrt+0x1ac>
 8007d06:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8007d8c <__ieee754_sqrt+0x1b0>
 8007d0a:	e9da 0100 	ldrd	r0, r1, [sl]
 8007d0e:	e9db 2300 	ldrd	r2, r3, [fp]
 8007d12:	f7f8 fa5d 	bl	80001d0 <__aeabi_dsub>
 8007d16:	e9da 8900 	ldrd	r8, r9, [sl]
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	4640      	mov	r0, r8
 8007d20:	4649      	mov	r1, r9
 8007d22:	f7f8 fe89 	bl	8000a38 <__aeabi_dcmple>
 8007d26:	b140      	cbz	r0, 8007d3a <__ieee754_sqrt+0x15e>
 8007d28:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 8007d2c:	e9da 0100 	ldrd	r0, r1, [sl]
 8007d30:	e9db 2300 	ldrd	r2, r3, [fp]
 8007d34:	d111      	bne.n	8007d5a <__ieee754_sqrt+0x17e>
 8007d36:	3601      	adds	r6, #1
 8007d38:	463c      	mov	r4, r7
 8007d3a:	1072      	asrs	r2, r6, #1
 8007d3c:	0863      	lsrs	r3, r4, #1
 8007d3e:	07f1      	lsls	r1, r6, #31
 8007d40:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8007d44:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8007d48:	bf48      	it	mi
 8007d4a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8007d4e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8007d52:	4618      	mov	r0, r3
 8007d54:	e756      	b.n	8007c04 <__ieee754_sqrt+0x28>
 8007d56:	4690      	mov	r8, r2
 8007d58:	e7be      	b.n	8007cd8 <__ieee754_sqrt+0xfc>
 8007d5a:	f7f8 fa3b 	bl	80001d4 <__adddf3>
 8007d5e:	e9da 8900 	ldrd	r8, r9, [sl]
 8007d62:	4602      	mov	r2, r0
 8007d64:	460b      	mov	r3, r1
 8007d66:	4640      	mov	r0, r8
 8007d68:	4649      	mov	r1, r9
 8007d6a:	f7f8 fe5b 	bl	8000a24 <__aeabi_dcmplt>
 8007d6e:	b120      	cbz	r0, 8007d7a <__ieee754_sqrt+0x19e>
 8007d70:	1ca0      	adds	r0, r4, #2
 8007d72:	bf08      	it	eq
 8007d74:	3601      	addeq	r6, #1
 8007d76:	3402      	adds	r4, #2
 8007d78:	e7df      	b.n	8007d3a <__ieee754_sqrt+0x15e>
 8007d7a:	1c63      	adds	r3, r4, #1
 8007d7c:	f023 0401 	bic.w	r4, r3, #1
 8007d80:	e7db      	b.n	8007d3a <__ieee754_sqrt+0x15e>
 8007d82:	bf00      	nop
 8007d84:	7ff00000 	.word	0x7ff00000
 8007d88:	20000068 	.word	0x20000068
 8007d8c:	20000060 	.word	0x20000060

08007d90 <floor>:
 8007d90:	ec51 0b10 	vmov	r0, r1, d0
 8007d94:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d9c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8007da0:	2e13      	cmp	r6, #19
 8007da2:	460c      	mov	r4, r1
 8007da4:	4605      	mov	r5, r0
 8007da6:	4680      	mov	r8, r0
 8007da8:	dc34      	bgt.n	8007e14 <floor+0x84>
 8007daa:	2e00      	cmp	r6, #0
 8007dac:	da17      	bge.n	8007dde <floor+0x4e>
 8007dae:	a332      	add	r3, pc, #200	@ (adr r3, 8007e78 <floor+0xe8>)
 8007db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db4:	f7f8 fa0e 	bl	80001d4 <__adddf3>
 8007db8:	2200      	movs	r2, #0
 8007dba:	2300      	movs	r3, #0
 8007dbc:	f7f8 fe50 	bl	8000a60 <__aeabi_dcmpgt>
 8007dc0:	b150      	cbz	r0, 8007dd8 <floor+0x48>
 8007dc2:	2c00      	cmp	r4, #0
 8007dc4:	da55      	bge.n	8007e72 <floor+0xe2>
 8007dc6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8007dca:	432c      	orrs	r4, r5
 8007dcc:	2500      	movs	r5, #0
 8007dce:	42ac      	cmp	r4, r5
 8007dd0:	4c2b      	ldr	r4, [pc, #172]	@ (8007e80 <floor+0xf0>)
 8007dd2:	bf08      	it	eq
 8007dd4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8007dd8:	4621      	mov	r1, r4
 8007dda:	4628      	mov	r0, r5
 8007ddc:	e023      	b.n	8007e26 <floor+0x96>
 8007dde:	4f29      	ldr	r7, [pc, #164]	@ (8007e84 <floor+0xf4>)
 8007de0:	4137      	asrs	r7, r6
 8007de2:	ea01 0307 	and.w	r3, r1, r7
 8007de6:	4303      	orrs	r3, r0
 8007de8:	d01d      	beq.n	8007e26 <floor+0x96>
 8007dea:	a323      	add	r3, pc, #140	@ (adr r3, 8007e78 <floor+0xe8>)
 8007dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df0:	f7f8 f9f0 	bl	80001d4 <__adddf3>
 8007df4:	2200      	movs	r2, #0
 8007df6:	2300      	movs	r3, #0
 8007df8:	f7f8 fe32 	bl	8000a60 <__aeabi_dcmpgt>
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	d0eb      	beq.n	8007dd8 <floor+0x48>
 8007e00:	2c00      	cmp	r4, #0
 8007e02:	bfbe      	ittt	lt
 8007e04:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8007e08:	4133      	asrlt	r3, r6
 8007e0a:	18e4      	addlt	r4, r4, r3
 8007e0c:	ea24 0407 	bic.w	r4, r4, r7
 8007e10:	2500      	movs	r5, #0
 8007e12:	e7e1      	b.n	8007dd8 <floor+0x48>
 8007e14:	2e33      	cmp	r6, #51	@ 0x33
 8007e16:	dd0a      	ble.n	8007e2e <floor+0x9e>
 8007e18:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8007e1c:	d103      	bne.n	8007e26 <floor+0x96>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	460b      	mov	r3, r1
 8007e22:	f7f8 f9d7 	bl	80001d4 <__adddf3>
 8007e26:	ec41 0b10 	vmov	d0, r0, r1
 8007e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e2e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8007e32:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007e36:	40df      	lsrs	r7, r3
 8007e38:	4207      	tst	r7, r0
 8007e3a:	d0f4      	beq.n	8007e26 <floor+0x96>
 8007e3c:	a30e      	add	r3, pc, #56	@ (adr r3, 8007e78 <floor+0xe8>)
 8007e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e42:	f7f8 f9c7 	bl	80001d4 <__adddf3>
 8007e46:	2200      	movs	r2, #0
 8007e48:	2300      	movs	r3, #0
 8007e4a:	f7f8 fe09 	bl	8000a60 <__aeabi_dcmpgt>
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	d0c2      	beq.n	8007dd8 <floor+0x48>
 8007e52:	2c00      	cmp	r4, #0
 8007e54:	da0a      	bge.n	8007e6c <floor+0xdc>
 8007e56:	2e14      	cmp	r6, #20
 8007e58:	d101      	bne.n	8007e5e <floor+0xce>
 8007e5a:	3401      	adds	r4, #1
 8007e5c:	e006      	b.n	8007e6c <floor+0xdc>
 8007e5e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8007e62:	2301      	movs	r3, #1
 8007e64:	40b3      	lsls	r3, r6
 8007e66:	441d      	add	r5, r3
 8007e68:	4545      	cmp	r5, r8
 8007e6a:	d3f6      	bcc.n	8007e5a <floor+0xca>
 8007e6c:	ea25 0507 	bic.w	r5, r5, r7
 8007e70:	e7b2      	b.n	8007dd8 <floor+0x48>
 8007e72:	2500      	movs	r5, #0
 8007e74:	462c      	mov	r4, r5
 8007e76:	e7af      	b.n	8007dd8 <floor+0x48>
 8007e78:	8800759c 	.word	0x8800759c
 8007e7c:	7e37e43c 	.word	0x7e37e43c
 8007e80:	bff00000 	.word	0xbff00000
 8007e84:	000fffff 	.word	0x000fffff

08007e88 <_init>:
 8007e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8a:	bf00      	nop
 8007e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e8e:	bc08      	pop	{r3}
 8007e90:	469e      	mov	lr, r3
 8007e92:	4770      	bx	lr

08007e94 <_fini>:
 8007e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e96:	bf00      	nop
 8007e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e9a:	bc08      	pop	{r3}
 8007e9c:	469e      	mov	lr, r3
 8007e9e:	4770      	bx	lr
